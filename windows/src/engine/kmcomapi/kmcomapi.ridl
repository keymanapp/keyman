// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 24/03/2017 5:09:28 PM (- $Rev: 12980 $, 162398703).

[
  uuid(F16E2A9A-DA46-4EA3-BFF3-BA46B480C961),
  version(10.0),
  helpstring("Keyman Engine for Windows API Library"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 100663657),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1084184852),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 6.00.0361 at Mon May 10 20:27:31 2004\n")

]
library keymanapi
{

  importlib("stdole2.tlb");

  coclass Keyman;
  interface IKeymanObject;
  interface IKeyman;
  interface IKeymanCollection;
  interface IKeymanErrors;
  interface IKeymanHotkeys;
  interface IKeymanKeyboardLanguagesInstalled;
  interface IKeymanKeyboardOptions;
  interface IKeymanKeyboards;
  interface IKeymanKeyboardsInstalled;
  interface IKeymanPackageContentKeyboards;
  interface IKeymanLanguages;
  interface IKeymanOptions;
  interface IKeymanPackageContentFiles;
  interface IKeymanPackageContentFonts;
  interface IKeymanPackagesInstalled;
  interface IKeymanControl;
  interface IKeymanError;
  interface IKeymanHotkey;
  interface IKeymanKeyboard;
  interface IKeymanKeyboardFile;
  interface IKeymanKeyboardInstalled;
  interface IKeymanKeyboardLanguageInstalled;
  interface IKeymanKeyboardOption;
  interface IKeymanLanguage;
  interface IKeymanOption;
  interface IKeymanPackage;
  interface IKeymanPackageFile;
  interface IKeymanPackageInstalled;
  interface IKeymanPackageContentFile;
  interface IKeymanPackageContentFont;
  interface IKeymanSystemInfo;
  interface IKeymanUserInterface;
  interface IKeymanVisualKeyboard;


  [
    version(10.0)
  ]
  enum tagKeymanKeyboardEncodings
  {
    keANSI = 1,
    keUnicode = 2
  };

  [
    version(10.0)
  ]
  enum tagKeymanHotkeyModifiers
  {
    HK_ALT = 65536,
    HK_CTRL = 131072,
    HK_SHIFT = 262144
  };

  [
    version(10.0)
  ]
  enum tagKeymanErrorSeverity
  {
    kesFatal = 0,
    kesError = 1,
    kesWarning = 2,
    kesHint = 3
  };

  [
    uuid(DF782203-E066-4ACF-8E6F-34A70F069DF0),
    version(10.0)
  ]
  enum tagKeymanSerializeFlags
  {
    ksfExportImages = 1
  };

  [
    uuid(DDB53ACB-9E89-4EAC-AC4C-FDD01F81AF68),
    version(10.0)
  ]
  enum tagKeymanKeyboardLayoutType
  {
    kltPositional = 0,
    kltMnemonic = 1
  };

  [
    uuid(C0467D5C-5CA4-423B-96D4-89983C9CB47C),
    version(10.0)
  ]
  enum tagKeymanHotkeyTarget
  {
    kh__Low = 0,
    khKeymanOff = 0,
    khKeyboardMenu = 1,
    khVisualKeyboard = 2,
    khKeymanConfiguration = 3,
    khKeyboardUsage = 4,
    khFontHelper = 5,
    khCharacterMap = 6,
    khTextEditor = 7,
    khLanguageSwitch = 8,
    khKeyboard = 9,
    kh__High = 9
  };

  [
    uuid(251C637F-5BB4-4128-8ACA-B392151475B6),
    version(10.0)
  ]
  enum tagKeymanOptionType
  {
    kotUnknown = 0,
    kotBool = 1,
    kotLong = 2,
    kotString = 3
  };

  [
    uuid(BE87AA62-195E-4A10-B286-C167098608F3),
    version(10.0),
    public
  ]
  typedef enum tagKeymanKeyboardEncodings KeymanKeyboardEncodings;

  [
    uuid(1E626184-D96C-4066-A3CD-5F52A3CD8ACE),
    version(10.0),
    public
  ]
  typedef enum tagKeymanHotkeyModifiers KeymanHotkeyModifiers;

  [
    uuid(A7D7BF32-BA50-4130-BE7D-2A3EFFE1DB97),
    version(10.0),
    public
  ]
  typedef enum tagKeymanErrorSeverity KeymanErrorSeverity;

  [
    uuid(1A53AE95-C043-4C75-A52B-D6CF17F7B575),
    version(10.0),
    public
  ]
  typedef enum tagKeymanKeyboardLayoutType KeymanKeyboardLayoutType;

  [
    uuid(8249A822-C5D8-4167-9403-CEC929077FF5),
    version(10.0),
    public
  ]
  typedef enum tagKeymanHotkeyTarget KeymanHotkeyTarget;

  [
    uuid(E2F17227-0DC0-4401-B4E2-3CBEFF2E1FFC),
    version(10.0),
    public
  ]
  typedef enum tagKeymanOptionType KeymanOptionType;

  [
    uuid(4DE644EB-F254-4522-AF44-0966CD4AE9F4),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanObject"),
    dual,
    oleautomation
  ]
  interface IKeymanObject: IDispatch
  {
    [id(0x00000191)]
    HRESULT _stdcall SerializeXML([in] enum tagKeymanSerializeFlags Flags, [in] BSTR ImagePath, [out] VARIANT* References, [out, retval] BSTR* XML);
  };

  [
    uuid(6B363F95-6459-404A-BB5E-F06AFB986BAA),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeyman"),
    dual,
    oleautomation
  ]
  interface IKeyman: IKeymanObject
  {
    [id(0x00000001)]
    HRESULT _stdcall Apply(void);
    [propget, id(0x00000002)]
    HRESULT _stdcall AutoApply([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall AutoApply([in] VARIANT_BOOL Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Control([out, retval] IKeymanControl** Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Errors([out, retval] IKeymanErrors** Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Hotkeys([out, retval] IKeymanHotkeys** Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Keyboards([out, retval] IKeymanKeyboardsInstalled** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall Languages([out, retval] IKeymanLanguages** Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall Options([out, retval] IKeymanOptions** Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall Packages([out, retval] IKeymanPackagesInstalled** Value);
    [id(0x0000000A)]
    HRESULT _stdcall Refresh(void);
    [propget, id(0x0000000B)]
    HRESULT _stdcall SystemInfo([out, retval] IKeymanSystemInfo** Value);
  };

  [
    uuid(A2FB4733-30DE-4C7C-8ED5-F6CAFA09BB2F),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanCollection"),
    dual,
    oleautomation
  ]
  interface IKeymanCollection: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0xFFFFFFFC), restricted]
    HRESULT _stdcall _NewEnum([out, retval]  IUnknown** Value);
    [id(0x00000002)]
    HRESULT _stdcall Refresh(void);
  };

  [
    uuid(6A05CFDD-2B7E-4CA5-BAE6-3D5DE193E9CB),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanErrors"),
    dual,
    oleautomation
  ]
  interface IKeymanErrors: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanError** Value);
    [id(0x00000010)]
    HRESULT _stdcall Clear(void);
  };

  [
    uuid(5CB5DFC0-05EF-48F0-8249-7BC01AF404FF),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanHotkeys"),
    dual,
    oleautomation
  ]
  interface IKeymanHotkeys: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanHotkey** Value);
    [id(0x00000011)]
    HRESULT _stdcall Apply(void);
    [id(0x00000012)]
    HRESULT _stdcall Reset(void);
  };

  [
    uuid(F5CFFF42-4294-44C7-8F97-67EB2E83BB1F),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardLanguagesInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardLanguagesInstalled: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanKeyboardLanguageInstalled** Value);
    [id(0x00000010)]
    HRESULT _stdcall Install([in] BSTR BCP47Code);
    [id(0x00000011)]
    HRESULT _stdcall InstallByLangID([in] long LangID);
  };

  [
    uuid(29D0C83A-DBCE-4C54-80F0-B45ABF9FAB49),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardOptions"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardOptions: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanKeyboardOption** Value);
    [id(0x00000010)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(4EF1F073-61C2-4579-AE34-058F17E56414),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboards"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboards: IKeymanCollection
  {
    [id(0x00000005)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(61406197-399A-41C3-9A1A-158327523FB0),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardsInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardsInstalled: IKeymanKeyboards
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanKeyboardInstalled** Value);
    [id(0x00000010)]
    HRESULT _stdcall GetKeyboardFromFile([in] BSTR Filename, [out, retval] IKeymanKeyboardFile** Keyboard);
    [id(0x00000011)]
    HRESULT _stdcall Install([in] BSTR Filename, [in] VARIANT_BOOL Force);
    [id(0x00000012)]
    HRESULT _stdcall Apply(void);
  };

  [
    uuid(3BCF539D-3E94-4271-A7F9-ACAF4D05C0B1),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentKeyboards"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentKeyboards: IKeymanKeyboards
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanKeyboard** Value);
  };

  [
    uuid(53B3076E-86BE-4538-B3AB-5E36DDBD3A6E),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanLanguages"),
    dual,
    oleautomation
  ]
  interface IKeymanLanguages: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanLanguage** Value);
    [id(0x00000005)]
    HRESULT _stdcall Apply(void);
  };

  [
    uuid(F3EEB9F6-947E-4DD7-A6BD-86DA65B02143),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanOptions"),
    dual,
    oleautomation
  ]
  interface IKeymanOptions: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanOption** Value);
    [id(0x00000010)]
    HRESULT _stdcall Apply(void);
    [id(0x00000011)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(522DC05C-2315-4E99-B66C-468B7264A40B),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFiles"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFiles: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanPackageContentFile** Value);
    [id(0x00000010)]
    HRESULT _stdcall IndexOf([in] BSTR Filename, [out, retval] long* Index);
  };

  [
    uuid(C27A1117-C075-4B1E-975F-4A44A757B0F1),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFonts"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFonts: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanPackageContentFont** Value);
    [id(0x00000010)]
    HRESULT _stdcall IndexOf([in] BSTR Filename, [out, retval] long* Index);
  };

  [
    uuid(8A38B1C3-CB4D-4CCF-87B7-0F2A16076D99),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackagesInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanPackagesInstalled: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanPackageInstalled** Value);
    [id(0x00000010)]
    HRESULT _stdcall GetPackageFromFile([in] BSTR Filename, [out, retval] IKeymanPackageFile** Package);
    [id(0x00000011)]
    HRESULT _stdcall Install([in] BSTR Filename, [in] VARIANT_BOOL Force);
    [id(0x00000012)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(4B00DCE2-9DEF-41ED-8254-409DE8746CFF),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanControl"),
    dual,
    oleautomation
  ]
  interface IKeymanControl: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ActiveLanguage([out, retval] IKeymanLanguage** Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall ActiveLanguage([in] IKeymanLanguage* Value);
    [id(0x00000002)]
    HRESULT _stdcall IsConfigurationOpen([out, retval] VARIANT_BOOL* Value);
    [id(0x00000003)]
    HRESULT _stdcall IsKeymanRunning([out, retval] VARIANT_BOOL* Value);
    [id(0x00000004)]
    HRESULT _stdcall IsOnlineUpdateCheckOpen([out, retval] VARIANT_BOOL* Value);
    [id(0x00000005)]
    HRESULT _stdcall IsTextEditorOpen([out, retval] VARIANT_BOOL* Value);
    [id(0x00000006)]
    HRESULT _stdcall IsVisualKeyboardOpen([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall LastActiveWindow([out, retval] unsigned long* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall LastFocusWindow([out, retval] unsigned long* Value);
    [id(0x00000009)]
    HRESULT _stdcall OpenConfiguration(void);
    [id(0x0000000A)]
    HRESULT _stdcall OpenDiagnostics(void);
    [id(0x0000000B)]
    HRESULT _stdcall OpenHelp([in] BSTR Topic);
    [id(0x0000000C)]
    HRESULT _stdcall OpenTextEditor(void);
    [id(0x0000000D)]
    HRESULT _stdcall OpenUpdateCheck(void);
    [id(0x0000000E)]
    HRESULT _stdcall ShowKeyboardWelcome([in] IKeymanKeyboardInstalled* Keyboard);
    [id(0x0000000F)]
    HRESULT _stdcall StartKeyman(void);
    [id(0x00000010)]
    HRESULT _stdcall StartVisualKeyboard(void);
    [id(0x00000011)]
    HRESULT _stdcall StopKeyman(void);
    [id(0x00000012)]
    HRESULT _stdcall StopVisualKeyboard(void);
  };

  [
    uuid(1B9B7E43-189F-4852-A84F-E57D4A8C7243),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanError"),
    dual,
    oleautomation
  ]
  interface IKeymanError: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ErrorCode([out, retval] long* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Severity([out, retval] long* Value);
  };

  [
    uuid(F470447C-2A4D-492C-9A94-91388E648544),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanHotkey"),
    dual,
    oleautomation
  ]
  interface IKeymanHotkey: IKeymanObject
  {
    [id(0x00000001)]
    HRESULT _stdcall Clear(void);
    [id(0x00000002)]
    HRESULT _stdcall IsEmpty([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Modifiers([out, retval] KeymanHotkeyModifiers* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall Modifiers([in] KeymanHotkeyModifiers Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall VirtualKey([out, retval] long* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall VirtualKey([in] long Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall RawValue([out, retval] long* Value);
    [propput, id(0x00000005)]
    HRESULT _stdcall RawValue([in] long Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Target([out, retval] KeymanHotkeyTarget* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall Target([in] KeymanHotkeyTarget Value);
  };

  [
    uuid(8275AA21-9345-451D-8F73-17B6CB10874C),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboard"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboard: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Bitmap([out, retval] IPicture** Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Copyright([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall DefaultBCP47Languages([out, retval] BSTR* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DefaultPrimaryLanguage([out, retval] long* value);
    [propget, id(0x00000005)]
    HRESULT _stdcall DefaultWindowsLanguages([out, retval] BSTR* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall DefaultHotkey([out, retval] IKeymanHotkey** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall Encodings([out, retval] KeymanKeyboardEncodings* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [id(0x00000009)]
    HRESULT _stdcall GetCharsUsed([out, retval] BSTR* Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall ID([out, retval] BSTR* Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall LayoutType([out, retval] KeymanKeyboardLayoutType* Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall Message([out, retval] BSTR* Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall Version([out, retval] BSTR* Value);
  };

  [
    uuid(80959B80-C7A9-4EB1-AB46-3762F8E5315B),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardFile"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardFile: IKeymanKeyboard
  {
    [id(0x00000100)]
    HRESULT _stdcall Install([in] VARIANT_BOOL Force);
  };

  [
    uuid(DF01AA44-06FC-46AC-A6E9-31102C30F5CA),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardInstalled: IKeymanKeyboard
  {
    [propget, id(0x00000101)]
    HRESULT _stdcall IconFilename([out, retval] BSTR* Value);
    [id(0x00000102)]
    HRESULT _stdcall InstallVisualKeyboard([in] BSTR Filename);
    [propget, id(0x00000103)]
    HRESULT _stdcall KeymanID([out, retval] long* Value);
    [propget, id(0x00000104)]
    HRESULT _stdcall Languages([out, retval] IKeymanKeyboardLanguagesInstalled** Value);
    [propget, id(0x00000105)]
    HRESULT _stdcall Loaded([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000105)]
    HRESULT _stdcall Loaded([in] VARIANT_BOOL Value);
    [propget, id(0x00000106)]
    HRESULT _stdcall Options([out, retval] IKeymanKeyboardOptions** Value);
    [propget, id(0x00000107)]
    HRESULT _stdcall OwnerPackage([out, retval] IKeymanPackageInstalled** Value);
    [propget, id(0x00000108)]
    HRESULT _stdcall VisualKeyboard([out, retval] IKeymanVisualKeyboard** Value);
    [id(0x00000109)]
    HRESULT _stdcall Uninstall(void);
  };

  [
    uuid(2162FBDF-A165-4460-B99A-BF1FA3C96B76),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardLanguageInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardLanguageInstalled: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall BCP47Code([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall LangID([out, retval] long* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall OwnerKeyboard([out, retval] IKeymanKeyboardInstalled** Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall ProfileGUID([out, retval] struct GUID* Value);
    [id(0x00000006)]
    HRESULT _stdcall Uninstall(void);
  };

  [
    uuid(E0E3821D-08D7-4699-B453-EA4FDADE9B9B),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardOption"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardOption: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Value([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall Value([in] BSTR Value);
  };

  [
    uuid(5C6551E6-FCC8-4D7F-96E4-DAB27251186C),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanLanguage"),
    dual,
    oleautomation
  ]
  interface IKeymanLanguage: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall BCP47Code([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall HKL([out, retval] unsigned long* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Hotkey([out, retval] IKeymanHotkey** Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall KeymanKeyboardLanguage([out, retval] IKeymanKeyboardLanguageInstalled** Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall LangID([out, retval] long* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall LayoutName([out, retval] BSTR* Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall LocaleName([out, retval] BSTR* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall ProfileGUID([out, retval] struct GUID* Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall ClassID([out, retval] struct GUID* Value);
  };

  [
    uuid(59FB7DCC-BB22-4BDF-B6A8-90BE67D629C8),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanOption"),
    dual,
    oleautomation
  ]
  interface IKeymanOption: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall DefaultValue([out, retval] VARIANT* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Group([out, retval] BSTR* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ID([out, retval] BSTR* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall OptionType([out, retval] KeymanOptionType* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Value([out, retval] VARIANT* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall Value([in] VARIANT Value);
  };

  [
    uuid(FE0DFF5D-56E2-4B8F-988C-8EDCF8F8E6F1),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackage"),
    dual,
    oleautomation
  ]
  interface IKeymanPackage: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Author([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall AuthorEmail([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Copyright([out, retval] BSTR* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Files([out, retval] IKeymanPackageContentFiles** Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Fonts([out, retval] IKeymanPackageContentFonts** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall Graphic([out, retval] IPicture** Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall GraphicFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall ID([out, retval] BSTR* Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall KeyboardOptionsFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall Keyboards([out, retval] IKeymanPackageContentKeyboards** Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall ReadmeFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall UsageFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x0000000F)]
    HRESULT _stdcall Version([out, retval] BSTR* Value);
    [propget, id(0x00000010)]
    HRESULT _stdcall WelcomeFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x00000011)]
    HRESULT _stdcall Website([out, retval] BSTR* Value);
  };

  [
    uuid(9B67EB6C-5288-4E28-943C-F2981208D64A),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageFile"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageFile: IKeymanPackage
  {
    [id(0x00000100)]
    HRESULT _stdcall Install([in] VARIANT_BOOL Force);
  };

  [
    uuid(7062A9DB-CC9C-49CF-AC03-D384C7C1527D),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageInstalled: IKeymanPackage
  {
    [id(0x00000100)]
    HRESULT _stdcall Uninstall([in] VARIANT_BOOL RemoveFonts);
  };

  [
    uuid(FCB845CD-BAD7-4C9F-8A7F-5F6389268A1E),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFile"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFile: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall FullFilename([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Stream([out, retval]  IUnknown** Value);
  };

  [
    uuid(79A41E0F-6177-434C-A20B-F1F61B7E87F5),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFont"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFont: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
  };

  [
    uuid(60AC9C46-167A-41A4-AD27-F2980C82C204),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanSystemInfo"),
    dual,
    oleautomation
  ]
  interface IKeymanSystemInfo: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall EngineInstallPath([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall EngineVersion([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall IsAdministrator([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall RebootRequired([out, retval] VARIANT_BOOL* Value);
    [id(0x00000005)]
    HRESULT _stdcall SetReboot(void);
  };

  [
    uuid(774793A4-259E-47F1-9D71-F83DC6C0A159),
    version(10.0),
    helpstring("Private helper class for UI libraries"),
    dual,
    oleautomation
  ]
  interface IKeymanUserInterface: IKeymanObject
  {
  };

  [
    uuid(CCA8112B-D72E-49FE-AC2C-CB18DC0D3EC7),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanVisualKeyboard"),
    dual,
    oleautomation
  ]
  interface IKeymanVisualKeyboard: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [id(0x00000002)]
    HRESULT _stdcall Uninstall(void);
  };

  [
    uuid(CF46549D-4D2D-4679-A2E1-23A815F172F8),
    version(10.0)
  ]
  coclass Keyman
  {
    [default] interface IKeyman;
  };

};
