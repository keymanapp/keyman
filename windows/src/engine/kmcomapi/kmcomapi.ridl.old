// ************************************************************************ //
// WARNING
// -------
// This file is generated by the Type Library importer or Type Libary Editor.
// Barring syntax errors, the Editor will parse modifications made to the file.
// However, when applying changes via the Editor this file will be regenerated
// and comments or formatting changes will be lost.
// ************************************************************************ //
// File generated on 7/03/2017 10:24:48 AM (- $Rev: 12980 $, 226250625).

[
  uuid(C0578821-7C72-419B-8EF0-55FB7DB3BA6F),
  version(10.0),
  helpstring("Keyman Engine for Windows API Library"),
  custom(DE77BA64-517C-11D1-A2DA-0000F8773CE9, 100663657),
  custom(DE77BA63-517C-11D1-A2DA-0000F8773CE9, 1084184852),
  custom(DE77BA65-517C-11D1-A2DA-0000F8773CE9, "Created by MIDL version 6.00.0361 at Mon May 10 20:27:31 2004\n")

]
library keymanapi
{

  importlib("stdole2.tlb");

  coclass Keyman;

  interface IKeymanObject;
  interface IKeyman;

  interface IKeymanCollection;
    interface IKeymanErrors;
    interface IKeymanHotkeys;
    interface IKeymanKeyboardLanguages;
    interface IKeymanKeyboardOptions;
    interface IKeymanKeyboards;
      interface IKeymanKeyboardsInstalled;
      interface IKeymanPackageContentKeyboards;
    interface IKeymanLanguages;
    interface IKeymanOptions;
    interface IKeymanPackageContentFiles;
    interface IKeymanPackageContentFonts;
    interface IKeymanPackages;
      interface IKeymanPackagesInstalled;

  interface IKeymanControl;
  interface IKeymanError;
  interface IKeymanHotkey;
  interface IKeymanKeyboard;
    interface IKeymanKeyboardFile;
    interface IKeymanKeyboardInstalled;
  interface IKeymanKeyboardLanguageInstalled;
  interface IKeymanKeyboardOption;
  interface IKeymanLanguage;
  interface IKeymanOption;
  interface IKeymanPackage;
    interface IKeymanPackageFile;
    interface IKeymanPackageInstalled;
  interface IKeymanPackageContentFile;
  interface IKeymanPackageContentFont;
  interface IKeymanSystemInfo;
  interface IKeymanVisualKeyboard;

  [
    version(10.0)
  ]
  enum tagKeymanKeyboardEncodings
  {
    keANSI = 1,
    keUnicode = 2
  };

  [
    version(10.0)
  ]
  enum tagKeymanHotkeyModifiers
  {
    HK_ALT = 65536,
    HK_CTRL = 131072,
    HK_SHIFT = 262144
  };

  [
    version(10.0)
  ]
  enum tagKeymanErrorSeverity
  {
    kesFatal = 0,
    kesError = 1,
    kesWarning = 2,
    kesHint = 3
  };

  [
    uuid(D5286174-749E-433C-9C8A-EC086E5F9EFB),
    version(10.0)
  ]
  enum tagKeymanSerializeFlags
  {
    ksfExportImages = 1
  };

  [
    uuid(5EE3C20C-8956-4C06-93D3-FFFAD83FFE7C),
    version(10.0)
  ]
  enum tagKeymanKeyboardLayoutType
  {
    kltPositional = 0,
    kltMnemonic = 1
  };

  [
    uuid(3B3178F7-518B-485F-8C77-82EE57EAC860),
    version(10.0)
  ]
  enum tagKeymanHotkeyTarget
  {
    khKeymanOff = 0,
    khKeyboardMenu = 1,
    khVisualKeyboard = 2,
    khKeymanConfiguration = 3,
    khKeyboardUsage = 4,
    khFontHelper = 5,
    khCharacterMap = 6,
    khTextEditor = 7,
    khLanguageSwitch = 8,
    khKeyboard = 9
	};

  [
    uuid(6A56C7B3-1023-4263-833C-EAE07F39B0F5),
    version(10.0)
  ]
  enum tagKeymanOptionType
  {
    kotUnknown = 0,
    kotBool = 1,
    kotLong = 2,
    kotString = 3
  };

  [
    uuid(193C6F5D-05A6-4A44-A316-636686BBB347),
    version(10.0),
    public
  ]
  typedef enum tagKeymanKeyboardEncodings KeymanKeyboardEncodings;

  [
    uuid(E9ECF9BA-8101-4CF7-AF20-ED325FB0BAE6),
    version(10.0),
    public
  ]
  typedef enum tagKeymanHotkeyModifiers KeymanHotkeyModifiers;

  [
    uuid(0BD0918F-020B-4F97-BC9C-E24004792FEB),
    version(10.0),
    public
  ]
  typedef enum tagKeymanErrorSeverity KeymanErrorSeverity;

  [
    uuid(31AC219A-5340-4156-804B-D217C054817E),
    version(10.0),
    public
  ]
  typedef enum tagKeymanKeyboardLayoutType KeymanKeyboardLayoutType;

  [
    uuid(58D077AF-5415-4E64-B8A4-B01EE0534861),
    version(10.0),
    public
  ]
  typedef enum tagKeymanHotkeyTarget KeymanHotkeyTarget;

  [
    uuid(E1D229AF-9B8F-4C19-97A9-58405C83A1CB),
    version(10.0),
    public
  ]
  typedef enum tagKeymanOptionType KeymanOptionType;

  [
    uuid(EB557D80-4D59-482F-9616-1629236534B4),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanObject"),
    dual,
    oleautomation
  ]
  interface IKeymanObject: IDispatch
  {
    [id(0x00000191)]
    HRESULT _stdcall SerializeXML([out] BSTR* XML, [in] enum tagKeymanSerializeFlags Flags, [in] BSTR ImagePath, [out] VARIANT* References);
  };

  [
    uuid(7B095092-9CFF-4349-AF4C-BC0684981682),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeyman"),
    dual,
    oleautomation
  ]
  interface IKeyman: IKeymanObject
  {
    [id(0x00000001)]
    HRESULT _stdcall Apply(void);
    [propget, id(0x00000002)]
    HRESULT _stdcall AutoApply([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall AutoApply([in] VARIANT_BOOL Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Control([out, retval] IKeymanControl** Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Errors([out, retval] IKeymanErrors** Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Hotkeys([out, retval] IKeymanHotkeys** Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Keyboards([out, retval] IKeymanKeyboardsInstalled** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall Options([out, retval] IKeymanOptions** Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall Packages([out, retval] IKeymanPackagesInstalled** Value);
    [id(0x00000009)]
    HRESULT _stdcall Refresh(void);
    [propget, id(0x0000000A)]
    HRESULT _stdcall SystemInfo([out, retval] IKeymanSystemInfo** Value);
  };

  [
    uuid(49C87E53-E98C-4E01-BA36-124A4E6E0F39),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanCollection"),
    dual,
    oleautomation
  ]
  interface IKeymanCollection: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Count([out, retval] long* Value);
    [propget, id(0xFFFFFFFC), restricted]
    HRESULT _stdcall _NewEnum([out, retval]  IUnknown** Value);
    [id(0x00000002)]
    HRESULT _stdcall Refresh(void);
  };

  [
    uuid(D3BB819F-66BF-4ADF-B6E8-F1E267095CC9),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanErrors"),
    dual,
    oleautomation
  ]
  interface IKeymanErrors: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanError** Value);
    [id(0x00000010)]
    HRESULT _stdcall Clear(void);
  };

  [
    uuid(0E98E153-F019-4450-8D4C-1AE9A8CEE8F3),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanHotkeys"),
    dual,
    oleautomation
  ]
  interface IKeymanHotkeys: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanHotkey** Value);
    [id(0x00000010)]
    HRESULT _stdcall Add([in] long Value, [in] long Target, [out, retval] IKeymanHotkey** Hotkey);
    [id(0x00000011)]
    HRESULT _stdcall Apply(void);
    [id(0x00000012)]
    HRESULT _stdcall Clear(void);
  };

  [
    uuid(0E75D573-86D5-46DD-A85B-BE3AB1B004B6),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardLanguagesInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardLanguagesInstalled: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanKeyboardLanguageInstalled** Value);
    [id(0x00000010)]
    HRESULT _stdcall Install([in] BSTR BCP47Code);
    [id(0x00000011)]
    HRESULT _stdcall InstallByLangID([in] long LangID);
  };

  [
    uuid(0E75D573-86D5-46DD-A85B-BE3AB1B004B6),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardOptions"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardOptions: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanKeyboardOption** Value);
    [id(0x00000010)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(A3426A95-4890-4A64-870F-CEE536E91EFE),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboards"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboards: IKeymanCollection
  {
    [id(0x00000005)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(FDD63849-ED59-4D5C-B690-994A83E044A2),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardsInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardsInstalled: IKeymanKeyboards
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanKeyboardInstalled** Value);
    [id(0x00000010)]
    HRESULT _stdcall GetKeyboardFromFile([in] BSTR Filename, [out, retval] IKeymanKeyboardFile** Keyboard);
    [id(0x00000011)]
    HRESULT _stdcall Install([in] BSTR Filename, [in] VARIANT_BOOL Force);
    [id(0x00000012)]
    HRESULT _stdcall Apply(void);
  };

  [
    uuid(F3AF4C40-182D-4CAE-9BE2-207E3A541CB9),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentKeyboards"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentKeyboards: IKeymanKeyboards
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanKeyboard** Value);
  };

  [
    uuid(124FDC59-6194-4232-B54A-F251372D9B81),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanLanguages"),
    dual,
    oleautomation
  ]
  interface IKeymanLanguages: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] long Index, [out, retval] IKeymanLanguage** Value);
    [id(0x00000005)]
    HRESULT _stdcall Apply(void);
  };

  [
    uuid(6F2CA8EE-FAD1-457D-AA9E-D14AA3321D0E),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanOptions"),
    dual,
    oleautomation
  ]
  interface IKeymanOptions: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanOption** Value);
    [id(0x00000010)]
    HRESULT _stdcall Apply(void);
    [id(0x00000011)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(81EA70FD-5A0E-46E6-9912-92ECF8098207),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFiles"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFiles: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanPackageContentFile** Value);
    [id(0x00000010)]
    HRESULT _stdcall IndexOf([in] BSTR Filename, [out, retval] long* Index);
  };

  [
    uuid(D87C29F1-0A84-4580-8408-E34F751FDDE0),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFonts"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFonts: IKeymanCollection
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanPackageContentFont** Value);
    [id(0x00000010)]
    HRESULT _stdcall IndexOf([in] BSTR Filename, [out, retval] long* Index);
  };

  [
    uuid(438799C8-F4A0-4838-9D54-17EF1A2FE6AD),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackages"),
    dual,
    oleautomation
  ]
  interface IKeymanPackages: IKeymanCollection
  {
  };

  [
    uuid(3FE3D351-3625-4550-94E9-05D225A4F450),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackagesInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanPackagesInstalled: IKeymanPackages
  {
    [propget, id(0x00000000), defaultcollelem]
    HRESULT _stdcall Items([in] VARIANT Index, [out, retval] IKeymanPackageInstalled** Value);
    [id(0x00000010)]
    HRESULT _stdcall GetPackageFromFile([in] BSTR Filename, [out, retval] IKeymanPackageFile** Package);
    [id(0x00000011)]
    HRESULT _stdcall Install([in] BSTR Filename, [in] VARIANT_BOOL AllUsers, [in] VARIANT_BOOL Force, [in] BSTR ShortcutRootPath);
    [id(0x00000012)]
    HRESULT _stdcall IndexOf([in] BSTR ID, [out, retval] long* Index);
  };

  [
    uuid(41D70310-3C7D-4A8E-9403-126342D2DD26),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanControl"),
    dual,
    oleautomation
  ]
  interface IKeymanControl: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ActiveKeyboardLanguage([out, retval] IKeymanKeyboardLanguageInstalled** Value);
    [propput, id(0x00000001)]
    HRESULT _stdcall ActiveKeyboardLanguage([in] IKeymanKeyboardLanguageInstalled* Value);

    [id(0x00000002)]
    HRESULT _stdcall IsConfigurationOpen([out, retval] VARIANT_BOOL* Value);
    [id(0x00000003)]
    HRESULT _stdcall IsKeymanRunning([out, retval] VARIANT_BOOL* Value);
    [id(0x00000004)]
    HRESULT _stdcall IsOnlineUpdateCheckOpen([out, retval] VARIANT_BOOL* Value);
    [id(0x00000005)]
    HRESULT _stdcall IsTextEditorOpen([out, retval] VARIANT_BOOL* Value);
    [id(0x00000006)]
    HRESULT _stdcall IsVisualKeyboardOpen([out, retval] VARIANT_BOOL* Value);

    [propget, id(0x00000007)]
    HRESULT _stdcall LastActiveWindow([out, retval] unsigned long* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall LastFocusWindow([out, retval] unsigned long* Value);

    [id(0x00000009)]
    HRESULT _stdcall OpenConfiguration(void);
    [id(0x0000000A)]
    HRESULT _stdcall OpenDiagnostics(void);
    [id(0x0000000B)]
    HRESULT _stdcall OpenHelp(void);
    [id(0x0000000C)]
    HRESULT _stdcall OpenTextEditor(void);
    [id(0x0000000D)]
    HRESULT _stdcall OpenUpdateCheck(void);

    [id(0x0000000E)]
    HRESULT _stdcall ShowKeyboardWelcome([in] IKeymanKeyboardInstalled* Keyboard);

    [id(0x0000000F)]
    HRESULT _stdcall StartKeyman(void);
    [id(0x00000010)]
    HRESULT _stdcall StartVisualKeyboard(void);
    [id(0x00000011)]
    HRESULT _stdcall StopKeyman(void);
    [id(0x00000012)]
    HRESULT _stdcall StopVisualKeyboard(void);
  };

  [
    uuid(0E4963E8-0A3B-4910-BE59-E6A869B34C43),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanError"),
    dual,
    oleautomation
  ]
  interface IKeymanError: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall ErrorCode([out, retval] long* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Severity([out, retval] long* Value);
  };

  [
    uuid(AE08C3B5-3376-4159-A330-C2C7129DCFAA),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanHotkey"),
    dual,
    oleautomation
  ]
  interface IKeymanHotkey: IKeymanObject
  {
    [id(0x00000001)]
    HRESULT _stdcall Delete(void);
    [propget, id(0x00000002)]
    HRESULT _stdcall Modifiers([out, retval] KeymanHotkeyModifiers* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall Modifiers([in] KeymanHotkeyModifiers Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall VirtualKey([out, retval] long* Value);
    [propput, id(0x00000003)]
    HRESULT _stdcall VirtualKey([in] long Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Target([out, retval] KeymanHotkeyTarget* Value);
    [propput, id(0x00000004)]
    HRESULT _stdcall Target([in] KeymanHotkeyTarget Value);
  };

  [
    uuid(A4E08956-64AB-41F5-950B-3073F38D32B2),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboard"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboard: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Bitmap([out, retval] IPicture** Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Copyright([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall DefaultBCP47Languages([out, retval] BSTR* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall DefaultPrimaryLanguage([out, retval] long* value);
    [propget, id(0x00000005)]
    HRESULT _stdcall DefaultWindowsLanguages([out, retval] BSTR* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall DefaultHotkey([out, retval] IKeymanHotkey** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall Encodings([out, retval] KeymanKeyboardEncodings* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall ID([out, retval] BSTR* Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall LayoutType([out, retval] KeymanKeyboardLayoutType* Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall Message([out, retval] BSTR* Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall Version([out, retval] BSTR* Value);
  };

  [
    uuid(0D773297-5EFA-40E9-B08A-813958DDCFE3),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardFile"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardFile: IKeymanKeyboard
  {
    [id(0x00000100)]
    HRESULT _stdcall Install([in] VARIANT_BOOL Force);
  };

  [
    uuid(2BA44E6E-C3EE-4ABE-B1EF-55FC386DDC1B),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardInstalled: IKeymanKeyboard
  {
    [propget, id(0x00000101)]
    HRESULT _stdcall IconFilename([out, retval] BSTR* Value);
    [id(0x000000102)]
    HRESULT _stdcall InstallVisualKeyboard([in] BSTR Filename);
    [propget, id(0x00000103)]
    HRESULT _stdcall KeymanID([out, retval] long* Value);
    [propget, id(0x00000104)]
    HRESULT _stdcall Languages([out, retval] IKeymanKeyboardLanguagesInstalled** Value);
    [propget, id(0x00000105)]
    HRESULT _stdcall Loaded([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000105)]
    HRESULT _stdcall Loaded([in] VARIANT_BOOL Value);
    [propget, id(0x00000106)]
    HRESULT _stdcall Options([out, retval] IKeymanKeyboardOptions** Value);
    [propget, id(0x00000107)]
    HRESULT _stdcall OwnerPackage([out, retval] IKeymanPackageInstalled** Value);
    [propget, id(0x00000108)]
    HRESULT _stdcall VisualKeyboard([out, retval] IKeymanVisualKeyboard** Value);
    [id(0x00000109)]
    HRESULT _stdcall Uninstall(void);
  };

  [
    uuid(023C9417-0776-484E-B0AB-23604E8800F5),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardLanguageInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardLanguageInstalled: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall BCP47Code([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Hotkey([out, retval] IKeymanHotkey** Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall LangID([out, retval] long* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ProfileGUID([out, retval] struct GUID* Value);
    [id(0x00000005)]
    HRESULT _stdcall Uninstall(void);
  };

  [
    uuid(48F62A42-0123-4D6C-B8DA-17D347516CB0),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanKeyboardOption"),
    dual,
    oleautomation
  ]
  interface IKeymanKeyboardOption: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Value([out, retval] BSTR* Value);
    [propput, id(0x00000002)]
    HRESULT _stdcall Value([in] BSTR Value);
  };

  [
    uuid(785DC47F-406F-48B0-90F7-E4670B92BCF4),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanLanguage"),
    dual,
    oleautomation
  ]
  interface IKeymanLanguage: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall HKL([out, retval] unsigned long* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Hotkey([out, retval] IKeymanHotkey** Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall IsIME([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall IsKeymanLayout([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall KeymanKeyboard([out, retval] IKeymanKeyboard** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall LayoutName([out, retval] BSTR* Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall LocaleName([out, retval] BSTR* Value);
  };

  [
    uuid(2AF26A27-C1F9-44DA-A628-B460676F3D6D),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanOption"),
    dual,
    oleautomation
  ]
  interface IKeymanOption: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall DefaultValue([out, retval] VARIANT* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Enabled([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Group([out, retval] BSTR* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall ID([out, retval] BSTR* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall OptionType([out, retval] KeymanOptionType* Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Value([out, retval] VARIANT_BOOL* Value);
    [propput, id(0x00000006)]
    HRESULT _stdcall Value([in] VARIANT_BOOL Value);
  };

  [
    uuid(A81A080C-F994-4EAE-A5C4-104C26195B3A),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackage"),
    dual,
    oleautomation
  ]
  interface IKeymanPackage: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Author([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall AuthorEmail([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Copyright([out, retval] BSTR* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000005)]
    HRESULT _stdcall Files([out, retval] IKeymanPackageContentFiles** Value);
    [propget, id(0x00000006)]
    HRESULT _stdcall Graphic([out, retval] IPicture** Value);
    [propget, id(0x00000007)]
    HRESULT _stdcall GraphicFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x00000008)]
    HRESULT _stdcall ID([out, retval] BSTR* Value);
    [propget, id(0x00000009)]
    HRESULT _stdcall Keyboards([out, retval] IKeymanPackageContentKeyboards** Value);
    [propget, id(0x0000000A)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
    [propget, id(0x0000000B)]
    HRESULT _stdcall ReadmeFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x0000000C)]
    HRESULT _stdcall Version([out, retval] BSTR* Value);
    [propget, id(0x0000000D)]
    HRESULT _stdcall WelcomeFile([out, retval] IKeymanPackageContentFile** Value);
    [propget, id(0x0000000E)]
    HRESULT _stdcall Website([out, retval] BSTR* Value);
  };

  [
    uuid(E9618611-8434-4072-B803-CAE188205D5B),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageFile"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageFile: IKeymanPackage
  {
    [id(0x00000100)]
    HRESULT _stdcall Install([in] VARIANT_BOOL Force);
  };

  [
    uuid(07C9D604-DB99-4E61-82CE-310604DC9E72),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageInstalled"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageInstalled: IKeymanPackage
  {
    [id(0x00000100)]
    HRESULT _stdcall Uninstall([in] VARIANT_BOOL RemoveFonts);
  };

  [
    uuid(4267EA59-CF06-4FED-B670-C9FBEAFEF77F),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFile"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFile: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Description([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall Stream([out, retval] IUnknown** Value);
  };

  [
    uuid(A9A8BD6A-FF85-4C5A-A8BF-536FB052AF95),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanPackageContentFont"),
    dual,
    oleautomation
  ]
  interface IKeymanPackageContentFont: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall Name([out, retval] BSTR* Value);
  };

  [
    uuid(48796430-160C-4B93-AB05-10D2548BF4D1),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanSystemInfo"),
    dual,
    oleautomation
  ]
  interface IKeymanSystemInfo: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall EngineInstallPath([out, retval] BSTR* Value);
    [propget, id(0x00000002)]
    HRESULT _stdcall EngineVersion([out, retval] BSTR* Value);
    [propget, id(0x00000003)]
    HRESULT _stdcall IsAdministrator([out, retval] VARIANT_BOOL* Value);
    [propget, id(0x00000004)]
    HRESULT _stdcall RebootRequired([out, retval] VARIANT_BOOL* Value);
    [id(0x00000005)]
    HRESULT _stdcall SetReboot(void);
  };

  [
    uuid(F8289232-DD0F-4261-BBF3-C72484E61E33),
    version(10.0),
    helpstring("http://help.keyman.com/developer/engine/desktop/10.0/api/IKeymanVisualKeyboard"),
    dual,
    oleautomation
  ]
  interface IKeymanVisualKeyboard: IKeymanObject
  {
    [propget, id(0x00000001)]
    HRESULT _stdcall Filename([out, retval] BSTR* Value);
    [id(0x00000002)]
    HRESULT _stdcall Uninstall(void);
  };

  [
    uuid(7D8879C6-D830-4796-8021-7B6FF69558E4),
    version(10.0),
  ]
  coclass Keyman
  {
    [default] interface IKeyman;
  };
};
