##Package: TimeFramework
##Status: Completed (peter3)
----------------------------------------------------------------------------------------------------
@@JVCL.Info.TimeFramework.BatchLoading
<GROUP JVCL.Info.TimeFramework>
<TITLE Batch Loading in the JVCL Time Framework>
  In order to allow more efficient data retrieval TJvTFScheduleManager offers batch
  loading features.

  The TJvTFScheduleManager.SchedLoadMode property controls the manner in which
  schedules are loaded into TJvTFScheduleManager. If this property is set to slmOnDemand,
  TJvTFScheduleManager will fire the OnNeedAppts event for each schedule that needs
  to be loaded. This is the original manner which TJvTFScheduleManager used and if
  SchedLoadMode is set to slmOnDemand, TJvTFScheduleManager will operate exactly as
  it has in the past.

  If the SchedLoadMode property is set to slmBatch, a different set of events is fired
  at different times which will allow you to optimize your data retrieval. When using
  slmBatch, all requests for schedules that are not currently loaded are batched and the
  loading of those schedules is deferred until a call to ProcessBatches is made.

  Note that under normal circumstances, you do not have to call ProcessBatches as the
  individual JvTFComponents/JvTFControls will handle that automatically for you.

  Once a call to ProcessBatches is made, TJvTFScheduleManager examines all of the
  schedules that have been batched and groups those schedules into one or more batches.
  The grouping is made first by the TJvTFSched.SchedName property and then by contiguous
  dates. Imagine the following schedules:

    1. Mike - 1/1/2000
    2. Mike - 1/2/2000
    3. Mike - 1/3/2000
    4. Mike - 1/4/2000
    5. John - 1/1/2000
    6. John - 1/2/2000
    7. John - 1/3/2000
    8. Mike - 1/15/2000
    9. Bob - 1/15/2000

  TJvTFScheduleManager would group the above schedules into four seperate batches:

    1. Mike - start 1/1/2000 - end 1/4/2000
    2. John - start 1/1/2000 - end 1/3/2000
    3. Mike - start 1/15/2000 - end 1/15/2000
    4. Bob - start 1/15/2000 - end 1/15/2000

  For each batch, the OnLoadBatch event will fire, allowing you to retrieve the necessary data for the batch. After all
  the batches have been loaded the OnBatchesProcessed event will fire. Under slmOnDemand, you would need to execute nine
  seperate retrievals. Using slmBatch and the placing your data retrieval code in OnLoadBatch you can reduce the number
  of retrievals to four.

  Note that if SchedLoadMode is set to slmBatch, the OnNeedAppts event will NOT fire. If SchedLoadMode is set to slmOnDemand,
  the OnLoadBatch and OnBatchesProcessed events will NOT fire unless a direct call is made to ProcessBatches.

  Taking Batch Loading one step further, you could use the OnLoadBatch event to dynamically build an SQL query such that
  each time the OnLoadBatch event fires it would add a new line to one, all encompassing SQL query. Then you could execute
  the query in the OnBatchesProcessed event. This would give you the ability to retrieve all the data necessary for a given
  operartion in ONE retrieval. Note that loading is NOT limited to SQL. You can use whatever method you need to use.

  If you are manually loading schedules you can use Batch Loading by setting SchedLoadMode to slmBatch, request the schedules
  as you do now, and then call ProcessBatches to fire the batch events.
----------------------------------------------------------------------------------------------------
