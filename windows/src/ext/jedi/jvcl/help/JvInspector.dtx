##Package: RuntimeDesign
##Status: Completed,Locked
----------------------------------------------------------------------------------------------------
@@JvInspector.pas
Summary
    Contains a data inspector.
Author
    Marcel Bestebroer
----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.AddMethod@TObject@Pointer@string
<COMBINE TJvInspectorTMethodItem.AddMethod@TMethod@string>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.AddMethod@TMethod@string
Summary
  Adds an event handler to the list of event handlers.
Description
  AddMethod adds an event handler to the list of event handlers, providing it with a name. Before you
  can add any method you should first add the instance to which the method belongs, using AddInstance.
  
  There are two overloaded versions of this method. One provides you with a way to add a method
  pointer directly (a TMethod) while the other provides you with a way to specify the instance and
  the address of the handler. Both allow to set the name of the handler.
Parameters
  Method     - Method pointer to add. The method pointer provides a Data address (the instance) and a
                Code address (the address of the handler).
  MethodName - Name of the method. AddMethod will not try to obtain the method name by calling
                MethodName on the instance using the provided handler address. You may do that
  yourself
                in the call to this method.
  Instance   - Instance to which the handler should be added.
  MethodAddr - Address of the handler to add.
See Also
  TJvInspectorTMethodItem.DeleteMethod, TJvInspectorTMethodItem.ClearMethods,
  TJvInspectorTMethodItem.IndexOfMethod

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.AddInstance
Summary
  Adds an event instance to the instance list.
Description
  AddInstance adds an event instance to the list of instances, providing it with a name. Before you
  can
  add any method you should add and name the instance to which the method belongs. After you have
  added the instance you can add methods to the instance using any one of the AddMethod methods.
Parameters
  Instance     - TObject instance to add.
  InstanceName - Name of the instance. AddInstance will not check if the specified object is a
                  TComponent (or descendant) to retrieve the name. You should do so yourself in the
                  call to this method.
See Also
  TJvInspectorTMethodItem.AddMethod, TJvInspectorTMethodItem.DeleteInstance,
  TJvInspectorTMethodItem.IndexOfInstance

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem
Summary
  Event (TMethod) item.
Description
  TJvInspectorTMethodItem is an inspector item that allows editing of event types. The item provides
  methods to specify the list of allowed event handlers and instances. You are not limited to
  published methods, you can provide any accessible method, even protected methods if you use the
  class cracking technique.
  
  In addition the item provides properties that control the way the events are displayed. You can
  specify to show no instance names, all instance names or all but the first instance names. You can
  also specify the order of the event handlers.
  
  * To specify that instance names are to be shown, set the ShowInstanceNames property to True.
  * To specify that the first instance name should <B>not</B> be shown, set NoShowFirstInstanceName to
  True in addition to setting ShowInstanceNames to True.
  * To specify that the event list should be sorted by instance, set SortInstances to True.
  * To specify that the events of the first instance should show first regardless of any sorting, set
  KeepFirstInstanceAsFirst to True.
  * To specify that the event list should be sorted by method name, set SortMethods to True.
  * Use AddInstance to add to a handler instance (such as forms and data modules).
  * Use AddMethod to add a handler to an instance.
  * Optionally in addition to or instead of the above AddInstance/AddMethod, assign an <LINK
  TJvCustomInspectorItem.OnGetValueList, OnGetValueList> event handler to provide additionally
  selectable handlers.
  
  TJvCustomInspectorData registers this item for the TMethod (event) type.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTimeItem
Summary
  TTime inspector item.
Description
  TJvInspectorTimeItem is an inspector item that allows TTime values to be edited through a simple
  editor.
  
  TJvCustomInspectorData registers this item for TTime types.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTimeItem.Format
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorTimeItem.ShowAMPM
Summary
  Determines if the editor shows AM/PM.
Description
  ShowAMPM determines if the editor will show AM/PM or use the 24-hour notation.
  
  Set ShowAMPM to True to allow the editor to display a 12-hour clock and append the AM or PM suffix.
  
  Set ShowAMPM to False to allow the editor to display a 24-hour clock.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTimeItem.ShowSeconds
Summary
  Determines if the editor shows seconds.
Description
  ShowSeconds determines if the editor will show seconds.
  
  Set ShowSeconds to True to allow the editor to display the seconds.
  
  Set ShowSeconds to False to hide the seconds from the editor.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTCaptionRegItem
Summary
  Registration item for the TCaption type.
Description
  TJvInspectorTCaptionRegItem is the registration item that specifically matches TCaption types. For
  these types, ApplyDefaults will set the item's iifMultiLine flag.

----------------------------------------------------------------------------------------------------
@@TJvInspectorStyle.isBorland
Description for isBorland

----------------------------------------------------------------------------------------------------
@@TJvInspectorStyle.isDotNet
Description for isDotNet

----------------------------------------------------------------------------------------------------
@@TJvInspectorStyle.isItemPainter
Description for isItemPainter

----------------------------------------------------------------------------------------------------
@@TJvInspectorStringItem
Summary
  String inspector item.
Description
  TJvInspectorStringItem is an inspector item that allows string values to be edited.
  
  TJvCustomInspectorData registers this item for all string types (ie. ShortString, AnsiString (=long
  strings) and WideString).

----------------------------------------------------------------------------------------------------
@@TJvInspectorStyle
<TITLE TJvInspectorStyle type>
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetMemberData.BitOffset
Summary
  Bit offset in the set for this member.
Description
  BitOffset holds the bit offset within the set value for this particular member. This value is
  calculated upon creation of the member data layer.

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetMemberData.DataParent
Summary
  References the data object of the parent item.
Description
  DataParent references the data object of the parent item. This will always be the data object
  representing the entire set value.

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetMemberData.New@TJvCustomInspectorItem@Integer@TJvCustomInspectorData
Summary
  Instantiate a data instance and attaches an item to it.
Description
  New instantiates a new data instance with the given parameters. If the data referred to by the
  given parameters already exists, the item will be attached to that data instance, instead of
  creating a new data instance.
  
  TJvInspectorSetMemberData implements New to allow you to give both the ordinal value as well as a
  reference to the data instance that references the set.
Parameters
  AParent     - The parent to which this data should be added.
  Ordinal     - The ordinal value of the member that is to be inspected.
  ADataParent - A reference to the parent data instance. Since a set member belongs to a set that is 
                referenced by another data instance, this data instance should be handed over to this
               instance.

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetMemberData
Summary
  Data layer for specific set item.
Description
  TJvInspectorSetMemberData is the data layer that obtains its data from a single bit of the set
  value of its parent item. It's used internally by the set item (TJvInspectorSetItem) when the
  CreateMemberItems property is True.
  
  Only the AsOrdinal access property is implemented, while the TypeInfo property is ignored but
  initialized to TypeInfo(Boolean).

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem.ItemSetFlags
Summary
  Set item flags.
Description
  ItemSetFlags are the flags specific to the set inspector item. The flags determine if the string
  value can be edited and/or is sub items are created for the individual items.
See Also
  TJvInspectorSetItem.CreateMemberItems, TJvInspectorSetItem.EditString,
  TJvInspectorSetItem.RenderAsCategory

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem.RenderAsCategory
Summary
  Controls whether the item should be treated as a category item.
Description
  RenderAsCategory determines if the item should be treated as a category item. When set to True the
  item is treated as a category item, otherwise it's a normal item with a name and value sections.
  
  If RenderAsCategory is True, the item will not have a value section. As such, the isfEditString
  flag/EditString property have no purpose and are ignored. In addition all set members will be
  created as boolean type sub items automatically, regardless whether the isfCreateMemberItems flag
  is specified or the CreateMemberItems property is set to True.
  
  RenderAsCategory maps to the isfRenderAsCategory in the ItemSetFlags property.
See Also
  TJvInspectorSetItem.CreateMemberItems, TJvInspectorSetItem.EditString,
  TJvInspectorSetItem.ItemSetFlags

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem.IsCategory
Summary
  Determines if the item represents a category item.
Description
  IsCategory determines if the item represents a category item.
  
  If the item represents a category the method will return True, otherwise False is returned.
  
  \TJvInspectorSetItem implements this method to always return True if the isfRenderAsCategory flag
  has been specified in the ItemSetFlags property.
See Also
  TJvInspectorSetItem.RenderAsCategory

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem.EditString
Summary
  Controls whether the string value can be edited.
Description
  EditString determines if the item can be edited by typing its value as a string. When set to True,
  the string value can be edited directly, otherwise the string value can not be edited.
  
  If EditString is True, a set value can be specified by using individual members separated by
  commas, using member ranges using ".." or a combination. The brackets are optional, but if you
  specify one you need to specify both.
  
  EditString maps to the isfEditString in the ItemSetFlags property.
See Also
  TJvInspectorSetItem.CreateMemberItems, TJvInspectorSetItem.ItemSetFlags,
  TJvInspectorSetItem.RenderAsCategory

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem.CreateMembers
Summary
  Creates the set members as child items.
Description
  CreateMembers will create all set members of the set it represents as child items. CreateMembers
  will be called from InvalidateMetaData if either the CreateMemberItems or RenderAsCategory property
  is set to True.
See Also
  TJvCustomInspectorItem.InvalidateMetaData, TJvInspectorSetItem.CreateMemberItems,
  TJvInspectorSetItem.DeleteMembers, TJvInspectorSetItem.RenderAsCategory

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem.DeleteMembers
Summary
  Deletes the child items that represent set members.
Description
  DeleteMembers will delete all sub items that are members of a set. DeleteMembers will be called from
  CreateMembers to refresh the member list.
See Also
  TJvInspectorSetItem.CreateMembers

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem.CreateMemberItems
Summary
  Controls the creation of items for set members.
Description
  CreateMemberItems determines if child items are created for the individual set members. When
  CreateMemberItems is set to True a Boolean sub item is generated for each member of the set.
  
  CreateMemberItems maps to the isfCreateMemberItems in the ItemSetFlags property.
See Also
  TJvInspectorSetItem.EditString, TJvInspectorSetItem.ItemSetFlags,
  TJvInspectorSetItem.RenderAsCategory

----------------------------------------------------------------------------------------------------
@@TJvInspectorSetItem
Summary
  Set inspector item.
Description
  TJvInspectorSetItem is an inspector item that allows set values to be edited. This can be done
  either by typing the set value as a string and/or by changing the Boolean value of the members.
  
  TJvInspectorSetItem provides extra flags to control the exact behavior (editing the string value
  and/or creating member items).
  
  TJvCustomInspectorData registers this item for all set types.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.IndexOf@TJvInspectorItemClass
<COMBINE TJvInspectorRegister.IndexOf@TJvCustomInspectorRegItem>

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Items
Summary
  Reference to the registration items in the database.
Description
  Items is the array of items in the registration database.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.IndexOf@TJvCustomInspectorRegItem
Summary
  Write here a summary (1 line)
Description
  This is an overloaded function/procedure, if possible you may combine the description of all these
  functions into 1 general description. If you do so, combine all "Parameter" lists into 1 list, and
  leave the "Summary", "Description" etc. fields empty for all other overloaded functions with the
  same name.
Parameters
  RegItem   - Description for this parameter
  ItemClass - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Delete@Integer
Summary
  Removes a registration item from the database.
Description
  Delete removes a registration item from the registration database.
Parameters
  RegItem   - Registration item to remove.
  ItemClass - Description for this parameter
  Index     - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Delete@TJvCustomInspectorRegItem
<COMBINE TJvInspectorRegister.Delete@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Delete@TJvInspectorItemClass
<COMBINE TJvInspectorRegister.Delete@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Destroy
Summary
  Disposes of the registration database.
Description
  Destroy clears the registration database and then destroys it.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.FindMatch
Summary
  Finds a match for the given data instance
Description
  FindMatch tries to find a match for the given data instance. It will start in its own database from
  the last added item back to the first added item. If no perfect match is found, it will try to
  locate a registration database in one of the parent data classes and will delegate the search to
  that database if found. The result will be either <B>nil</B> if no match was found or the
  registration item that matched best.
Parameters
  ADataObj - Data layer instance to find a match for.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.DataClass
Summary
  Data class the database is for
Description
  DataClass indicates for which data layer class the registration database is. This is used in
  FindMatch to search for other registration databases up the data layer hierarchy.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Create
Summary
  Instantiates a registration database.
Description
  Create instantiates a new registration database for a specific data class.
Parameters
  ADataClass - The data class for which the registration database is instantiated.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Compare
Summary
  Compares two registration items.
Description
  Compare compares two registration items using a data instance to obtain a match value. If Item1 is
  a better match, Item1 match value will be returned (always positive), otherwise Item2 match value
  will
  be returned as a negative value. In other words: A positive result: Item1 is the winner, a negative
  result: Item2 is the winner.
Parameters
  ADataObj - Data layer instance use for comparison
  Item1    - First item to be compared.
  Item2    - Second item to be be compared.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Count
Summary
  Number of items in the database
Description
  Count indicates the number of registration items in the database.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister.Add
Summary
  Adds a registration item to the database.
Description
  Add adds a registration item to the registration database.
Parameters
  RegItem - Registration item to add.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.ObjectClass
Summary
  The object's class
Description
  ObjectClass holds the class the instance for the property should be. If ObjectClass is <B>nil</B>,
  it will not be considered in the match value.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.TypeInfo
Summary
  The property's type info.
Description
  TypeInfo holds the type info that's used while matching. If TypeInfo is <B>nil</B>, it will not be
  considered in the match value.

----------------------------------------------------------------------------------------------------
@@TJvInspectorRegister
Summary
  Inspector item registration database.
Description
  TJvInspectorRegister is the item registration database. It provides a list of registration items
  which can searched for a match based on a data instance.
  
  Each data layer can have its own registration database (but is not required to). Whenever a data
  instance gets created the following steps will occur:
  
  * Calls the inspectors' AfterDataCreate event
  * Locates the first available registration database. Because all data layers ultimately inherit from
  TJvCustomInspectorData, a database will always be found.
  * The registration database is searched for a match. The search is started with the last added item.
  If either no match or no perfect match has been found, the search is continued in the registration
  database of one of its parent classes, until no parent registration database is found or until a
  perfect match is located. In the end the best match result is returned.
  * The inspectors' BeforeItemCreate event is called
  * If a valid item class has been found, the item is created and the AfterItemCreate event is called.
  In addition, the registration items' ApplyDefaults method is called for the newly created item.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.Name
Summary
  The property name.
Description
  Name holds the property name that's used while matching. If Name is empty, it will not be
  considered in the match value.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it should use if this
  item matches a data instance.
Parameters
  AItemClass   - Inspector item class to assign to the registration item.
  AObjectClass - The class the property belongs to
  AName        - The name of the property.
  ATypeInfo    - The type info of the property.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.New@TJvCustomInspectorItem@TObject@string
<COMBINE TJvInspectorPropData.New@TJvCustomInspectorItem@TObject@PPropInfo>

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.New@TJvCustomInspectorItem@TObject@TTypeKinds
<COMBINE TJvInspectorPropData.New@TJvCustomInspectorItem@TObject@PPropInfo>

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.NewByNames
Summary
  Instantiate one or more data instances and attaches (an) item(s) to it.
Description
  NewByNames instantiates one or more new data instance with the given parameters. If the data
  referred to by the given parameters already exists, the item will be attached to that data
  instance, instead of creating a new data instance.
  
  It is possible that with some parameter values no items are generated, which will result in an
  empty dynamic array.
Parameters
  AParent     - The parent to which this data should be added.
  AInstance   - TObject instance that provides the property values.
  NameList    - List of property names (case insensitive). The ExludeList parameter determines if
  this                is a list of properties to allow or disallow.
  ExcludeList - When set to True, NameList is a list of properties to ignore. Otherwise, NameList is 
                the list of properties to add.
  TypeKinds   - Type of properties to add.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.Prop
Summary
  Holds the pointer to the property info.
Description
  Prop is the pointer to the TPropInfo that holds the property's info. Read Prop to find out which
  property is providing the value or set Prop to a new PPropInfo.
See Also
  TJvInspectorPropData.Instance

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.TypeInfoMapRegister
Summary
  Write here a summary (1 line)
Description
  Write here a description
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropRegItem
Summary
  Registration item for the property data layer
Description
  TJvInspectorPropRegItem is a registration item that bases its matching value on the kind of type it
  represents and the type info in the data object.
  
  The match value is determined by adding one or more values as follows:
  <TABLE>
  Situation                   Value
  --------------------------  --------
  <B>ClassType known</B>
  class type equal            add 32
  class type inherits         add 16
  class does not match        return 0
  <B>\Name known</B>
  \Name exact match           add 8
  \Name matches by mask       add 4
  \Name does not match        return 0
  <B>Type info known</B>
  Type info exact match       add 2
  Type info typekind matches  add 1
  Type info does not match    return 0 </TABLE>
  
  The percentage will be calculated based on these rules:
  <TABLE>
  Situation                     Value
  ----------------------------  ----------------
  Initial                       100
  ClassType unknown             decrease with 10
  ClassType known but inherits  divide by 2
  \Name unknown                 decrease with 5
  \Name matches by mask         divide by 2
  Type info unknown             decrease by 10
  Type info typekind matches    divide by 2 </TABLE>
  
  When the match value = 0, the percentage will off course also be 0.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.New@TJvCustomInspectorItem@TObject@PPropList@Integer
<COMBINE TJvInspectorPropData.New@TJvCustomInspectorItem@TObject@PPropInfo>

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.New@TJvCustomInspectorItem@TObject@PPropInfo
Summary
  Instantiate a data instance and attaches an item to it.
Description
  New instantiates a new data instance with the given parameters. If the data referred to by the
  given parameters already exists, the item will be attached to that data instance, instead of
  creating a new data instance.
  
  TJvInspectorPropData implements New to allow various ways of adding properties:
  
  * Specifying a parent, an instance and property info record (PPropInfo) to add a single property.
  * Specifying a parent, an instance and a list of property info records (PPropList) to add multiple 
   properties at a time. For each property a new item is generated, which is returned in the dynamic
    array.
  * Specifying a parent, an instance and property type(s) to add all properties of (a) certain
  type(s)   at once. For each property a new item is generated, which is returned in the dynamic
  array.
  
  If you want to specify a list of names to include or exclude, use the NewByNames method.
  
  It is possible that with some parameters no items are generated, which will result in an empty
  dynamic array.
Parameters
  AParent   - The parent to which this data should be added.
  AInstance - TObject instance that provides the property values.
  PropInfo  - Property Info record, obtained by a call to GetPropInfo.
  TypeKinds - Type of properties to add.
  PropInfos - Pointer to a property list. Such a list can be obtained by calling GetPropList.
  PropCount - Number of properties in the list at PropInfos.
  PropName  - Description for this parameter
See Also
  TJvInspectorPropData.NewByNames

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.Instance
Summary
  Holds the property's instance.
Description
  Instance is a reference to the instance that provides the property values. Read instance to find
  out which object is providing the values or set Instance to new object.
See Also
  TJvInspectorPropData.Prop

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData.AddTypeMapping
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Target       - Description for this parameter
  Source       - Description for this parameter
  ObjectClass  - Description for this parameter
  PropertyName - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorPropData
Summary
  Property data layer.
Description
  TJvInspectorPropData is the inspector data layer that obtains its data from a published property of
  an instance. The class implements all access properties, but the type info will be used to check
  the legality of the access (ie. a float can't be accessed as Int64). <B>Note:</B> you can change
  the type info pointer of the data layer instance. This can be useful to provide alternative
  enumeration constants (including names with spaces) by using the JclRTTI unit and its
  JclGenerateEnumType function.
  
  The data layer provides its own item registration database.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.TeardownItem
Summary
  Finalizes item rendering
Description
  TeardownItem finalizes the item rendering process. The PaintRect will be adjusted in such a way
  that is starts just below the item just painted.
  
  Descendants can override this method to do additional finalization if needed.
See Also
  TJvInspectorPainter.SetupItem

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.ValueFont
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references ##@@TJvInspectorPainter.ValueColor
  ##Summary
  ##  Font color for item values.
  ##Description
  ##  ValueColor indicates the font color used to render an item's value. Read ValueColor to find out
  which
  ##  font color is used to render an item's value, or set it to another value to change it.
  ##See Also
  ##  TJvInspectorPainter.NameColor

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainterClass
<TITLE TJvInspectorPainterClass type>
Summary
  Painter class reference
Description
  TJvInspectorPainterClass is the painter class reference.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.SetupRects
Summary
  Initializes item rectangles.
Description
  SetupRects initializes the items rectangles to their proper values. It will set the item's iprItem
  rectangle to the paint rectangle, setting the bottom value to PaintItem.Top + <LINK
  TJvCustomInspectorItem.Height, Item.Height>.
  
  Descendants should override this method to initialize the other rectangles.
See Also
  TJvInspectorPainter.PaintItem

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.SetupItem
Summary
  Initializes item painting.
Description
  SetupItem will initialize the painter to render the specified item. On entry to this method, either
  Item or ItemIndex has been set by the PaintItem method. Depending on which is set the following
  actions will be taken:
  
  * If ItemIndex is set, the corresponding item will be retrieved and stored in the Item property.
  * If an item is available, the ButtonImage will be set to either <B>nil</B>, the bitmap returned by
    GetCollapseImage or the bitmap returned by GetExpandImage.
  * If an item index was specified, SetupRects is called to calculate the item rectangles.
  
  Descendants can override this method to do additional initialization if needed.
See Also
  TJvInspectorPainter.PaintItem

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Setup
Summary
  Initializes the painter.
Description
  Setup initializes the painter to use the specified canvas and initializes the Canvas.Brush.Color to
  the BackgroundColor.
  
  Setup is called by the <LINK TJvCustomInspector.Paint, Inspector.Paint> method before it issues the
  paint request.
  
  Descendants can override this method to do additional initialization if needed.
Parameters
  ACanvas - Description for this parameter
See Also
  TJvCustomInspector.Paint, TJvInspectorPainter.BackgroundColor, TJvInspectorPainter.Canvas

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.SetInspector
Summary
  Attach the painter to an inspector.
Description
  SetInspector attaches the painter to the specified inspector. If the inspector's Painter property
  is not set to this painter, an exception will be raised.
Parameters
  AInspector - Description for this parameter
See Also
  TJvCustomInspector.Painter

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.SelectedFont
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references
  
  ##@@TJvInspectorPainter.SelectedTextColor
  ##Summary
  ##  Font color for selected items.
  ##Description
  ##  SelectedTextColor indicates the font color for selected items. Read SelectedTextColor to find
  out
  ##  which color is used for the font when an item is selected or set it to another value to change
  it.
  ##See Also
  ##  TJvInspectorPainter.SelectedColor

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.SelectedColor
Summary
  Background color for selected items.
Description
  SelectedColor indicates the background color for selected items. Read SelectedColor to find out
  which color is used as a background when an item is selected or set it to another value to change
  it.
  ##See Also
  ##  TJvInspectorPainter.SelectedTextColor

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Rects
Summary
  Reference to the item rectangles.
Description
  Rects is a reference to the current <LINK TJvCustomInspectorItem.Rects, item's Rects> property. If
  there is no current item, setting a rectangle does nothing, while reading will return an empty
  rectangle.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.PaintRect
Summary
  Rectangle available to paint the item in.
Description
  PaintRect is the rectangle available to the item. SetupRects will use this rectangle to calculate
  the item's rectangle and TeardownItem will modify this rectangle to exclude to last rendered item.
  
  The Paint method will initialize PaintRect to the <LINK TJvCustomInspector.ViewRect, inspector's
  ViewRect>.
See Also
  TJvInspectorPainter.Paint

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.PaintItem@TRect@Integer
<COMBINE TJvInspectorPainter.PaintItem@TJvCustomInspectorItem>

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.PaintItem@TJvCustomInspectorItem
Summary
  Renders an item.
Description
  PaintItem handles a request to render an item. The actual rendering will be done by the DoPaint
  method. PaintItem will setup the paint information before calling DoPaint and cleans up when
  DoPaint returns.
  
  PaintItem has two overloaded methods. The first method accepts a rectangle and an item index and
  will
  paint the specified item inside the rectangle, returning the rectangle not used.
  
  The second method will accept an item instance and will render it at the position it was last
  rendered in.
Parameters
  ARect      - Available rectangle for the item. On exit, this parameter will hold the rectangle     
           available after the item was rendered.
  AItemIndex - Index into the <LINK TJvCustomInspector.VisibleItems, Inspector.VisibleItems> array of
                the item to be rendered.
  AItem      - Item instance to be rendered.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.PaintDivider
Summary
  Renders the name/value column divider bar at arbitrary positions.
Description
  PaintDivider is called whenever the name/value column divider bar needs to be rendered. Because
  this divider bar is also used to divide columns in compound items, the PaintDivider method can
  paint the
  divider at any location.
  
  The base implementation does nothing. Descendants should override this method to paint the divider
  bar.
Parameters
  X       - X-position of the bar.
  YTop    - Top of the divider bar.
  YBottom - Bottom of the divider bar.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Paint
Summary
  Renders the inspector items.
Description
  Paint is the main rendering method. It will fill the <LINK TJvCustomInspector.ViewRect,
  Inspector.ViewRect> rectangle with the BackgroundColor, loop through currently visible items
  (calling
  PaintItem for each of them) and optionally hide the editor if the selected item is no longer being
  displayed.
  
  Paint assumes the background color has been set prior to calling Paint.
See Also
  TJvInspectorPainter.PaintItem

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.InternalExpandButton
Summary
  Holds the internally created expand button.
Description
  InternalExpandButton is the internally created expand button bitmap. Use this bitmap if you need to
  change the standard expand button image.
See Also
  TJvInspectorPainter.GetExpandImage, TJvInspectorPainter.InternalCollapseButton

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Item
Summary
  Reference to the current item.
Description
  Item holds a reference to the item currently being painted.
See Also
  TJvInspectorPainter.PaintItem

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.ItemIndex
Summary
  The index of the current item.
Description
  ItemIndex holds the index into the <LINK TJvCustomInspector.VisibleItems, Inspector.VisibleItems>
  array of the item currently painted. If ItemIndex < 0, an item reference was supplied to the
  PaintItem method.
See Also
  TJvInspectorPainter.PaintItem

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Loading
Summary
  Determines if the component is being loaded.
Description
  Loading returns True if the painter is being loaded. Loading is a short hand notation for csLoading
  <B>in</B> ComponentState.
  
  Loading is used in the set methods of the color properties to avoid calls to Inspector.Invalidate.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.NameFont
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references
  
  ##@@TJvInspectorPainter.NameColor
  ##Summary
  ##  Font color for item names.
  ##Description
  ##  NameColor indicates the font color used to render an item's name in (unless the item is either
  ##  selected or a category, in which case SelectedTextColor or CategoryTextColor will be used
  ##  respectively). Read NameColor to find out which font color is used to render an item's name, or
  set
  ##  it to another value to change it.
  ##See Also
  ##  TJvInspectorPainter.CategoryTextColor, TJvInspectorPainter.SelectedTextColor,
  ##  TJvInspectorPainter.ValueColor

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.InternalCollapseButton
Summary
  Holds the internally created collapse button.
Description
  InternalCollapseButton is the internally created collapse button bitmap. Use this bitmap if you
  need to change the standard collapse button image.
See Also
  TJvInspectorPainter.GetCollapseImage, TJvInspectorPainter.InternalExpandButton

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Inspector
Summary
  Reference to the inspector.
Description
  Inspector holds a reference to the inspector that currently uses this painter.
See Also
  TJvInspectorPainter.SetInspector

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Initializing
Summary
  Flag to indicate the painter is still initializing
Description
  Initializing indicates if the painter is still in the process of initializing itself. The Create
  constructor will set Initializing to True right before InitializeColors is called. Right after
  InitializeColors returns, Initializing is reset to False.
  
  Initializing is used in setter methods for the color properties to avoid calls to the <LINK
  TJvCustomInspector.InvalidateItem, Inspector.InvalidateItem> method during initialization.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.GetNameHeight
Summary
  Returns the height of the name font.
Description
  GetNameHeight will apply the name font and determine the TextHeight of 'Wy'. This result will be
  returned and the canvas is restored to its original state.
Parameters
  AItem - Description for this parameter
See Also
  TJvInspectorPainter.ApplyNameFont, TJvInspectorPainter.GetValueHeight

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.GetValueHeight
Summary
  Returns the height of the value font.
Description
  GetValueHeight will apply the value font and determine the TextHeight of 'Wy'. This result will be
  returned and the canvas is restored to its original state.
Parameters
  AItem - Description for this parameter
See Also
  TJvInspectorPainter.ApplyValueFont, TJvInspectorPainter.GetNameHeight

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.HideEditor
Summary
  Hides the editor.
Description
  Hide editor will hide the edit control and/or the value list box for the selected item. It does so
  by setting the item's iprEditValue rectangle to an empty rectangle.
See Also
  TJvCustomInspector.Selected

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.HideSelectColor
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.HideSelectFont
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.InitializeColors
Summary
  Sets the color properties to their defaults.
Description
  InitializeColors presets the color properties to the defaults of the class, according to the RTTI
  info.
  
  The base implementation presets the following properties:
  
  * BackgroundColor
  * DividerColor
  * NameFont
  * ValueFont
  * CategoryColor
  * CategoryFont
  * SelectedColor
  * SelectedFont
  
  Descendants can override this method to preset additional properties.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.DoPaint
Summary
  Renders the current item.
Description
  DoPaint renders the item that has just been setup. The Item property indicates the item to render
  while Rects hold the various calculated rectangles. ButtonImage will hold the image of the
  collapse/expand button if one is needed, or it is set to <B>nil</B> if no button is to be drawn. Use
  ApplyNameFont/ApplyValueFont to activate the font to render the name/value and use PaintDivider to
  render the divider bar.
  
  The base implementation does nothing. Descendants should override this method to do the actual
  painting.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.DrawNameEndEllipsis
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.GetCollapseImage
Summary
  Retrieves the image for a collapse button.
Description
  GetCollapseImage retrieves an image to use as a collapse button. If no bitmap has been assigned to
  the <LINK TJvCustomInspector.CollapseButton, Inspector.CollapseButton>, the internal image will be
  returned, otherwise the assigned bitmap will be returned.
See Also
  TJvCustomInspector.CollapseButton, TJvInspectorPainter.ButtonImage,
  TJvInspectorPainter.GetExpandImage

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.GetExpandImage
Summary
  Retrieves the image for an expand button.
Description
  GetExpandImage retrieves an image to use as an expand button. If no bitmap has been assigned to the
  <LINK TJvCustomInspector.ExpandButton, Inspector.ExpandButton>, the internal image will be
  returned, otherwise the assigned bitmap will be returned.
See Also
  TJvCustomInspector.ExpandButton, TJvInspectorPainter.ButtonImage,
  TJvInspectorPainter.GetCollapseImage

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.DividerWidth
Summary
  Returns the width of the divider bar
Description
  DividerWidth returns the width of the bar dividing the name and value column.
  
  The base implementation returns 1. Descendants can override this method to return another value.
See Also
  TJvInspectorPainter.PaintDivider

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Destroy
Summary
  Disposes of the painter.
Description
  Destroy will dispose of the painter object, freeing the internal bitmaps.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.DividerColor
Summary
  Pen color of the divider bar.
Description
  DividerColor indicates the pen color used to render the divider bar. Read DividerColor to find out
  which color is used to render the divider bar or set it to another value to change it.
See Also
  TJvCustomInspector.Divider

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Create
Summary
  Instantiates the painter.
Description
  Create instantiates a new painter object and assigns an inspector to it. In addition, the bitmaps
  for the collapse and expand buttons are generated. Descendants could therefor generate other button
  images if so desired.
  
  The inspector assigned to this painter will not use it until the Painter property of the inspector
  is set to this instance.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.CategoryFont
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references
  
  ##@@TJvInspectorPainter.CategoryTextColor
  ##Summary
  ##  Font color for selected items.
  ##Description
  ##  CategoryTextColor indicates the font color for category items. Read CategoryTextColor to find
  out
  ##  which color is used for the font when rendering a category item or set it to another value to
  change
  ##  it.
  ##See Also
  ##  TJvInspectorCustomCategoryItem, TJvInspectorPainter.CategoryColor

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.Canvas
Summary
  Reference to the canvas to render to.
Description
  Canvas holds a reference to the canvas that is to be used to render the items on. It is initialized
  by a call to Setup.
See Also
  TJvInspectorPainter.Setup

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.CategoryColor
Summary
  Background color for category items.
Description
  CategoryColor indicates the background color for category items. Read CategoryColor to find out
  which color is used as a background when rendering a category item or set it to another value to
  change it.
See Also
  TJvInspectorCustomCategoryItem, TJvInspectorPainter.CategoryFont

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.CalcValueBasedRects
Summary
  Calculates rectangles for the value of an item.
Description
  CalcValueBasedRects calculates the rectangles needed to render the value of an item.
  
  The base implementation does nothing. Descendants should override this method to calculate the
  needed rectangles.
See Also
  TJvInspectorPainter.CalcButtonBasedRects, TJvInspectorPainter.CalcEditBasedRects,
  TJvInspectorPainter.CalcNameBasedRects, TJvInspectorPainter.SetupRects

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.CalcNameBasedRects
Summary
  Calculates rectangles for the name of an item.
Description
  CalcNameBasedRects calculates the rectangles needed to render the name of an item.
  
  The base implementation does nothing. Descendants should override this method to calculate the
  needed rectangles.
See Also
  TJvInspectorPainter.CalcButtonBasedRects, TJvInspectorPainter.CalcEditBasedRects,
  TJvInspectorPainter.CalcValueBasedRects, TJvInspectorPainter.SetupRects

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.CalcEditBasedRects
Summary
  Calculates rectangles for the edit control and button of an item.
Description
  CalcEditBasedRects calculates the rectangles needed to render the edit control and its optional
  button of an item.
  
  The base implementation does nothing. Descendants should override this method to calculate the
  needed rectangles.
See Also
  TJvInspectorPainter.CalcButtonBasedRects, TJvInspectorPainter.CalcNameBasedRects,
  TJvInspectorPainter.CalcValueBasedRects, TJvInspectorPainter.SetupRects

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.CalcButtonBasedRects
Summary
  Calculates rectangles for the expand/collapse button of an item.
Description
  CalcButtonBasedRects calculates the rectangles needed to render the expand/collapse button of an
  item.
  
  The base implementation does nothing. Descendants should override this method to calculate the
  needed rectangles.
See Also
  TJvInspectorPainter.CalcEditBasedRects, TJvInspectorPainter.CalcNameBasedRects,
  TJvInspectorPainter.CalcValueBasedRects, TJvInspectorPainter.SetupRects

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.ButtonImage
Summary
  Reference to the bitmap to use as a collapse/expand button.
Description
  ButtonImage holds a reference to the bitmap to use when the collapse/expand button for the current
  item should be rendered. If no button is to be rendered, this property is set to <B>nil</B>.
See Also
  TJvInspectorPainter.GetCollapseImage, TJvInspectorPainter.GetExpandImage

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.BackgroundColor
Summary
  Background color of the inspector.
Description
  BackgroundColor indicates the color used to render the background of the inspector. Read Background
  to find out which color is used as the background color or set it to another value to change it.

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.ApplyNameFont
Summary
  Activates the name font.
Description
  ApplyNameFont sets the Canvas font to the font used to display the name. The base implementation
  sets this to the inspector font and selects the NameColor as the font color.
See Also
  TJvInspectorPainter.ApplyValueFont, TJvInspectorPainter.Canvas, TJvInspectorPainter.NameFont

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter.ApplyValueFont
Summary
  Activates the value font.
Description
  ApplyValueFont sets the Canvas font to the font used to display the value.
  
  The base implementation sets this to the inspector font and selects the ValueColor as the font
  color.
See Also
  TJvInspectorPainter.ApplyNameFont, TJvInspectorPainter.Canvas, TJvInspectorPainter.ValueFont

----------------------------------------------------------------------------------------------------
@@TJvInspectorPainter
Summary
  Base inspector painter class.
Description
  TJvInspectorPainter is the base painter class for the data inspector. It provides methods and
  properties to aid in painting the various items in a specific style. Each style should be in its
  own descendant.
  
  The base package provides two paint styles: Borland and Visual Studio/.NET.

----------------------------------------------------------------------------------------------------
@@TJvInspectorItemSizing.SizingFactor
Summary
  The sizing increments to use when resizing an item.
Description
  SizingFactor indicates the increments used when resizing an item. An item's height will be a
  multiple of this value added to its minimum height. SizingFactor can be any value or one of the
  following constants:
  <TABLE>
  Constant        Meaning
  --------------  --------------------------------------------------------------------------
  irsItemHeight   Item will resize in steps of the inspector's ItemHeight property.
  irsNameHeight   Item will resize in steps of the height of the text 'Wy' rendered in the
                    item's name font.
  irsValueHeight  Item will resize in steps of the height of the text 'Wy' rendered in the
                    item's value font.
  irsNoReSize     Resizing will be turned of. Setting SizingFactor to this value will set
                    MinHeight to irsItemHeight.
  </TABLE>

----------------------------------------------------------------------------------------------------
@@TJvInspectorItemSizing.Sizable
Summary
  Determines if the item can be resized by the UI.
Description
  Sizable is a flag that indicates if the item can be resized by the user by dragging the bottom of
  the item. If Sizable if False, the item can not be resized by the user (it can be resized through
  code), otherwise the user can drag the item to resize it.

----------------------------------------------------------------------------------------------------
@@TJvInspectorItemSizing.MinHeight
Summary
  The minimum height the item can be resized to.
Description
  MinHeight indicates the minimum height an item can be resized to. MinHeight can be any value or one
  of the following constants:
  <TABLE>
  Constant        Meaning
  --------------  --------------------------------------------------------------------------
  irsItemHeight   Item will have a minimum height equal to the inspector's ItemHeight
                    property.
  irsNameHeight   Item will have a minimum height equal to the height of the text 'Wy'
                    rendered in the item's name font.
  irsValueHeight  Item will have a minimum height equal to the height of the text 'Wy'
                    rendered in the item's value font.
  irsNoReSize     Resizing will be turned of. Setting MinHeight to this value will set
                    SizingFactor to irsNoReSize while MinHeight will be set to
                    irsItemHeight.
  </TABLE>

----------------------------------------------------------------------------------------------------
@@TJvInspectorItemClass
<TITLE TJvInspectorItemClass type>
Summary
  Class reference to inspector items.
Description
  TJvInspectorItemClass is the class reference for inspector items.

----------------------------------------------------------------------------------------------------
@@TJvInspectorItemSizing
Summary
  Contains item row sizing settings.
Description
  TJvInspectorItemSizing is used in the RowSizing property of TJvCustomInspectorItem and its
  descendants. It specifies the minimum height and sizing steps for an item's height for resizing
  purposes. An item's height will never me smaller then the minimum height and always increments in
  sizing steps.
  
  When the sizing steps (specified by the SizingFactor property) equals 0 (or irsNoReSize), an item
  cannot be resized and will always have a height of the inspector's ItemHeight (Note: when
  SizingFactor equals irsNoReSize, MinHeight will be set to irsItemHeight).

----------------------------------------------------------------------------------------------------
@@TJvInspectorIntegerItem
Summary
  Integer inspector item.
Description
  TJvInspectorIntegerItem is the inspector item for Integer values.
  
  TJvCustomInspectorData registers this item for all Integer types (ie. Byte, Shortint, Word,
  Smallint,
  Longword/Cardinal and Integer).

----------------------------------------------------------------------------------------------------
@@TJvInspectorINIFileData.New@TJvCustomInspectorItem@TCustomIniFile@TJvInspConfSectionEvent@TJvInspConfKeyEvent
<COMBINE TJvInspectorINIFileData.New@TJvCustomInspectorItem@string@string@string@PTypeInfo@TCustomIniFile>

----------------------------------------------------------------------------------------------------
@@TJvInspectorInt64Item
Summary
  Int64 inspector item.
Description
  TJvInspectorInt64Item is the inspector item for Int64 values.
  
  TJvCustomInspectorData registers this item for the Int64 type.

----------------------------------------------------------------------------------------------------
@@TJvInspectorINIFileData.New@TJvCustomInspectorItem@string@TCustomIniFile@TJvInspConfKeyEvent
<COMBINE TJvInspectorINIFileData.New@TJvCustomInspectorItem@string@string@string@PTypeInfo@TCustomIniFile>

----------------------------------------------------------------------------------------------------
@@TJvInspectorINIFileData.INIFile
Summary
  Reference to the INI-file object.
Description
  INIFile holds a reference to the INI-file object linked to the data instance.

----------------------------------------------------------------------------------------------------
@@TJvInspectorINIFileData.New@TJvCustomInspectorItem@string@string@string@PTypeInfo@TCustomIniFile
Summary
  Instantiate a data instance and attaches an item to it.
Description
  New instantiates a new data instance with the given parameters. If the data referred to by the
  given parameters already exists, the item will be attached to that data instance, instead of
  creating a new data instance.
  
  Depending on which overloaded method is called, the ini file will be scanned for sections and/or keys to instantiate. For each sec
  ion/key combination a check is made to see if the instance is unique. If it already exists, the
  pre-existing data instance is used and a new item is added to it.
  
  Using the events you can prevent certain keys being created or even prevent whole sections being
  scanned. In addition, these events allow you to change the name for the new item instance as well
  as which type info to attach to it.
Parameters
  AParent       - The parent to which this data should be added.
  AName         - The display name of the item.
  ASection      - Section within the configuration file/settings database.
  AKey          - Key within the section of the configuration file/settings database.
  ATypeInfo     - Type info pointer to use.
  AINIFile      - TCustomIniFile derivative to be used as a data source.
  AOnAddSection - Event that will be called before a section is about to be parsed. If no event is   
                supplied, all sections are parsed, leaving the section name as the category name.
  AOnAddKey     - Event that will be called before a key is added. If no event is supplied, all keys 
                  are added, leaving the key name as the display name and the type info pointer set
  to                string.

----------------------------------------------------------------------------------------------------
@@TJvInspectorINIFileData
Summary
  INI file data layer.
Description
  TJvInspectorINIFileData is the inspector data layer that obtains its data from a TCustomIniFile
  descendant. As the class is derived from TJvInspectorCustomConfData, all access properties are
  implemented, but the type info will be used to check the legality of the access (ie. a float can't
  be accessed as Int64). <B>Note:</B> you can change the type info pointer of the data layer instance.
  This can be useful to provide alternative enumeration constants (including names with spaces) by
  using the JclRTTI unit and its JclGenerateEnumType function.
  
  The data layer implements ExistingValue, ReadValue and WriteValue and provides an additional
  property to hold a reference to the INI-file object.

----------------------------------------------------------------------------------------------------
@@TJvInspectorFontNameItem.UseFont
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorFontNameItem
Summary
  TFont.Name inspector item.
Description
  TJvInspectorFontNameItem is the string inspector item specific for the TFont.Name property. The
  item assures that the Flags always includes the iifValueList and iifOwnerDrawListVariable flags.
  The value list will consist of all registered screen fonts which will be drawn in the font they
  represent.
  
  TJvInspectorPropData registers this item for the Name property of the TFont class.

----------------------------------------------------------------------------------------------------
@@TJvInspectorFloatItem.Format
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorFontItem
Summary
  TFont inspector item.
Description
  TJvInspectorFontItem is the class inspector item specific for the TFont class. The item assures
  that the Flags always includes the iifEditButton flag and the the Edit method shows the TFontDialog
  and updates the TFont when OK was pressed.
  
  TJvCustomInspectorData registers this item for the TFont class type.

----------------------------------------------------------------------------------------------------
@@TJvInspectorFloatItem
Summary
  Float inspector item.
Description
  TJvInspectorFloatItem is an inspector item that allows floating point values to be edited.
  
  TJvCustomInspectorData registers this item for all float types (ie. Single, Double, Extended, Comp
  and Currency).

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSupportsMethodPointers
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender          - Description for this parameter
  SupportsTMethod - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsSet
Summary
  Event called when data needs to be written as a set.
Description
  Write an OnSetAsSet event handler to write data as a set value.
Parameters
  Sender  - Reference to the data layer instance that generated the event.
  Value   - The new value to assign.
  BufSize - The number of bytes the buffer contains.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsString
Summary
  Event called when data needs to be written as a string.
Description
  Write an OnSetAsString event handler to write data as a string value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - The new value to assign.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsOrdinal
Summary
  Event called when data needs to be written as an integer value.
Description
  Write an OnSetAsOrdinal event handler to write data as an integer or ordinal value. This includes
  enumerations and class instances.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - The new value to assign.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsMethod
Summary
  Event called when data needs to be written as a method pointer.
Description
  Write an OnSetAsMethod event handler to write data as a method pointer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - The new value to assign.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsInt64
Summary
  Event called when data needs to be written as a 64-bit integer.
Description
  Write an OnSetAsInt64 event handler to write data as a 64-bit integer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - The new value to assign.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnSetAsFloat
Summary
  Event called when data needs to be written as a float.
Description
  Write an OnSetAsFloat event handler to write data as a float value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - The new value to assign.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsString
Summary
  Event called when data needs to be read as a string.
Description
  Write an OnGetAsString event handler to read data as a string value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - Set this parameter to the value the instance represents.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsSet
Summary
  Event called when data needs to be read as a set.
Description
  Write an OnGetAsSet event handler to read data as a set value.
Parameters
  Sender  - Reference to the data layer instance that generated the event.
  Value   - Set this parameter to the value the instance represents.
  BufSize - Initially set to the maximum number of bytes expected. You may set this parameter to the 
            number of bytes actually copied.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsOrdinal
Summary
  Event called when data needs to be read as an integer value.
Description
  Write an OnGetAsOrdinal event handler to read data as an integer or ordinal value. This includes
  enumerations - use Ord(\<enum value\>) - and class instances - use Longword(\<instance\>) or
  Integer(\<instance\>).
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - Set this parameter to the value the instance represents.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsMethod
Summary
  Event called when data needs to be read as a method pointer.
Description
  Write an OnGetAsMethod event handler to read data as a method pointer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - Set this parameter to the value the instance represents.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsInt64
Summary
  Event called when data needs to be read as a 64-bit integer.
Description
  Write an OnGetAsInt64 event handler to read data as a 64-bit integer value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - Set this parameter to the value the instance represents.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.OnGetAsFloat
Summary
  Event called when data needs to be read as a float.
Description
  Write an OnGetAsFloat event handler to read data as a float value.
Parameters
  Sender - Reference to the data layer instance that generated the event.
  Value  - Set this parameter to the value the instance represents.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.New@TJvCustomInspectorItem@string@PTypeInfo
Summary
  Instantiate a data instance and attaches an item to it.
Description
  New instantiates a new data instance with the given parameters. If the data referred to by the
  given parameters already exists, the item will be attached to that data instance, instead of
  creating a new data instance.
  
  TJvInspectorEventData reimplements new to set both a name and the type info for the new instance.
  If a data instance with the given name and type info already exists, that instance will be used and
  a new item attached to it.
Parameters
  AParent   - The parent to which this data should be added.
  AName     - Name of the data instance.
  ATypeInfo - Default RTTI pointer for the data object.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsString
Summary
  Call wrapper for the OnSetAsString event.
Description
  DoSetAsString is a call wrapper for the OnSetAsString event. If an event has not been assigned, an
  exception is raised.
Parameters
  Value - The new value to assign.
See Also
  TJvInspectorEventData.OnSetAsString

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsSet
Summary
  Call wrapper for the OnSetAsSet event.
Description
  DoSetAsSet is a call wrapper for the OnSetAsSet event. If an event has not been assigned, an
  exception is raised.
Parameters
  Buf     - The new value to assign.
  BufSize - The number of bytes the buffer contains.
See Also
  TJvInspectorEventData.OnSetAsSet

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsFloat
Summary
  Call wrapper for the OnSetAsFloat event.
Description
  DoSetAsFloat is a call wrapper for the OnSetAsFloat event. If an event has not been assigned, an
  exception is raised.
Parameters
  Value - The new value to assign.
See Also
  TJvInspectorEventData.OnSetAsFloat

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsInt64
Summary
  Call wrapper for the OnSetAsInt64 event.
Description
  DoSetAsInt64 is a call wrapper for the OnSetAsInt64 event. If an event has not been assigned, an
  exception is raised.
Parameters
  Value - The new value to assign.
See Also
  TJvInspectorEventData.OnSetAsInt64

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsMethod
Summary
  Call wrapper for the OnSetAsMethod event.
Description
  DoSetAsMethod is a call wrapper for the OnSetAsMethod event. If an event has not been assigned, an
  exception is raised.
Parameters
  Value - The new value to assign.
See Also
  TJvInspectorEventData.OnSetAsMethod

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoSetAsOrdinal
Summary
  Call wrapper for the OnSetAsOrdinal event.
Description
  DoSetAsOrdinal is a call wrapper for the OnSetAsOrdinal event. If an event has not been assigned,
  an exception is raised.
Parameters
  Value - The new value to assign.
See Also
  TJvInspectorEventData.OnSetAsOrdinal

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsString
Summary
  Call wrapper for the OnGetAsString event.
Description
  DoGetAsString is a call wrapper for the OnGetAsString event. If an event has not been assigned, an
  exception is raised.
See Also
  TJvInspectorEventData.OnGetAsString

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsSet
Summary
  Call wrapper for the OnGetAsSet event.
Description
  DoGetAsSet is a call wrapper for the OnGetAsSet event. If an event has not been assigned, an
  exception is raised.
Parameters
  Buf     - Buffer to retrieve the set value in.
  BufSize - On entry, the maximum bytes expected. On exit this value is set to whatever value the    
         event handler set it to.
See Also
  TJvInspectorEventData.OnGetAsSet

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsOrdinal
Summary
  Call wrapper for the OnGetAsOrdinal event.
Description
  DoGetAsOrdinal is a call wrapper for the OnGetAsOrdinal event. If an event has not been assigned,
  an exception is raised.
See Also
  TJvInspectorEventData.OnGetAsOrdinal

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsInt64
Summary
  Call wrapper for the OnGetAsInt64 event.
Description
  DoGetAsInt64 is a call wrapper for the OnGetAsInt64 event. If an event has not been assigned, an
  exception is raised.
See Also
  TJvInspectorEventData.OnGetAsInt64

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsMethod
Summary
  Call wrapper for the OnGetAsMethod event.
Description
  DoGetAsMethod is a call wrapper for the OnGetAsMethod event. If an event has not been assigned, an
  exception is raised.
See Also
  TJvInspectorEventData.OnGetAsMethod

----------------------------------------------------------------------------------------------------
@@TJvInspectorDotNETPainter.OnSetItemColors
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorEnumItem
Summary
  Enumeration inspector item.
Description
  TJvInspectorEnumItem is an inspector item that allows enumeration values to be edited through a
  combo box.
  
  TJvCustomInspectorData registers this item for all enumeration types.

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData
Summary
  Event based data layer.
Description
  TJvInspectorEventData is the inspector data layer that obtains its data through event handlers. Use
  this data layer if there is no data layer available to access a specific data source. Note that
  it's often more efficient to write a new data layer for specific data sources, as you can more
  precisely control how various type kinds are to be accessed and/or translated. The class implements
  all access properties, but the type info will be used to check the legality of the access (ie. a
  float can't be accessed as Int64).
  
  After creating an instance of this data layer, you should assign handlers to those events that can
  be used (eg. if the data can only be accessed as strings, it's enough to assign an OnGetAsString
  and an
  OnSetAsString event).

----------------------------------------------------------------------------------------------------
@@TJvInspectorEventData.DoGetAsFloat
Summary
  Call wrapper for the OnGetAsFloat event.
Description
  DoGetAsFloat is a call wrapper for the OnGetAsFloat event. If an event has not been assigned, an
  exception is raised.
See Also
  TJvInspectorEventData.OnGetAsFloat

----------------------------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem.TimeShowSeconds
Summary
  Determines if the time editor shows seconds.
Description
  TimeShowSeconds determines if the time editor will show seconds. TimeShowSeconds is a direct
  reference to the <LINK TJvInspectorTimeItem.ShowSeconds, ShowSeconds> property of the
  TJvInspectorTimeItem.
See Also
  TJvInspectorTimeItem.ShowSeconds

----------------------------------------------------------------------------------------------------
@@TJvInspectorDotNETPainter
<TITLEIMG TJvInspectorDotNETPainter>
#JVCLInfo
<GROUP JVCL.Graphics>
<FLAG Component>
Summary
  Inspector painter class for .NET / Visual Studio style.
Description
  TJvInspectorDotNETPainter is the painter component that implements the .NET/Visual Studio paint
  style.

----------------------------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem
Summary
  TDateTime inspector item.
Description
  TJvInspectorDateTimItem is a compound inspector item that allows TDateTime values to be edited
  through two simple editors. The two columns will consist of a TJvInspectorDateItem and a
  TJvInspectorTimeItem. This item will allow you to set the various settings of the two editors.
  There's no reference to the two editors used available in the public interface.
  
  TJvCustomInspectorData registers this item for TDateTime types.

----------------------------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem.DateFormat
Summary
  Determines the format for the date editor.
Description
  DateFormat determines the format of the date editor. DateFormat is a direct reference to the <LINK
  TJvInspectorDateItem.Format, Format> property of the \TJvInspectorDateItem.
See Also
  TJvInspectorDateItem.Format

----------------------------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem.TimeShowAMPM
Summary
  Determines if the time editor shows AM/PM.
Description
  TimeShowAMPM determines if the time editor will show AM/PM or use the 24-hour notation.
  TimeShowAMPM is a direct reference to the <LINK TJvInspectorTimeItem.ShowAMPM, ShowAMPM> property
  of the \TJvInspectorTimeItem.
See Also
  TJvInspectorTimeItem.ShowAMPM

----------------------------------------------------------------------------------------------------
@@TJvInspectorDataClass
<TITLE TJvInspectorDataClass type>
Summary
  Class reference for data layers.
Description
  TJvInspectorDataClass is the class reference for data layer classes.

----------------------------------------------------------------------------------------------------
@@TJvInspectorDateItem
Summary
  TDate inspector item.
Description
  TJvInspectorDateItem is an inspector item that allows TDate values to be edited through a simple
  editor.
  
  TJvCustomInspectorData registers this item for TDate types.

----------------------------------------------------------------------------------------------------
@@TJvInspectorDateItem.Format
Summary
  Determines the format for the date.
Description
  Format determines the display/edit format of the date string. The format string should only contain
  the d, dd, m, mm, yy, yyyy or date separator characters. Other settings are not allowed.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.Section
Summary
  The section this instance represents.
Description
  Section holds the section name within the configuration file/settings database.
See Also
  TJvInspectorCustomConfData.Key

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.WriteValue
Summary
  Writes a string value.
Description
  WriteValue writes the string value to the configuration file/settings database where the
  Section/Key pair is pointing to.
  
  Descendants should override this method to write the value to the configuration file/settings
  database at the location represented by the Section/Key pair.
Parameters
  Value - Description for this parameter
See Also
  TJvInspectorCustomConfData.Key, TJvInspectorCustomConfData.ReadValue,
  TJvInspectorCustomConfData.Section

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.ReadValue
Summary
  Reads a string value.
Description
  ReadValue reads the string value from the configuration file/settings database where the
  Section/Key pair is pointing to.
  
  Descendants should override this method to read the value represented by the Section/Key pair from
  the configuration file/settings database.
See Also
  TJvInspectorCustomConfData.Key, TJvInspectorCustomConfData.Section,
  TJvInspectorCustomConfData.WriteValue

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.Key
Summary
  The key this instance represents.
Description
  Key holds the key name within the section specified by Section in the configuration file/settings
  database.
See Also
  TJvInspectorCustomConfData.Section

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomConfData.ExistingValue
Summary
  Indicates whether the specified section and key exist.
Description
  ExistingValue determines whether or not the section/key pair is an actual value within the
  configuration file/settings database.
  
  Descendants must override this method to provide a meaningful result. The implementation of <LINK
  TJvCustomInspectorData.IsAssigned, IsAssigned> uses the result of this method.
See Also
  TJvCustomInspectorData.IsAssigned

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomConfData
Summary
  Base configuration data layer.
Description
  TJvInspectorCustomConfData is the base inspector data layer that obtains its data from
  configuration files/settings databases. The class implements all access properties, but the type
  info will be used to check the legality of the access (ie. a float can't be accessed as Int64).
  <B>Note:</B> you can change the type info pointer of the data layer instance. This can be useful to
  provide alternative enumeration constants (including names with spaces) by using the JclRTTI unit
  and its
  JclGenerateEnumType function.
  
  The data layer provides in the common properties and methods to access configuration files/settings
  databases.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SingleNameUseFirstCol
Summary
  Determines if the single name shown is that of the first column.
Description
  SingleNameUseFirstCol determines if the name displayed in SingleName mode, is the DisplayName of
  the item associated with the first column.
  
  Set SingleNameUseFirstCol to True to let the item associated with the first column provide the name
  to show. <B>Note:</B> setting SingleNameUseFirstCol to True will also set SingleName to True.
  
  Set SingleNameUseFirstCol to False to keep the DisplayName of the compound item separated from any
  column in SingleName mode.
  
  SingleNameUseFirstCol maps to the icifSingleNameUseFirstCol in the CompoundItemFlags property.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SingleName
Summary
  Determines if the compound item uses a single name to represent the different columns.
Description
  SingleName determines if the compound item uses a single name to represent the different columns.
  
  Set SingleName to True if you want only 1 name displayed, regardless of the number of columns.
  
  Set SingleName to False if you want separate names displayed for each column. The displayed names
  are then determined by the DisplayName of the items associated with the columns. <B>Note:</B> when
  setting SingleName to False, SingleNameUseFirstCol will also be set to False.
  
  SingleName maps to the icifSingleName in the CompoundItemFlags property.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SelectedColumnIndex
Summary
  Index of currently selected (focused) column.
Description
  SelectedColumnIndex indicates which column currently has the input focus. Read SelectedColumnIndex
  to determine which column has focus or set it to a column that is to receive input focus.
See Also
  TJvInspectorCustomCompoundItem.SelectedColumn

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SelectedColumn
Summary
  Currently selected (focused) column.
Description
  SelectedColumn indicates which column currently has the input focus. Read SelectedColumn to
  determine which column has focus or set it to a column that is to receive input focus.
See Also
  TJvInspectorCustomCompoundItem.SelectedColumnIndex

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.InsertColumnPrim@Integer@TJvCustomInspectorItem
<COMBINE TJvInspectorCustomCompoundItem.InsertColumnPrim@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.RecalcColumnWidths
Summary
  Update column widths
Description
  RecalcColumnWidths will recalculate all column widths such that the total width will be 100. If the
  SetColumn property is set to a column, that column is guaranteed to be the width it was set to.
  
  RecalcColumnWidths will loop over all columns and adjust there widths if needed. If a columns width
  would make the total > 100, it is resized to a smaller value. If a columns width was set to 0, it
  will be added to a list of columns to be set after the main loop.
  
  After the main loop has ended and the total width < 100, a second loop will start to loop over all
  item for which the width was set to 0. The remaining space will be equally divided over the columns.
Parameters
  SetColumn - Column which has to be set to the width that is specified. This column is guaranteed to
               be set to that width, unless its width is 0, which means it will be set to whatever   
          width remains after the main loop.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.IndexOfColumnPrim@TJvInspectorCompoundColumn
<COMBINE TJvInspectorCustomCompoundItem.IndexOfColumnPrim@TJvCustomInspectorItem>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.InsertColumnPrim@Integer@Integer
Summary
  Inserts the specified child to column list at a specified index.
Description
  InsertColumnPrim will insert the specified child in the Items list to the Columns list at the
  specified index. This will remove the specified item from the Items list (a column item can't be
  shown as a child item as well). The column is initialized to a width of 0 (see Width and WidthSet
  for more information).
  
  InsertColumnPrim comes in two overloaded versions: one to insert an Item instance and one to insert
  the item at an index in the Items property.
  
  This method primarily intended as an internal method to insert columns. Some descendants will
  surface
  this behavior through publicly declared methods, others don't but insert the columns automatically
  (such as TJvInspectorDateTimeItem).
Parameters
  Index     - Index at which the item is to be inserted into the column list. This is a 0-based index.
               The item will be inserted at the index, moving all items at or above the index to the
               right. If Index = ColumnCount, the item will be added to the column list.
  Item      - Item to add as a column. Item is checked to be a child of the compound item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  TJvInspectorCustomCompoundItem.AddColumnPrim, TJvInspectorCustomCompoundItem.DeleteColumnPrim

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.IndexOfColumnPrim@TJvCustomInspectorItem
Summary
  Locates a specific column.
Description
  IndexOfColumnPrim searches for a column and returns the index. If the requested column is not
  found, -1 will be returned, otherwise it's a 0-based index into the Columns list.
  
  IndexOfColumnPrim comes in two overloaded versions: one to locate a column instance and one to
  locate an item instance.
  
  This method primarily intended as an internal method to locate columns. Some descendants will
  surface
  this behavior through publicly declared methods, others don't (such as TJvInspectorDateTimeItem).
Parameters
  Col  - Column instance to locate.
  Item - Item instance to locate.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.DeleteColumnPrim@TJvInspectorCompoundColumn
<COMBINE TJvInspectorCustomCompoundItem.DeleteColumnPrim@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.DivideRect
Summary
  Divides the specified rectangle over the columns.
Description
  DivideRect divides the specified rectangle over the columns (taking into account the columns Width
  property) and set's the associated item's rectangle accordingly.
  
  If DivideRect divides the iprValue rectangle, the Painter will be requested to calculate the edit
  based rectangles.
Parameters
  RectKind - The rectangle kind to set.
  Value    - The rectangle to divide.
See Also
  TJvCustomInspector.Painter, TJvInspectorCompoundColumn.Width, TJvInspectorPainter.CalcEditBasedRects

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.DeleteColumnPrim@Integer
Summary
  Deletes an item from the column list.
Description
  DeleteColumnPrim will remove an item from the column list. The item will be moved back to the Items
  list.
  
  DeleteColumnPrim comes in three overloaded versions: one to delete a column instance, one to delete
  the column at an index and one to delete an item instance.
  
  This method primarily intended as an internal method to delete columns. Some descendants will
  surface
  this behavior through publicly declared methods, others don't but delete the columns automatically
  (such as TJvInspectorDateTimeItem).
Parameters
  Column - Column to delete.
  Index  - Column index to delete.
  Item   - Item to delete from the column list.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.DeleteColumnPrim@TJvCustomInspectorItem
<COMBINE TJvInspectorCustomCompoundItem.DeleteColumnPrim@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.CompoundItemFlags
Summary
  Determines flags specific for compound items.
Description
  CompoundItemFlags determines the options specific for the compound item. Each flag is also
  represented by a separate property.
See Also
  TJvInspectorCustomCompoundItem.SingleName, TJvInspectorCustomCompoundItem.SingleNameUseFirstCol

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.Columns
Summary
  List of columns.
Description
  Columns is a 0-based array of columns the compound item has. Use Columns to retrieve an instance of
  a specific column.
See Also
  TJvInspectorCustomCompoundItem.ColumnCount

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.ColumnCount
Summary
  Indicates the number of columns.
Description
  ColumnCount retrieves the number of columns that are in the column list. Read ColumnCount to find
  out how many columns the compound item has.
See Also
  TJvInspectorCustomCompoundItem.Columns

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.AddColumnPrim@TJvCustomInspectorItem
<COMBINE TJvInspectorCustomCompoundItem.AddColumnPrim@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.AddColumnPrim@Integer
Summary
  Adds the specified child to column list.
Description
  AddColumnPrim will add the specified child in the Items list to the Columns list. This will remove
  the specified item from the Items list (a column item can't be shown as a child item as well). The
  column is initialized to a width of 0 (see Width and WidthSet for more information).
  
  AddColumnPrim comes in two overloaded versions: one to add an Item instance and one to add the item
  at an index in the Items property.
  
  This method primarily intended as an internal method to add columns. Some descendants will surface
  this behavior through publicly declared methods, others don't but add the columns automatically
  (such as TJvInspectorDateTimeItem).
Parameters
  Item      - Item to add as a column. Item is checked to be a child of the compound item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  TJvInspectorCustomCompoundItem.DeleteColumnPrim, TJvInspectorCustomCompoundItem.InsertColumnPrim

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem
Summary
  Compound row inspector item.
Description
  TJvInspectorCustomCompoundItem is an inspector item that allows some of its child items to be shown
  as sub columns of itself. It's primarily intended as a base class for multicolumn items.
  
  Use a TJvInspectorCompoundItem to define a multicolumn item you can manage yourself.
  
  TJvInspectorDateTimeItem also descends from TJvInspectorCustomCompoundItem but you have no control
  over the columns.
  
  DisplayName is reimplemented by TJvInspectorCustomCompoundItem to take the SingleName and
  SingleNameUseFirstCol properties into account when retrieving/setting the DisplayName.
See Also
  TJvCustomInspectorItem.IsCompoundColumn

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCategoryItem.Name
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCategoryItem.IsCategory
Summary
  Determines if the item represents a category item.
Description
  IsCategory determines if the item represents a category item.
  
  If the item represents a category the method will return True, otherwise False is returned.
  
  \TJvInspectorCustomCategoryItem implements this method to always return True.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.InsertColumn@Integer@TJvCustomInspectorItem
<COMBINE TJvInspectorCompoundItem.InsertColumn@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCustomCategoryItem
Summary
  Inspector category item.
Description
  TJvInspectorCustomCategoryItem is an inspector item that represents a category. A category is a
  data-less item that allows you to group several items that are related to each other.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.IndexOfColumn@TJvInspectorCompoundColumn
<COMBINE TJvInspectorCompoundItem.IndexOfColumn@TJvCustomInspectorItem>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.InsertColumn@Integer@Integer
Summary
  Inserts the specified child to column list at a specified index.
Description
  InsertColumn will insert the specified child in the Items list to the Columns list at the specified
  index. This will remove the specified item from the Items list (a column item can't be shown as a
  child item as well). The column is initialized to a width of 0 (see Width and WidthSet for more
  information).
  
  InsertColumn comes in two overloaded versions: one to insert an Item instance and one to insert the
  item at an index in the Items property.
Parameters
  Index     - Index at which the item is to be inserted into the column list. This is a 0-based index.
               The item will be inserted at the index, moving all items at or above the index to the
               right. If Index = ColumnCount, the item will be added to the column list.
  Item      - Item to add as a column. Item is checked to be a child of the compound item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  TJvInspectorCompoundItem.AddColumn, TJvInspectorCompoundItem.DeleteColumn

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.DeleteColumn@TJvCustomInspectorItem
<COMBINE TJvInspectorCompoundItem.DeleteColumn@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.DeleteColumn@TJvInspectorCompoundColumn
<COMBINE TJvInspectorCompoundItem.DeleteColumn@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.IndexOfColumn@TJvCustomInspectorItem
Summary
  Locates a specific column.
Description
  IndexOfColumn searches for a column and returns the index. If the requested column is not found, -1
  will be returned, otherwise it's a 0-based index into the Columns list.
  
  IndexOfColumn comes in two overloaded versions: one to locate a column instance and one to locate
  an item instance.
Parameters
  Col  - Column instance to locate.
  Item - Item instance to locate.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.AddColumn@TJvCustomInspectorItem
<COMBINE TJvInspectorCompoundItem.AddColumn@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.DeleteColumn@Integer
Summary
  Deletes an item from the column list.
Description
  DeleteColumn will remove an item from the column list. The item will be moved back to the Items
  list.
  
  DeleteColumn comes in three overloaded versions: one to delete a column instance, one to delete the
  column at an index and one to delete an item instance.
Parameters
  Column - Column to delete.
  Index  - Column index to delete.
  Item   - Item to delete from the column list.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundColumn.WidthSet
Summary
  The set width of the column.
Description
  WidthSet indicates the width the column has been set to. The width is represented as a percentage.
  Note that the width of the column might not be this value. WidthSet indicates what the ideal width
  should be.
  
  A width to 0 will result in whatever space the column can get. When multiple columns have a width
  of 0, the available space will be equally distributed among those columns.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem
Summary
  Compound row inspector item.
Description
  TJvInspectorCompoundItem is an inspector item that allows some of its child items to be shown as
  sub columns of itself.
See Also
  TJvCustomInspectorItem.IsCompoundColumn

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.AddColumn@Integer
Summary
  Adds the specified child to column list.
Description
  AddColumn will add the specified child in the Items list to the Columns list. This will remove the
  specified item from the Items list (a column item can't be shown as a child item as well). The
  column is initialized to a width of 0 (see Width and WidthSet for more information).
  
  AddColumn comes in two overloaded versions: one to add an Item instance and one to add the item at
  an index in the Items property.
Parameters
  Item      - Item to add as a column. Item is checked to be a child of the compound item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  TJvInspectorCompoundItem.DeleteColumn, TJvInspectorCompoundItem.InsertColumn

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundColumn.Parent
Summary
  The compound item that owns this column.
Description
  Parent is the compound item that owns this column and is therefor the parent of the associated item.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundColumn.Width
Summary
  The (display) width of the column.
Description
  Width indicates the width of the column as it is displayed. The width is represented as a
  percentage.
  Read Width to determine the width of the item as it is displayed or set it to a desired new width.
  
  Setting Width to 0 will result in whatever space the column can get. When multiple columns have a
  width of 0, the available space will be equally distributed among those columns.
  Note
  When setting Width, you actually set WidthSet. Width will then be determined based on the other
  columns (ie. it might not be the value you have set it to).
See Also
  TJvInspectorCompoundColumn.WidthSet

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundColumn.Create
Summary
  Instantiates a new column.
Description
  Create instantiates a new column. The parameters will initialize the column to use the given item,
  initializing its Width to 0.
Parameters
  AParent - Compound item the column belongs too.
  AItem   - The item that is to be associated with the column. The item must be a child of Parent,
  and            will be moved out of the child list.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundColumn.Item
Summary
  The item associated with the column.
Description
  Item is the inspector item the column represents. Read Item to determine the current item for this
  column, or set it to a new item.
  
  When setting the Item, the previous item (if any) will be moved back to the child list of the
  compound item. The new item (if any) will be moved out of the child list of the compound item.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCompoundColumn
Summary
  Holds column information for a compound item.
Description
  The TJvInspectorCompoundColumn class is used by the TJvInspectorCompoundItem class to represent a
  column. The class provides properties to get/set the item associated with the column, its width as
  it is displayed and the width it is set to.
  
  Do not create instances of TJvInspectorCompoundColumn, use TJvInspectorCompoundItem.AddColumn to
  add columns to a compound item.

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.SortComponents
Summary
  Indicates whether components are sorted alphabetically.
Description
  SortComponents indicates whether or not the components of each owner are sorted alphabetically.
  
  Sorting owners can be controlled separately through the SortOwners property.
See Also
  TJvInspectorComponentItem.ItemComponentFlags, TJvInspectorComponentItem.Owners,
  TJvInspectorComponentItem.SortOwners

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.SortOwners
Summary
  Indicates whether owners are grouped alphabetically.
Description
  SortOwners indicates whether or not the owner list is sorted alphabetically before searching for
  components.
  
  Sorting components can be controlled separately through the SortComponents property. In addition, if
  KeepFirstOwnerAsFirst is set to True, the first owner of the list (Owners[0]) will always be the
  first in the list.
See Also
  TJvInspectorComponentItem.ItemComponentFlags, TJvInspectorComponentItem.KeepFirstOwnerAsFirst,
  TJvInspectorComponentItem.Owners, TJvInspectorComponentItem.SortComponents

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.ShowOwnerNames
Summary
  Indicates whether the owner names are to be shown in the drop down list.
Description
  ShowOwnerNames indicates whether the owner names are to be prefixed in the drop down list of
  assignable components.
  
  When set to True, the name of the owners are shown. If NoShowFirstOwnerName is also set to True,
  the name of the first owner will not be shown.
  
  ShowOwnerNames maps to the icfShowOwnerNames in the ItemComponentFlags property.
See Also
  TJvInspectorComponentItem.ItemComponentFlags, TJvInspectorComponentItem.NoShowFirstOwnerName

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.Owners
Summary
  List of component owners.
Description
  Owners is a 0-based array of component owners.
  
  Component owners are components who's Component list are scanned for assignable components to this
  item. The drop down list will be filled with a list of sub components of these owners that are
  assignment compatible with the class this item represents.
  
  Read Owners to find out which component owners are available to this item or change a specific
  owner by setting it to a new one.
See Also
  TJvInspectorComponentItem.DeleteOwner

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.OwnerCount
Summary
  Number of component owners.
Description
  OwnerCount holds the number of component owners in the Owners list.
  
  Read OwnerCount to find out how many component owners are in the Owners list.
See Also
  TJvInspectorComponentItem.Owners

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.NoShowFirstOwnerName
Summary
  Indicates whether the first owner's name is to be shown in the drop down list.
Description
  NoShowFirstOwnerName indicates whether the first owner's name is to be prefixed in the drop down
  list of assignable components.
  
  When set to True, the name of the first owner is not shown, regardless of the state of the
  ShowOwnerNames property. When set to False, the name of the first owner will be shown if
  ShowOwnerNames is also set to True.
  
  NoShowFirstOwnerName maps to the icfNoShowFirstOwnerName in the ItemComponentFlags property.
See Also
  TJvInspectorComponentItem.ItemComponentFlags, TJvInspectorComponentItem.ShowOwnerNames

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.DeleteOwner@TComponent
<COMBINE TJvInspectorComponentItem.DeleteOwner@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.ItemComponentFlags
Summary
  Component item flags.
Description
  ItemComponentFlags are the flags specific to the component inspector item. Read ItemComponentFlags
  to determine the current flags or set it to a new value.
See Also
  TJvInspectorComponentItem.KeepFirstOwnerAsFirst, TJvInspectorComponentItem.NoShowFirstOwnerName,
  TJvInspectorComponentItem.ShowOwnerNames, TJvInspectorComponentItem.SortComponents,
  TJvInspectorComponentItem.SortOwners

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.KeepFirstOwnerAsFirst
Summary
  Indicates whether the components of the first owner should appear before other owner components.
Description
  KeepFirstOwnerAsFirst indicates whether the components of the first owner should appear before the
  components of the other owners, regardless of any sorting option.
See Also
  TJvInspectorComponentItem.ItemComponentFlags, TJvInspectorComponentItem.Owners,
  TJvInspectorComponentItem.SortComponents, TJvInspectorComponentItem.SortOwners

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.DeleteOwner@Integer
Summary
  Removes a component owner from the owners list.
Description
  DeleteOwner removes the specified component or the component at the specified index from the owners
  list.
  
  Component owners are components who's Component list are scanned for assignable components to this
  item. The drop down list will be filled with a list of sub components of these owners that are
  assignment compatible with the class this item represents.
  
  If the specified owner does not exist, DeleteOwner does nothing. If the specified index is out of
  range, an EListError exception will be raised.
Parameters
  AOwner - The component to add to the Owners list
  Index  - Index into the Owners list of the owner to be removed.
See Also
  TJvInspectorComponentItem.DeleteOwner

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem.AddOwner
Summary
  Adds a component owner to the owners list.
Description
  AddOwner adds the specified component as a new component owner.
  
  Component owners are components who's Component list are scanned for assignable components to this
  item. The drop down list will be filled with a list of sub components of these owners that are
  assignment compatible with the class this item represents.
  
  If the specified owner already is in the list, AddOwner does nothing.
Parameters
  AOwner - The component to add to the Owners list
See Also
  TJvInspectorComponentItem.DeleteOwner

----------------------------------------------------------------------------------------------------
@@TJvInspectorComponentItem
Summary
  Component inspector item.
Description
  TJvInspectorComponentItem is an inspector item that allows component values to be edited. The item
  is derived from TJvInspectorClassItem and as such allows published properties of an assigned
  component to be viewed. The iifValueList flag, however will be fixed to allow components to be
  picked and the icfShowClassName flag will be suppressed (<LINK TJvInspectorClassItem.ShowClassName,
  ShowClassName> property will be False).
  
  In addition the item provides properties that control the way the component names are added. You
  can specify to show no owner names, all owner names or all but the first owner names. You can also
  specify the order of the components.
  
  * To specify the assigned component properties should be shown, set the CreateClassMembers property
    to True.
  * To specify that owner names are to be shown, set the ShowOwnerNames property to True.
  * To specify that the first owner name should <B>not</B> be shown, set NoShowFirstOwnerName to True
    in addition to setting ShowOwnerNames to True.
  * To specify that the component list should be sorted by owner, set SortOwners to True.
  * To specify that the components of the first owner should show first regardless of any sorting, set
  KeepFirstOwnerAsFirst to True.
  * To specify that the component list should be sorted by component name, set SortComponents to True.
  * Use AddOwner to add a list of component owners (such as forms and data modules) to be scanned for
    assignable components.
  * Optionally in addition to or instead of the above AddOwner, assign an <LINK
  TJvCustomInspectorItem.OnGetValueList, OnGetValueList> event handler to provide additionally
  selectable components.
  
  TJvCustomInspectorData registers this item for the TComponent type.

----------------------------------------------------------------------------------------------------
@@TJvInspectorClassItem.ShowClassName
Summary
  Flag to control whether or not the class name is shown as a value.
Description
  ShowClassName controls whether the class name is shown as a value or the instance value is shown. If
  ShowClassName is True, the class' name is shown in parenthesis as the item's value.
  
  If ShowClassName is False, the value of the instance is shown. If no instance is assigned, an empty
  string is used, otherwise the name of the TComponent is shown if the instance is a TComponent or
  the specified value name in the value list is used.
  
  ShowClassName maps to the icfShowClassName in the ItemClassFlags property.
See Also
  TJvInspectorClassItem.ItemClassFlags

----------------------------------------------------------------------------------------------------
@@TJvInspectorClassItem.ItemClassFlags
Summary
  Class item flags.
Description
  ItemClassFlags are the flags specific to the class inspector item. Read ItemClassFlags to determine
  the current flags or set it to a new value.
See Also
  TJvInspectorClassItem.CreateMembers, TJvInspectorClassItem.ShowClassName

----------------------------------------------------------------------------------------------------
@@TJvInspectorClassItem.RenderAsCategory
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorClassItem.CreateMembers
Summary
  Creates the class properties as child items.
Description
  CreateMembers will create all published properties of the class it represents as child items.
  CreateMembers will be called from <LINK TJvCustomInspectorItem.InvalidateMetaData,
  InvalidateMetaData> if the CreateMemberItems property is set to True.
See Also
  TJvCustomInspectorItem.InvalidateMetaData, TJvInspectorClassItem.CreateMemberItems,
  TJvInspectorClassItem.DeleteMembers

----------------------------------------------------------------------------------------------------
@@TJvInspectorClassItem.DeleteMembers
Summary
  Deletes the child items that represent properties of the class.
Description
  DeleteMembers will delete all sub items that are published properties of the class it represents.
  DeleteMembers will be called from CreateMembers to refresh the member list.
See Also
  TJvInspectorClassItem.CreateMembers

----------------------------------------------------------------------------------------------------
@@TJvInspectorClassItem.CreateMemberItems
Summary
  Flag to control whether or not class properties are created as child item.
Description
  CreateMemberItems control whether or not the class properties are created as child items. If
  CreateMemberItems is True, properties for the class are created as child items, otherwise the child
  items are not created.
  
  CreateMemberItems maps to the icfCreateMemberItems in the ItemClassFlags property.
See Also
  TJvInspectorClassItem.ItemClassFlags

----------------------------------------------------------------------------------------------------
@@TJvInspectorClassItem
Summary
  Class inspector item.
Description
  TJvInspectorClassItem is an inspector item that allows class values to be edited. The item provides
  two properties that control the way the value can be edited. You can specify that instance members
  are to be created as child items and/or if the value is assignable.
  
  * To specify the item is assignable, specify the iifValueList in the Flags property and assign a  
  handler to the <LINK TJvCustomInspectorItem.OnGetValueList, OnGetValueList> event.
  * To specify the assigned classes properties should be shown, set the CreateClassMembers property to
  True.
  
  TJvCustomInspectorData registers this item for the class type.

----------------------------------------------------------------------------------------------------
@@TJvInspectorCharItem
Summary
  Char inspector item.
Description
  TJvInspectorCharItem is an inspector item that allows character values to be edited. Values below
  the space or above the tilde (~) are shown/edited as <B>#<I>ordinal value</I></B>. In either case
  you can enter a character in both forms (ie. as a character or as an ordinal value).
  
  TJvCustomInspectorData registers this item for all character types (ie. Char and WideChar).

----------------------------------------------------------------------------------------------------
@@TJvInspectorBorlandPainter.DividerLightColor
Summary
  Pen color of the light side of the divider bar.
Description
  DividerLightColor indicates the pen color used to render the lighter part of the divider bar (the
  line on the right). Read DividerLightColor to find out which color is used to render the right side
  of the divider bar or set it to another value to change it.
See Also
  TJvCustomInspector.Divider, TJvInspectorPainter.DividerColor

----------------------------------------------------------------------------------------------------
@@TJvInspectorBorlandPainter.OnSetItemColors
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorBorlandPainter
<TITLEIMG TJvInspectorBorlandPainter>
#JVCLInfo
<GROUP JVCL.Graphics>
<FLAG Component>
Summary
  Inspector painter class for Borland style.
Description
  TJvInspectorBorlandPainter is the painter component that implements the Borland paint style.

----------------------------------------------------------------------------------------------------
@@TJvInspectorBorlandNETBasePainter
Summary
  Base inspector painter class common for Borland and .NET styles.
Description
  TJvInspectorBorlandNETBasePainter is the common base painter class for the Borland and .NET paint
  styles. It implements many of the methods to setup the various item rectangles, fonts and colors in
  such a way that is common for the Borland and .NET styles.

----------------------------------------------------------------------------------------------------
@@TJvInspectorBorlandNETBasePainter.RealButtonAreaWidth
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorBooleanItem
Summary
  Boolean inspector item.
Description
  TJvInspectorBooleanItem is an inspector item that allows boolean values to be edited, either
  through the normal enumeration combo box or with a check box.
  
  TJvCustomInspectorData registers this item for all boolean types (ie. Boolean, BYTEBOOL, WORDBOOL
  and
  LONGBOOL).

----------------------------------------------------------------------------------------------------
@@TJvInspectorBooleanItem.ShowAsCheckBox
Summary
  Indicates whether the item is shown and edited using a check box.
Description
  ShowAsCheckbox indicates whether the item is shown and edited using a check box. If ShowAsCheckbox
  is
  True, the value is displayed and edited using a check box, otherwise the standard displaying and
  editing for enumeration types is used (ie. a drop down list).

----------------------------------------------------------------------------------------------------
@@TJvInspector
<TITLEIMG TJvInspector>
#JVCLInfo
<GROUP JVCL.EditsMemosAndCombos.Other>
<FLAG Component>
Summary
  Inspector control.
Description
  TJvInspector is an inspector control. The inspector control is responsible of displaying and
  navigating the data tree. The control is completely separated from the editing layer and the
  editing layer is completely separated from the data layer. This means the control is able to
  "inspect" a wide variety of data types, without the need of creating a new descendant of the
  inspector control. It also means you can mix various data sources in one view.
  
  The control does not handle the painting itself. This is left to a painter object.
See Also
  __JVCL.Info.Inspector

----------------------------------------------------------------------------------------------------
@@TJvInspDataReg.Remove
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Instance - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspDataReg.Clear
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspDataReg.Count
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspDataReg.Items
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspDataReg.Locate
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Instance - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspConfSectionEvent
<TITLE TJvInspConfSectionEvent type>
Summary
  Event generated before a configuration section is added.
Description
  The TJvInspConfSectionEvent event is called just before a configuration section is parsed.
  
  Write a handler for this event to change the display name of the section or to prevent this section
  from being added.
Parameters
  SectionName - Name of the section to be parsed on entry. Change this parameter to its display name.
  Parse       - Initially set to True. Set it to False to prevent this section from being added.

----------------------------------------------------------------------------------------------------
@@TJvInspDataReg
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@TJvInspDataReg.Add
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Instance - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.MatchValue
Summary
  Determines the match value for the given data instance.
Description
  MatchValue determines if and how good the registration item matches for the given data instance.
  MatchValue in TJvCustomInspectorRegItem is an abstract method and should be overridden in
  descendant classes to provide a meaningful value.
Parameters
  ADataObj - Data layer instance use for comparison

----------------------------------------------------------------------------------------------------
@@TJvInspAsFloat
<TITLE TJvInspAsFloat type> <COMBINE TJvInspectorEventData.OnSetAsFloat>

----------------------------------------------------------------------------------------------------
@@TJvInspAsInt64
<TITLE TJvInspAsInt64 type>
Summary
  Write here a summary (1 line)
Description
  This type is used by (for reference): TJvInspectorEventData.OnGetAsInt64
  TJvInspectorEventData.OnGetAsOrdinal TJvInspectorEventData.OnSetAsInt64
  TJvInspectorEventData.OnSetAsOrdinal
Parameters
  Sender - Description for this parameter
  Value  - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TJvInspAsMethod
<TITLE TJvInspAsMethod type>
Summary
  Write here a summary (1 line)
Description
  This type is used by (for reference): TJvInspectorEventData.OnGetAsMethod
  TJvInspectorEventData.OnSetAsMethod
Parameters
  Sender - Description for this parameter
  Value  - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TJvInspAsSet
<TITLE TJvInspAsSet type>
Summary
  Write here a summary (1 line)
Description
  This type is used by (for reference): TJvInspectorEventData.OnGetAsSet
  TJvInspectorEventData.OnSetAsSet
Parameters
  Sender  - Description for this parameter
  Value   - Description for this parameter
  BufSize - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TJvInspAsString
<TITLE TJvInspAsString type> <COMBINE TJvInspectorEventData.OnGetAsString>

----------------------------------------------------------------------------------------------------
@@TJvInspConfKeyEvent
<TITLE TJvInspConfKeyEvent type>
Summary
  Event generated before a configuration key is added.
Description
  The TJvInspConfKeyEvent event is called just before a configuration key is added.
  
  Write a handler for this event to change the display name of the key or to prevent this key from
  being added.
Parameters
  SectionName - Name of the section the key is in.
  ItemName    - Name of the key to be added on entry. Change this parameter to its display name.
  ATypeInfo   - Initially set to the type info of the string type. Change this parameter to whatever 
                the key represents.
  Allow       - Initially set to True. Set it to False to prevent this key from being added.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.ItemClass
Summary
  Inspector item class to use on a match
Description
  ItemClass holds the inspector item class to use if this item is a match for a data instance. This
  value is used in the CreateChild method of a data object.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.MatchPercent
Summary
  Determines the match percentage for the given data instance.
Description
  MatchPercent determines the percentage of matching the registration item to the given data instance.
  MatchPercent in TJvCustomInspectorRegItem is an abstract method and should be overridden in
  descendant classes to provide a meaningful value (this usually involves in translating the
  MatchValue to a percentage).
Parameters
  ADataObj - Data layer instance use for comparison

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.IsMatch
Summary
  Determines if the item matches for the given data instance.
Description
  IsMatch checks if the given item is a match for the given data layer. It returns the result of the
  expression MatchValue(ADataObj) <> 0.
Parameters
  ADataObj - Data layer instance use for comparison

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it should use if this
  item matches a data instance.
Parameters
  AItemClass - Inspector item class to assign to the registration item.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.CompareTo
Summary
  Compares the item to another
Description
  CompareTo compares the item to the specified item. The registration item uses two compare methods,
  Compare and CompareTo, which work in a similar way as Assign and AssignTo: if Compare doesn't know
  how to compare the two items, It swaps the items and calls CompareTo.
  
  The CompareTo method in TJvCustomInspectorRegItem will return the match percentage of the one that
  matched highest.
Parameters
  ADataObj - Data layer instance use for comparison
  Item     - Registration item to compare to
Return value
  If the specified Item is a better match than this item, the negated match percentage of that item
  is returned, otherwise the match percentage of this item is returned.
See Also
  TJvCustomInspectorRegItem.Compare

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.ApplyDefaults
Summary
  Applies defaults to an inspector item
Description
  AppliesTo assigns default values to an inspector item. ApplyDefaults is called by the data layers'
  CreateChild method after the inspector item is created.
Parameters
  Item - Inspector item to assign the defaults to.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.Compare
Summary
  Compares the item with another
Description
  Compare compares the item with the specified item. The registration item uses two compare methods,
  Compare and CompareTo, which work in a similar way as Assign and AssignTo: if Compare doesn't know
  how to compare the two items, It swaps the items and calls CompareTo.
  
  The Compare method in TJvCustomInspectorRegItem will call the specified items' CompareTo method
  with itself as a parameter. The result of this call will be negated (because the order of the items
  was swapped) and returned.
Parameters
  ADataObj - Data layer instance use for comparison
  Item     - Registration item to compare with
Return value
  If the specified item is a better match than this item, the negated match value is returned,
  otherwise the match value of this item is returned. If the items could not be compared, not the
  match value will be returned but the match percentages using the same rules as for the match value
  (ie. a negative number means the specified item is a better match, a positive number means this
  item is the better match).
See Also
  TJvCustomInspectorRegItem.CompareTo

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem
Summary
  Base registration item.
Description
  TJvCustomInspectorRegItem is the abstract base registration item. You should never add an instance
  of this class to the registration database but rather one of the descendant types.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.UserData
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Visible
Summary
  Indicates if item is visible.
Description
  Visible indicates if the item is visible. When an item is visible, neither the item nor its child
  items are visible in the inspector.
  
  Read Visible to determine if the item is visible or set Visible to a new state.
  Note
  Visible maps onto the iifVisible flag in the Flags property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.UpdateLastPaintGeneration
Summary
  Updates the LastPaintGeneration to inspectors PaintGeneration value.
Description
  UpdateLastPaintGenerations sets the item's LastPaintGeneration value to the <LINK
  TJvCustomInspector.PaintGeneration, Inspector.PaintGeneration> value.
  Note
  Do not call this method directly. It is called whenever one of the display rectangles are modified,
  which usually signals the item is to be repainted.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Undo
Summary
  Cancels changes made to the editor.
Description
  Undo cancels any changes made to the editor and refetches the value from the data layer.
See Also
  TJvCustomInspectorItem.Apply

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.UpdateDisplayOrder
Summary
  Moves the item to another position.
Description
  UpdateDisplayOrder moves the item to another place in its visibility order. All items between the
  old and new index will be moved accordingly.
  
  UpdateDisplayOrder is called whenever the DisplayIndex property of the item is changed.
Parameters
  Item     - Item to change the DisplayIndex of.
  NewIndex - New index at which the item is to be displayed.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.TrackButton
Summary
  Tracks the mouse events for the edit button.
Description
  TrackButton checks the position of the mouse and updates the Pressed property and the visual
  indication for the edit button accordingly.
  
  The method will be called for all mouse movements while the Tracking property is True.
Parameters
  X - X-position of the mouse
  Y - Y-position of the mouse
See Also
  TJvCustomInspectorItem.Pressed, TJvCustomInspectorItem.StopTracking, TJvCustomInspectorItem.Tracking

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Tracking
Summary
  Indicates if mouse events are meant for the edit button.
Description
  Tracking is used to by the edit button to track if mouse events should be processed by the button.
  The property is controlled through the mouse handling methods.
See Also
  TJvCustomInspectorItem.Pressed

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.StopTracking
Summary
  End the tracking of mouse events for the edit button.
Description
  StopTracking will end tracking mouse events for the edit button.
See Also
  TJvCustomInspectorItem.Pressed, TJvCustomInspectorItem.TrackButton, TJvCustomInspectorItem.Tracking

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.SortKind
Summary
  Indicates how sub items are to be sorted.
Description
  SortKind indicates the sort order for sub items. Read SortKind to determine the current order or set
  SortKind to change the sort order.
See Also
  TJvCustomInspectorItem.DisplayIndex, TJvCustomInspectorItem.OnCompare, TJvCustomInspectorItem.Sort

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Sort
Summary
  Sorts the sub items.
Description
  Sort will sort the sub items. The result depends on the SortKind property. If SortKind = iskManual,
  nothing will happen, otherwise one of the internal sorting methods will be called.
See Also
  TJvCustomInspectorItem.AlphaSort, TJvCustomInspectorItem.DataSort,
  TJvCustomInspectorItem.NaturalSort, TJvCustomInspectorItem.OnCompare,
  TJvCustomInspectorItem.SortKind

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.SetFocus
Summary
  Moves focus to the item.
Description
  SetFocus moves window focus to this item. If the item is in edit mode and the edit control can
  receive focus, the edit control will receive focus. Otherwise, the inspector will receive focus.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.SelectValue
Summary
  Selects next or previous values.
Description
  SelectValue will advance a number of items in the value list and select that value for the item. The
  Delta parameter determines the number of items to go forward or backward. SelectValue will handle
  the value list cyclic, ie. when either the beginning or the end of list has been reached,
  SelectValue will wrap around to the other side of the list.
Parameters
  Delta - Number of items to advance forwards or backwards. When Delta < 0, the list is traversed    
       backwards, when Delta > 0 the list is traversed forwards.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ScrollInView
Summary
  Scrolls the item into view.
Description
  ScrollInView scrolls the inspector in such a way the item will be visible completely. If the item
  is already visible, ScrollInView does nothing. Otherwise it will scroll until the item is
  completely visible (unless the item if to large to be shown completely, in which case it is
  scrolled in such a way that as much of the item is visible).
  
  ScrollInView is used by the inspector control to scroll the current selected item into view if it's
  in edit mode and the edit is being changed (ie. a key is pressed).

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.RowSizing
Summary
  Item's row sizing settings.
Description
  RowSizing holds the row sizing settings. These settings determine if the item can be resized or
  not, and it can be resized, what the minimum height should be and what increments are to be used.
See Also
  TJvCustomInspectorItem.Height, TJvCustomInspectorItem.HeightFactor

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Rects
Summary
  The item's painting rectangles.
Description
  Rects is an array of painting rectangles.
  
  When reading, empty rects are returned if the item has not been painted during the last paint cycle
  of the inspector. This is determined by comparing the inspector's paint generation value against
  the item's paint generation value. When they are equal, the item has been painted during the last
  paint cycle.
  
  Setting a rectangle will update the item's paint generation value to be equal to the inspector's
  paint generation value.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ReadOnly
Summary
  Indicates if item is read only.
Description
  ReadOnly indicates if the item is read only. When an item is read only, it cannot be put in edit
  mode and therefor not be changed from the inspector.
  
  Read ReadOnly to determine if the item is read-only or set ReadOnly to a new state.
  Note
  ReadOnly maps onto the iifReadonly flag in the Flags property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Pressed
Summary
  Indicates if the edit button is pressed.
Description
  Pressed is used to by the edit button to track its pressed state. The property is controlled
  through the mouse handling methods.
See Also
  TJvCustomInspectorItem.Tracking

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.QualifiedNames
Summary
  Indicates if the child items will have qualified names.
Description
  QualifiedNames indicates if the child items' names will include the item's name. This flag is
  usually used on hidden items. The child items will then be named as <B>\<Hidden name\>.\<child
  name\></B> where <B>hidden name</B> is the name of the hidden item and <B>child name</B> is the
  name of the child item.
  
  Read QualifiedNames to determine if the names of the child items will be qualified or set
  QualifiedNames to a new state.
  Note
  QualifiedNames maps onto the iifQualifiedNames flag in the Flags property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.OnGetValueList
Summary
  Event to retrieve a value list.
Description
  OnGetValueList is the event that is called when the GetValueList is called.
Parameters
  Item   - The item requesting the value list.
  Values - TStrings instance to receive the value list. If you assign objects to the values, they
  will           not be freed when the list is freed.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.OnValueChanged
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Parent
Summary
  The item's parent item.
Description
  Parent references the item's parent item. Except for the inspector root, all items will have a
  parent.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.NaturalSort
Summary
  Sorts the sub items by the order in which they are added.
Description
  NaturalSort will sort the sub items by their index into the Items array. NaturalSort is called by
  Sort when SortKind = iskNone.
See Also
  TJvCustomInspectorItem.Items, TJvCustomInspectorItem.SortKind

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.OnCompare
Summary
  Event to compare items for sorting purposes.
Description
  OnCompare is the event that is called during sorting when SortKind = iskCustom. The result of the
  function should positive if Item1 > Item2, negative if Item1 < Item2 or 0 if Item1 = Item2.
Parameters
  Item1 - First inspector item to compare.
  Item2 - Second inspector item to compare.
See Also
  TJvCustomInspectorItem.SortKind

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Name
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Multiline
Summary
  Indicates if the item is multiline.
Description
  Multiline indicates if the item uses a multiline edit.
  
  Read Multiline to determine if the item uses a multiline edit or set Multiline to a new state.
  Note
  Multiline maps onto the iifMultiLine flag in the Flags property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.MouseUp
Summary
  Handles mouse up events on the item.
Description
  MouseUp handles the mouse up events that occur on the item.
  
  The base implementation end tracking the edit button, as well as clicking the edit button.
  Descendants can override this method to provide additional functionality.
Parameters
  Button - The mouse button that is held down.
  Shift  - Indicates the shift state at the time the mouse was moved.
  X      - X-position of the mouse in the client area of the sender.
  Y      - Y-position of the mouse in the client area of the sender.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.MouseMove
Summary
  Handles mouse movements over the item.
Description
  MouseMove handles mouse movements over the item.
  
  The base implementation handles tracking the edit button as well as transferring control to the
  dropped down value list. Descendants can override this method to provide additional functionality.
Parameters
  Shift - Indicates the shift state at the time the mouse was moved.
  X     - X-position of the mouse in the client area of the sender.
  Y     - Y-position of the mouse in the client area of the sender.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.MouseDown
Summary
  Handles mouse clicks on the item.
Description
  MouseDown handles mouse clicks that occur on the item.
  
  The base implementation handles double clicks to select the next value from the value list as well
  as begin tracking the edit button. Descendants can override this method to provide additional
  functionality.
Parameters
  Button - The mouse button that is held down.
  Shift  - Indicates the shift state at the time the button was pressed.
  X      - X-position of the mouse in the client area of the sender.
  Y      - Y-position of the mouse in the client area of the sender.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ListExit
Summary
  OnExit handler for the list control.
Description
  ListExit is the OnExit handler for the list box control.
  
  The base implementation closes the list, canceling the user selection.
Parameters
  Sender - Reference to the list control.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ListBox
Summary
  Reference to the current list box control.
Description
  ListBox holds a reference to the current list box control or <B>nil</B> if the list box is not
  dropped down.
  
  ListBox is initialized by DropDown and finalized by CloseUp.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.LastPaintGeneration
Summary
  Indicates the last time this item was painted.
Description
  LastPaintGeneration holds the paint generation value of the last time the item was painted.
  
  The value is updated by a call to UpdateLastPaintGeneration which is called whenever the item's
  rectangles are changed (this usually happens just before the item is painted).
See Also
  TJvCustomInspectorItem.UpdateLastPaintGeneration

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Level
Summary
  The item level in the view tree.
Description
  Level indicates the (0-based) level at which the item is displayed. This is determined by checking
  how many parent items are shown. Because items could be hidden (like root item of the inspector),
  this is not the same as the actual tree level.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Items
Summary
  List of child items.
Description
  Items is a 0-base array of assigned child items. When items are added or deleted, the list is
  updated automatically. Use Count to find out how many items are in the list.
See Also
  TJvCustomInspectorItem.Count

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.IsCompoundColumn
Summary
  Determines if the item a column of a compound row item.
Description
  IsCompountColumn determines if the item is a column of a compound row item. If the item is a
  column, the function returns True, otherwise it returns False.
See Also
  TJvInspectorCustomCompoundItem

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateSort
Summary
  Invalidates the sort order.
Description
  InvalidateSort is called whenever the sort order might have changed. If the inspector's LockCount
  is 0, the Sort method will be called, followed by an InvalidateList. If the inspector's LockCount >
  0, its NotifySort will be called.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.IsCategory
Summary
  Determines if the item represents a category item.
Description
  IsCategory determines if the item represents a category item.
  
  If the item represents a category the method will return True, otherwise False is returned.
  
  \TJvCustomInspectorItem implements this method to always return False. There are currently two
  descendants that override this method: TJvInspectorCustomCategoryItem and TJvInspectorSetItem.
See Also
  TJvInspectorCustomCategoryItem, TJvInspectorSetItem

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateMetaData
Summary
  Signals the inspector the item's meta data has changed.
Description
  InvalidateMetaData notifies the inspector that the item's meta data has changed.
  
  Because as far the inspector is concerned, there is no difference between a data change and meta
  data change, the current implementation will call InvalidateItem. However, this might change in the
  future and descendants can override this method to take appropriate action when meta data has
  changed.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateItem
Summary
  Signals the inspector the item has changed.
Description
  InvalidateItem notifies the inspector that the item has changed appearance.
  
  In its current implementation this means the <LINK TJvCustomInspector.InvalidateItem,
  Inspector.InvalidateItem> method will be called.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateList
Summary
  Signals the inspector the list of visible items has changed.
Description
  InvalidateList notifies the inspector that the list of visible items has changed.
  
  In its current implementation this means the <LINK TJvCustomInspector.InvalidateList,
  Inspector.InvalidateList> method will be called.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Inspector
Summary
  Item's assigned inspector.
Description
  Inspector holds a reference to the inspector the item is assigned to. The property is properly
  initialized when the item is created and added to an existing item.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InitEdit
Summary
  Sets the item in edit mode.
Description
  InitEdit sets the item in edit mode, provided the item can be edited (CanEdit returns True).

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Insert
Summary
  Inserts an item.
Description
  Insert inserts a child item to this item. Under normal circumstances Insert will be called
  automatically by the \Create constructor of the child item. There is no need to call Insert in your
  application.
Parameters
  Index - 0-based index at which to insert. The new item will be inserted before the specified index.
  Item  - Item to insert.
  ##  Data  - \Data instance to insert. It is assumed the data instance already has an
  ##          item assigned to it.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.IndexOf@TJvCustomInspectorItem
<COMBINE TJvCustomInspectorItem.IndexOf@TJvCustomInspectorData>

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.IndexOf@TJvCustomInspectorData
Summary
  Locates an item or data instance.
Description
  IndexOf determines the index of an item or a data instance. If the item is not in the child list,
  IndexOf returns -1, otherwise the 0-based index is returned.
Parameters
  Item - \Item to locate.
  Data - \Data instance to locate.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Hidden
Summary
  Indicates if item is hidden.
Description
  Hidden indicates if the item is hidden. When an item is hidden, it's never visible in the
  inspector, but child items are (provided the item is <LINK TJvCustomInspectorItem.Expanded,
  expanded> and <LINK
  TJvCustomInspectorItem.Visible, visible>).
  
  Read Hidden to determine if the item is hidden or set Hidden to a new state.
  Note
  Hidden maps onto the iifHidden flag in the Flags property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.HeightFactor
Summary
  Item's sizing factor.
Description
  HeightFactor holds the number of increments specified by the RowSizing property. The Height
  property will be <B>RowSizing.MinHeight+HeightFactor* RowSizing.SizingFactor</B>.
See Also
  TJvCustomInspectorItem.Height, TJvCustomInspectorItem.RowSizing

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Height
Summary
  Item's height.
Description
  Height holds the actual item height in pixels. The inspector uses this property to determine the
  current height or set it to a new value. Because the height depends on various other properties,
  the value will be adjusted if it's not exactly the value it should be.
See Also
  TJvCustomInspectorItem.HeightFactor, TJvCustomInspectorItem.RowSizing

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.HasViewableItems
Summary
  Determines if the item has viewable sub items.
Description
  HasViewableItems determines if the item has viewable sub items. An item has viewable sub items if:
  
  * There are sub items with Visible property set to True.
  * Either the item is not hidden (Hidden set to False), or if it's hidden, it must be expanded and  
  have viewable items.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.GetValueList
Summary
  Retrieves the list of selectable values.
Description
  GetValueList retrieves the list of selectable values.
  
  GetValueList simply calls DoGetValueList. However, descendants might override GetValueList to
  bypass or augment the event handler, without overriding the DoGetValueList method, which is the
  wrapper method for the OnGetValueList event.
Parameters
  Strings - Instance of a TStrings descendant to receive the list. This list is not cleared on entry,
             although the event handler called might.
See Also
  TInspectorItemFlag.iifValueList, TJvCustomInspectorItem.DoGetValueList,
  TJvCustomInspectorItem.OnGetValueList

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.GetNextSibling
Summary
  Finds the next sibling of this item.
Description
  GetNextSibling will locate and return the next sibling of this item. If this item has no more
  siblings, the method will return <B>nil</B>.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.GetEditorText
Summary
  Retrieves the text of the editor.
Description
  GetEditorText retrieves the text of the editor (provided the item is currently being edited). The
  resulting string represents the display representation of the value before it is applied to the
  underlying data object.
See Also
  TJvCustomInspectorItem.Editing

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.FullName
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.GetDisplayParent
Summary
  Retrieves the visual parent.
Description
  GetDisplayParent retrieves the visual parent of the item. Most of the time this will be equal to the
  Parent property.
  
  If the parent item, however, has its Hidden property set to True, GetDisplayParent will go up the
  parent hierarchy until it reaches the root, or an item is found who's Hidden property is set to
  False.
  
  GetDisplayParent is used when items are added/deleted to request a resort of the display parent.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Flags
Summary
  Item flags.
Description
  Flags are the item's flags. Depending on the descendant, some of the possible flags are filtered
  out or explicitly set when setting a new value. Read Flags to determine the current flags or set
  Flags to a new value.
  Note
  Some of the flags are aliased through the properties of the item.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ExpandItems
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  AExpand - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Edit_WndProc
Summary
  Window procedure for the edit control.
Description
  Edit_WndProc is a replacement window procedure for the edit control. The handler will reroute key
  messages to the DoDropDownKeys method and if the list is dropped down, also to the list box.
Parameters
  Msg - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Expanded
Summary
  Indicates if item is expanded.
Description
  Expanded indicates if the item is expanded. Read Expanded to determine if the item is expanded or
  set
  Expanded to a new state.
  Note
  Expanded maps onto the iifExpanded flag in the Flags property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditWndPrc
Summary
  Holds the address of the official WindowProc for the edit control.
Description
  EditWndProc points to the WindowProc of the edit control as it was on creation.
  
  The edit controls WindowProc is changed to allow for drop down lists. Because the original
  WindowProc must be called, its value is saved into this property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditMouseUp
Summary
  OnMouseUp handler for the edit control.
Description
  EditMouseUp is the OnMouseUp handler for the edit control.
  
  The base implementation does nothing. Descendants can override this method to provide additional
  functionality.
Parameters
  Sender - Reference to the edit control.
  Button - The mouse button that is held down.
  Shift  - Indicates the shift state at the time the mouse was moved.
  X      - X-position of the mouse in the client area of the sender.
  Y      - Y-position of the mouse in the client area of the sender.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditMouseMove
Summary
  OnMouseMove handler for the edit control.
Description
  EditMouseMove is the OnMouseMove handler for the edit control.
  
  The base implementation does nothing. Descendants can override this method to provide additional
  functionality.
Parameters
  Sender - Reference to the edit control.
  Shift  - Indicates the shift state at the time the mouse was moved.
  X      - X-position of the mouse in the client area of the sender.
  Y      - Y-position of the mouse in the client area of the sender.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditMouseDown
Summary
  OnMouseDown handler for the edit control.
Description
  EditMouseDown is the OnMouseDown handler for the edit control.
  
  The base implementation handles double clicks to select the next value from the value list.
  Descendants can override this method to provide additional functionality.
Parameters
  Sender - Reference to the edit control.
  Button - The mouse button that is held down.
  Shift  - Indicates the shift state at the time the button was pressed.
  X      - X-position of the mouse in the client area of the sender.
  Y      - Y-position of the mouse in the client area of the sender.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditKeyDown
Summary
  OnKeyDown handler for the edit control.
Description
  EditKeyDown is the OnKeyDown handler for the edit control. On entry to the method the Sender
  property is checked. If it is not set to the inspector, the method was indeed called from the edit
  control.
  Execution is transferred to the inspector.
  
  If the call originated from the inspector (Sender is set to Inspector), the item editor keys are
  processed. This means the keys for Apply, Undo, select prior value, select next value and to invoke
  the Edit method are checked.
  
  Descendants that override this should call inherited and only process special keys if Sender is set
  to Inspector (so that the inspector had a change to process its own keys first).
Parameters
  Sender - Originator of the call. This is either the edit control or the inspector.
  Key    - The key on the keyboard. For non-alphanumeric keys, you must use WinAPI virtual key codes 
           to determine the key pressed. For more information, search for virtual key codes in the
          Win32 Developer's Reference (WIN32.HLP).
  Shift  - Indicates whether the Shift, Alt, or Ctrl keys are combined with the keystroke.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditFocused
Summary
  Determines if the edit control has focus.
Description
  EditFocused determines if the edit control has focus. If the item is in edit mode, has an edit
  control and the control has focus, the function will return True, otherwise False is returned.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Editing
Summary
  Editing state.
Description
  Editing indicates if the item is being edited. After a call to the InitEdit method, this property
  is set to True (provided the item is editable). After a call to DoneEdit the property is reset to
  False.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditCtrlDestroying
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditCtrl
Summary
  Reference to the current edit control.
Description
  EditCtrl holds a reference to the current edit control or <B>nil</B> if the value is not being
  edited.
  
  EditCtrl is initialized by InitEdit and finalized by DoneEdit.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditChange
Summary
  Handler for the OnChange event of the edit control.
Description
  EditChange is the handler for the edit controls OnChange event. The handler will apply the value of
  the edit if the AutoUpdate property is set to True.
Parameters
  Sender - Reference to the edit control.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Edit
Summary
  Non-inline editing of the item.
Description
  Edit allows for non-inline editing of the item. This usually is the case for items with the <LINK
  TInspectorItemFlag.iifEditButton, iifEditButton> flag, which often use a dialog box to change the
  value.
  
  Edit is called automatically when the button is clicked, but can be called from code if needed.
See Also
  TInspectorItemFlag.iifEditButton, TJvCustomInspectorItem.ButtonClick

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DropDownCount
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DroppedDown
Summary
  Indicates if the value list is dropped down.
Description
  DroppedDown determines if the drop down list is currently displayed. This flag is set automatically
  when the user drops down the value list and reset when the list is closed.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DropDown
Summary
  Drops down the value list.
Description
  DropDown will drop down the value list. This involves in creating a drop down list box, retrieving
  the list values, determining the maximum width of the items, determining the correct position and
  size of the list box and finally showing it on screen.
See Also
  TInspectorItemFlag.iifValueList, TJvCustomInspectorItem.CloseUp,
  TJvCustomInspectorItem.DoMeasureListItem, TJvCustomInspectorItem.DoMeasureListItemWidth,
  TJvCustomInspectorItem.DroppedDown

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DrawValue
Summary
  Draws the item value.
Description
  DrawValue draws the item's value. The default implementation either calls the DrawEditor method (if
  the item is in edit mode) or draws the current value using the current font and brush.
  
  Descendants should override this method to provide other means of painting the value. <B>Note:</B>
  the font color for values is determined by the painter object, not by the DrawValue method.
Parameters
  ACanvas - Canvas to draw on.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DrawName
Summary
  Draws the item name.
Description
  DrawName draws the item's name. The default implementation simply draws the name using the current
  font and brush.
  
  Descendants should override this method to provide other means of painting the name. <B>Note:</B>
  the fact that category names are painted bold is <B>not</B> determined by the DrawName method, but
  rather by the painter object.
Parameters
  ACanvas - Canvas to draw on.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DrawEditor
Summary
  Draws the editor.
Description
  DrawEditor draws the editor. The implementation of TJvCustomInspectorItem will check if an edit control has bee
   generated and paint the edit's image onto the inspector's canvas, including any edit buttons
  (drop-down or ellipses). This will reduce the flickering when dragging the divider bar.
  
  Descendants can override this method to paint a state / value to be used while editing. For example,
  TJvInspectorBooleanItem overrides DrawEditor to draw the image of a checkbox (no actual checkbox is
  used).
  
  DrawEditor is called by DrawValue when the item is in edit mode.
Parameters
  ACanvas - Canvas to draw on.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoneEdit
Summary
  Sets the item in browse mode.
Description
  DoneEdit sets the item in browse mode, provided the item is in edit mode. The current edit value
  can be either applied or discarded before returning to browse mode.
Parameters
  CancelEdits - Flag to indicate if changes should discarded or applied. If set to True,
  modifications                done in the editor are discarded, otherwise they are applied.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoMeasureListItemWidth
Summary
  Determines the drop down items drawing width.
Description
  DoMeasureListItemWidth determines the width of the drop down item. On entry to this method, the
  Width parameter is set to the TextWidth of the items text.
  
  By default, DoMeasureListItemWidth does not change the initial item width. Descendants can override
  this method to provide additional width calculations.
Parameters
  Control - The control in which the item is to be drawn. Use the specified controls \Canvas to base 
            the calculations on.
  Index   - Index of the list item to calculate the width for.
  Width   - The width of the specified item. On entry this parameter is set to the TextWidth of the  
           items text.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoDropDownKeys
Summary
  Key handler for the drop down list.
Description
  DoDropDownKeys handles the editor keys to handle the value list (ie. drop down or accept with
  Alt+Up/Down, accept on Enter or cancel on Escape).
  
  DoDropDownKeys is called from Edit_WndProc when the item has a value list and a key has been
  pressed.
Parameters
  Key   - Description for this parameter
  Shift - Description for this parameter
See Also
  TJvCustomInspectorItem.Edit_WndProc

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoGetValueList
Summary
  Calls the OnGetValueList event handler.
Description
  DoGetValueList will call the OnGetValueList event handler if one is assigned. If no event handler
  has been assigned, the method does nothing.
Parameters
  Strings - Instance of a TStrings descendant to receive the list. This list is not cleared on entry,
             although the event handler called might.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoMeasureListItem
Summary
  Event handler for the drop down list box
Description
  DoMeasureListItem is the OnMeasureItem event handler of the drop down list box.
  
  By default, DoMeasureListItem does not change the initial item height, which results in fixed item
  heights. Descendants can override this method to allow for variable item heights.
  
  See the VCL help on TCustomListBox.OnMeasureItem for information on the parameters.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoDrawListItem
Summary
  Event handler for the drop down list box.
Description
  DoDrawListItem is the OnDrawListItem event handler of the drop down list box. By default, the
  method will just output the items text to the Canvas.
  
  Descendants can override this method to provide owner draw list box drawing, tailored to the data
  it represents.
  
  See the VCL help on TCustomListBox.OnDrawListItem for information on the parameters.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoCompare
Summary
  Compares this item with another using the OnCompare event.
Description
  DoCompare uses the handler assigned to the OnCompare event to compare the item with a specified
  other item.
  
  If no handler is assigned, the method will return <B>0</B>. Otherwise the result of the OnCompare
  handler is returned.
Parameters
  Item - Description for this parameter
See Also
  TJvCustomInspectorItem.DataSort, TJvCustomInspectorItem.OnCompare, TJvCustomInspectorItem.SortKind

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoAfterItemCreate
Summary
  Triggers the AfterItemCreate event.
Description
  DoAfterItemCreate will call the <LINK TJvCustomInspectorItem.DoAfterItemCreate,
  Inspector.DoAfterItemCreate> method if an inspector is assigned.
See Also
  TJvCustomInspector.DoAfterItemCreate

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DisplayValue
Summary
  Holds the current display value.
Description
  DisplayValue holds the current value to be displayed. Read DisplayValue to retrieve the current
  value as it is displayed or set it to a new value.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DisplayName
Summary
  Holds the name that is displayed.
Description
  DisplayName holds the name that is displayed. Depending on the state of the QualifiedNames property
  of its parent, this name could include the name of the parent.
  
  DisplayName is initialized to the Data.Name property. If no data instance is linked to the item
  when it's created, DisplayName is initialized to an empty string.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Delete@TJvCustomInspectorData
<COMBINE TJvCustomInspectorItem.Delete@Integer>

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Delete@TJvCustomInspectorItem
<COMBINE TJvCustomInspectorItem.Delete@Integer>

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DisplayIndex
Summary
  Sorted index in the display parent.
Description
  DisplayIndex indicates the index after sorting this item is at in its display parent. Read
  DisplayIndex to determine the position at which the item is displayed or set it to a new index.
  Note
  Setting DisplayIndex to a new value will result in the display parent's SortKind property being set
  to iskManual.
See Also
  TJvCustomInspectorItem.GetDisplayParent, TJvCustomInspectorItem.Sort,
  TJvCustomInspectorItem.SortKind

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Delete@Integer
Summary
  Deletes an item.
Description
  Delete removes an item from the list of child items. The item and data layer instance will be freed
  as well.
Parameters
  Index - Index of child item to delete.
  Item  - \Item to delete.
  Data  - \Data instance to delete.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Deactivate
Summary
  Called whenever the application is deactivated.
Description
  Deactivate is called when the user switches to another application. This gives you the opportunity
  to remove any additional windows that might be open.
  
  The implementation of TJvCustomInspectorItem will close the drop down box if it's still open.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Data
Summary
  References the data layer instance.
Description
  Data is a reference to the data layer instance providing the item with its values.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DataSort
Summary
  Sorts the sub items by the result of the OnCompare event
Description
  DataSort will sort the sub items by the result of the OnCompare event. DataSort is called by Sort
  when SortKind = iskCustom.
See Also
  TJvCustomInspectorItem.OnCompare, TJvCustomInspectorItem.SortKind

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Create
Summary
  Instantiates a new inspector item.
Description
  Create instantiates a new inspector item and adds it to a parent item. You should almost never need
  to create an instance of TJvCustomInspectorItem. In addition, except for the category item, there
  should be no need to create an item directly. Usually you create a data instance which in turn will
  create an instance of a proper descendant.
Parameters
  AParent - Parent item to which the new item is to be added. This can never be <B>nil</B>
  AData   - The data instance to assign to this item. For category items, this should be <B>nil</B>.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Count
Summary
  Indicates the number of child items.
Description
  Count indicates how many child items this item has. Use the Items property to retrieve the child
  items.
See Also
  TJvCustomInspectorItem.Items

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.CloseUp
Summary
  Closes the drop down list.
Description
  CloseUp closes the drop down list. In addition if the Accept parameter is set to True, the selected
  item will be applied to the data layer.
  
  If the list is not dropped down, CloseUp will do nothing.
Parameters
  Accept - Indicates if the selected item in the list box should be applied. Set this parameter to
            True to accept the selected item, otherwise set it to False.
See Also
  TJvCustomInspectorItem.DropDown

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Clear
Summary
  Clears the list of sub items.
Description
  Clear will empty the list of sub items of this item.
See Also
  TJvCustomInspectorItem.Delete

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Category
Summary
  References the nearest category for this item.
Description
  Category references the nearest category for this item, if any. If the item is in no category,
  Category will be <B>nil</B>. Note that any item can represent a category, not just
  TJvInspectorCustomCategoryItem or descendants.
See Also
  TJvCustomInspectorItem.BaseCategory, TJvCustomInspectorItem.IsCategory

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.CanEdit
Summary
  Determines if the item can be edited.
Description
  CanEdit determines if the item can be edited and returns True if that's the case. An item can be
  edited if all of the following conditions apply:
  
  * It's not a read-only item (ReadOnly = False)
  * The inspector is not read-only (<LINK TJvCustomInspector.ReadOnly, Inspector.ReadOnly> = False)
  * The data instance has been initialized ( <LINK TJvCustomInspectorData.IsInitialized,
  Data.IsInitialized> returns True) * The data instance has a value (<LINK
  TJvCustomInspectorData.HasValue, Data.HasValue> returns
  True).
  
  Can edit is used by InitEdit before the item is set to edit mode.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ButtonClick
Summary
  Event handler for the edit buttons OnClick event.
Description
  ButtonClick handles the clicking of the edit button with the left mouse button or the Ctrl+Enter
  key combination. This leads to the calling of the Edit method.
Parameters
  Sender - A reference to the items edit control.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.BuildDisplayableList
Summary
  Retrieves a list of displayable sub items.
Description
  BuildDisplayableList will fill the specified list with sub items that have this items as their
  DisplayParent. On entry the list is not cleared.
  
  BuildDisplayableList is used by all sorting mechanism to retrieve the list of items to be sorted
  (eg.
  AlphaSort calls BuildDisplayableList to retrieve a list of displayable items, sort the list
  alphabetically by name and calls ApplyDisplayIndices to save that order).
Parameters
  ItemList - The list to retrieve the items in.
See Also
  TJvCustomInspectorItem.ApplyDisplayIndices

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.BaseCategory
Summary
  References the root category for this item.
Description
  BaseCategory references the top-level category for this item, if any. If the item is in no category,
  BaseCategory will be <B>nil</B>.
  
  The value of BaseCategory is used by the DotNET/Visual Studio paint style to determine if a
  category bar should be painted to the left of the item.
  
  Note that any item can represent a category, not just TJvInspectorCustomCategoryItem or descendants.
See Also
  TJvCustomInspectorItem.Category, TJvCustomInspectorItem.IsCategory

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.AutoUpdate
Summary
  Indicates if item auto updates the data during edit.
Description
  AutoUpdate indicates if the item automatically applies the edit value during editing. Read
  AutoUpdate to determine if the changes are updated immediately or set AutoUpdate to set/reset this
  state.
  Note
  AutoUpdate maps onto the iifAutoUpdate flag in the Flags property.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ApplyDisplayIndices
Summary
  Set the DisplayIndex of all items in the given list to their index in the list.
Description
  ApplyDisplayIndices will iterate over all items in the specified list and sets the DisplayIndex of
  these items to their index in the list.
  
  ApplyDisplayIndices is used by all sorting mechanism to change/update the sort order of sub items
  (eg. AlphaSort calls BuildDisplayableList to retrieve a list of displayable items, sort the list
  alphabetically by name and calls ApplyDisplayIndices to save that order).
Parameters
  ItemList - The list of items for which to set the DisplayIndex.
See Also
  TJvCustomInspectorItem.BuildDisplayableList

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Apply
Summary
  Applies the current edit value to the data layer.
Description
  Apply applies the current edit value to the data layer. After applying the value, it is reread from
  the data layer, the edit controls SelectAll method will be called and the undo buffer and modified
  flag cleared.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.AlphaSort
Summary
  Sorts the sub items alphabetically by their DisplayName.
Description
  AlphaSort will sort the sub items alphabetically by their DisplayName. AlphaSort is called by Sort
  when SortKind = iskName.
See Also
  TJvCustomInspectorItem.DisplayName, TJvCustomInspectorItem.SortKind

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Add
Summary
  Adds an item.
Description
  Add adds a child item to this item. Under normal circumstances Add will be called automatically by
  the Create constructor of the child item. There is no need to call Add in your application. Add uses
  Insert to do the actual insertion.
Parameters
  Item - \Item to add.
  ##  Data  - \Data instance to add. It is assumed the data instance already has an
  ##          item assigned to it.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorItem
Summary
  Base inspector item.
Description
  TJvCustomInspectorItem is the base inspector item. An item is responsible for drawing and editing
  the underlying data object, as well as managing the sub items. The base class introduces methods
  and properties to:
  
  * display and edit the data object
  * manage child items
  
  The base class itself can be used as a read only item with no underlying data object. An instance of
  this class is used as the root item for the inspector. The standard package provides various item
  classes to edit the different types of data:
  
  * Ordinals
  * Enumerations
  * Sets
  * Strings
  * Floats
  
  In addition it provides an item class that functions as a category holder. A category holder also
  has no data instance to provide values. Categories can be nested, but each item can belong to only
  one category.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.TypeInfo
Summary
  Points to the RTTI for this data object.
Description
  TypeInfo points to the RTTI for this data object. Depending on the implementation class, TypeInfo
  is preset to a default value for the data it represents. Read TypeInfo to determine the current
  RTTI pointer or set TypeInfo to another RTTI pointer.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.SetAsSet
Summary
  Set the data as a set value.
Description
  SetAsSet will try to change the underlying data as a set value. If the data can not be accessed as a
  set, an exception will be raised. Before the data is set CheckWriteAccess is called to check write
  access.
Parameters
  Buf - The value to set the data to.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.SupportsMethodPointers
Summary
  Determines if the data instance supports method pointers.
Description
  SupportsMethodPointers determines if the data instance supports method pointers. Items have to
  check this value before attempting to access the data instance with the AsMethod property.
  
  If the function returns False the data instance does not support AsMethod directly and the item
  should access the data instance using the AsString property and convert strings from/to method
  pointers.
  
  If the function returns True the data instance supports AsMethod directly.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.RemoveItem
Summary
  Detaches an item from the data instance.
Description
  RemoveItem will remove the specified item from the list of attached items for this data layer.
Parameters
  Item - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.RegisterInstance
Summary
  Registers data instance globally to the application.
Description
  RegisterInstance registers the specified data instance in an application global list of known data
  instances. This assures that multiple references to the same data are only created once. Instead of
  duplicating the data instance, a new inspector item is created.
  
  The big advantage is that if data is changed in one item, it will immediately change in the other
  item as well, even if it's in another inspector.
  
  The return value will either hold the specified instance if no other instance references the same
  physical data or a previously registered instance that references the same physical data.
Parameters
  Instance - The data instance to register.
See Also
  TJvCustomInspectorData.IsEqualReference, TJvCustomInspectorData.NotifyRemoveData

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.RefreshEdits
Summary
  Cancels and reactivates all attached inspector items.
Description
  RefreshEdits will iterate over all inspector items and if the item is in edit mode will call its
  <LINK TJvCustomInspectorItem.DoneEdit, DoneEdit> method, canceling the edit, and <LINK
  TJvCustomInspectorItem.InitEdit, InitEdit> method, to set the item back in edit mode.
  
  This will effectively refresh all items to any changes in the value, regardless where the change
  occurred and whether or not an item is being edited.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.OnValueChanged
Summary
  Notifies you whenever the value has changed.
Description
  Write an OnValueChanged event handler to react to changes in the value. Changes done through an
  inspector control are always detected and reported. For some data layers (like the
  TJvInspectorDBData data layer) you will also receive notifications for changes done outside an
  inspector control.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.NotifyRemoveData
Summary
  Called whenever a data instance is about to be removed.
Description
  NotifyRemoveData gets called whenever a data instance is about to be removed. This allows for other
  data instances that depend on the instance to be removed as well or to block the removal entirely.
Parameters
  Instance - The data instance about to be removed.
See Also
  TJvCustomInspectorData.IsEqualReference, TJvCustomInspectorData.RegisterInstance

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.New
Summary
  Instantiate a data instance and attaches an item to it.
Description
  New instantiates a new data instance with the given parameters. If the data referred to by the
  given parameters already exists, the item will be attached to that data instance, instead of
  creating a new data instance.
  
  Some classes will provide multiple New class functions to aid in proper initialization for the data
  it is to be representing. Some of the New functions might create a group of data and items.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.NewItem
Summary
  Creates a new child item for this data object.
Description
  NewItem can be used to add new items to an existing data instance. NewItem is called by New to
  create the item for a new data instance.
  
  NewItem uses the registration databases and/or the BeforeCreateItem event to determine what kind of
  item should be generated.
Parameters
  AParent - The parent to which the new item should be added.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.Items
Summary
  List of items attached to this data instance.
Description
  Items is a list of references to the inspector item this data object is assigned to. This list is
  filled automatically when new items are added to this data instance.
  
  Items is 0-based.
See Also
  TJvCustomInspectorData.ItemCount

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.Name
Summary
  The name of the data object
Description
  Name holds the name of the data object. Depending on the actual class implementation, its value is
  preset to the data it holds. The value of Name is used to display the item's name. Read Name to
  determine its current value or set Name to a new name.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.ItemRegister
Summary
  ItemRegister returns the item registration database.
Description
  ItemRegister returns the item registration database. Each data class can have its own database but
  is not required to. The function will return the first registration database it finds within the
  data class hierarchy.
  
  The root database is located in TJvCustomInspectorData and usually contains items to map specific
  RTTI pointers or type kinds to an inspector item.
  
  When an item class needs to be determined all item registration databases will be searched until a
  perfect match is found or until the root database has been searched. Whichever item has scored
  highest, automatically wins and will determine the actual item class.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.IsReadOnlyProperty
Summary
  Write here a summary (1 line)
Description
  Write here a description
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.ItemCount
Summary
  The number of items attached to this data instance.
Description
  ItemCount holds the number of items attached to this data instance. Use Items to retrieve the
  individual items.
See Also
  TJvCustomInspectorData.Items

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.IsInitialized
Summary
  Determines if the data object is properly initialized.
Description
  IsInitialized determines if the data object has been properly initialized. This is dependent on the
  data the object is representing and therefor changes for each data class. If the data is properly
  initialized, IsIntialized returns True, otherwise False is returned. If IsInitialized is False, the
  data object can not be used and the inspector will show <B>(uninitialized)</B>
See Also
  TJvCustomInspectorData.HasValue, TJvCustomInspectorData.IsAssigned

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.IsEqualReference
Summary
  Determines if the specified data instance references the same data.
Description
  IsEqualReference determines if the specified data instance references the same physical data as
  Self does.
  
  If the specified instance references the same data True will be returned, otherwise False is
  returned.
Parameters
  Ref - The data instance to check.
See Also
  TJvCustomInspectorData.NotifyRemoveData, TJvCustomInspectorData.RegisterInstance

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.IsAssigned
Summary
  Determines if the data object has been assigned a value.
Description
  IsAssigned determines if the data object has a value assigned to it. This is dependent on the data
  the object is representing and therefor changes for each data class. If a value is assigned,
  IsAssigned returns True, otherwise False is returned. If IsAssigned is False, data can not be read
  and the inspector will show <B>(unassigned)</B>.
See Also
  TJvCustomInspectorData.HasValue, TJvCustomInspectorData.IsInitialized

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.InvalidateData
Summary
  Invalidates the data.
Description
  InvalidateData will notify all attached inspectors and items the value has changed. In addition it
  will trigger the OnValueChanged events of the data instance, all attached items and all attached
  Inspectors.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.Invalidate
Summary
  Invalidates the item.
Description
  Invalidate tells the item that something in the data instance has changed since it was last
  displayed/edited. Call Invalidate whenever something in the data instance is changed (this is done
  automatically when the data is changed through one of its access properties but you might need to
  call it when the data has changed through other means).

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.InitEdits
Summary
  Sets all attached inspector items in edit mode.
Description
  InitEdits will iterate over all inspector items and call their <LINK
  TJvCustomInspectorItem.InitEdit,
  InitEdit> method, but only if the item is the currently selected item of its inspector.
See Also
  TJvCustomInspectorData.DoneEdits

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.HasValue
Summary
  Determines if the data object actually represents a value.
Description
  HasValue determines if the data object represents a value. This is dependent on the data the object
  is representing and therefor changes for each data class. If the data object represents a value,
  HasValue returns True, otherwise False is returned. If HasValue is False, data can not be read or
  written and the inspector will show <B>(no value)</B>.
See Also
  TJvCustomInspectorData.IsAssigned, TJvCustomInspectorData.IsInitialized

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.GetAsSet
Summary
  Retrieve the data as a set value.
Description
  GetAsSet will try to retrieve the underlying data as a set value. If the data can not be accessed
  as a set, an exception will be raised. Before the data is read CheckReadAccess is called to check
  read access.
Parameters
  Buf - A set variable to retrieve the value in

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.DoDataChanged
Summary
  Generates an OnValueChanged event.
Description
  DoDataChanged generates an OnValueChanged event if a handler is assigned.
See Also
  TJvCustomInspectorData.OnValueChanged

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.DoneEdits
Summary
  Sets all attached inspector items in browse mode.
Description
  DoneEdits will iterate over all inspector items and call their <LINK
  TJvCustomInspectorItem.DoneEdit,
  DoneEdit> method.
Parameters
  CancelEdits - Description for this parameter
See Also
  TJvCustomInspectorData.InitEdits

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.CheckWriteAccess
Summary
  Checks if the data can be written.
Description
  CheckWriteAccess checks if the data can be written. If the data can't be written, an exception will
  be generated.
  
  CheckWriteAccess will check if IsInitialized and HasValue (in that order) return True. If any check
  fails, an exception will be generated, stating the reason why the data can't be written.
  
  CheckWriteAccess should be called from all SetAs<I>xxxxxx</I> methods before any data is written.
  Descendants can optionally provide additional checks by overriding this method.
See Also
  TJvCustomInspectorData.CheckReadAccess, TJvCustomInspectorData.HasValue,
  TJvCustomInspectorData.IsInitialized

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsVariant
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.CheckReadAccess
Summary
  Checks if the data can be read.
Description
  CheckReadAccess checks if the data can be read. If the data can't be read, an exception will be
  generated.
  
  CheckReadAccess will check if IsInitialized, IsAssigned and HasValue (in that order) return True.
  If any check fails, an exception will be generated, stating the reason why the data can't be read.
  
  CheckReadAccess should be called from all GetAs<I>xxxxxx</I> methods before any data is read.
  Descendants can optionally provide additional checks by overriding this method.
See Also
  TJvCustomInspectorData.CheckWriteAccess, TJvCustomInspectorData.HasValue,
  TJvCustomInspectorData.IsAssigned, TJvCustomInspectorData.IsInitialized

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsString
Summary
  Access the value as a string.
Description
  AsString tries to access the data as a string value. If the data can not be accessed as a string
  (because the TypeInfo property does not point to the RTTI of a string type) an exception will occur.
  Before the data is read CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsOrdinal
Summary
  Access the value as an ordinal.
Description
  AsOrdinal tries to access the data as an ordinal value. If the data can not be accessed as an
  ordinal (because the TypeInfo property does not point to the RTTI of an ordinal type) an exception
  will occur. Before the data is read CheckReadAccess is called to check read access, before the data
  is set
  CheckWriteAccess is called to check write access.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsMethod
Summary
  Access the value as a TMethod integer.
Description
  AsMethod tries to access the data as a TMethod value. If the data can not be accessed as a TMethod
  (because the TypeInfo property does not point to the RTTI of a TMethod type) an exception will
  occur.
  Before the data is read CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsInt64
Summary
  Access the value as a 64-bit integer.
Description
  AsInt64 tries to access the data as an Int64 value. If the data can not be accessed as an Int64
  (because the TypeInfo property does not point to the RTTI of an Int64 type) an exception will occur.
  Before the data is read CheckReadAccess is called to check read access, before the data is set
  CheckWriteAccess is called to check write access.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData.AsFloat
Summary
  Access the value as a float.
Description
  AsFloat tries to access the data as an extended value. If the data can not be accessed as a float
  (because the TypeInfo property does not point to the RTTI of a floating point type) an exception
  will occur. Before the data is read CheckReadAccess is called to check read access, before the data
  is set
  CheckWriteAccess is called to check write access.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorBase
<TITLE TJvCustomInspectorBase type>
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspectorData
Summary
  Base inspector data class.
Description
  TJvCustomInspectorData is the abstract base data class. It's the interface between the inspector
  and the data it inspects. The base class provides properties and method to access the data in
  various forms (much like a TField).
  
  In addition, each data class can have its own item registration database. This will provide a way
  to register different types based on the metadata the data instance can provide.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.WantTabs
Summary
  Indicates if TABs are wanted as alternative navigation keys.
Description
  WantTabs indicates whether the TAB and Shift-TAB keys will function as a "Next" and "Prior" item
  respectively. If WantTabs is True, TAB and Shift-TAB will function as navigation keys in addition
  to the standard up and down keys.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.YToIdx
Summary
  Calculates the item index of a given Y offset.
Description
  YToIdx will determine the index of the item for the given Y-position if the items would be rendered
  in a single band. If no item is at the given position, -1 will be returned.
Parameters
  Y - Y-position to retrieve the item index of.
See Also
  TJvCustomInspector.IdxToY

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.VisibleItems
Summary
  Array of displayable items
Description
  VisibleItems is a 0-based array of displayable items. Read VisibleItems to find out which items are
  being displayed and in what order. Use VisibleCount to find out how many items are displayable.
See Also
  TJvCustomInspector.VisibleCount

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.VisibleIndex
Summary
  View index of an item.
Description
  VisibleIndex returns the index (row number) at which the item is displayed. If the item is not displayed at all (ie. the parent is not expa
  ded or visible or the item is hidden or not visible) the function will return -1. Otherwise its a
  0-based index into the VisibleItems property.
Parameters
  AItem - Description for this parameter
See Also
  TJvCustomInspector.VisibleItems

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ViewWidth
Summary
  Displayable width of the control.
Description
  ViewWidth returns the width of the controls ViewRect.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.VisibleCount
Summary
  Number of visible items.
Description
  VisibleCount indicates the number of items that are visible. This does not mean that the items are
  actually displayed at the moment, it means that that number of items are displayable using the
  current settings.
  
  Use VisibleItems to find out which items are visible.
See Also
  TJvCustomInspector.VisibleItems

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ViewHeight
Summary
  Displayable height of the control.
Description
  ViewHeight returns the height of the controls ViewRect.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ViewRect
Summary
  Displayable rectangle of the control.
Description
  ViewRect returns the rectangle in which items can be rendered. The current implementation returns
  ClientRect. Descendants could override this method to return a smaller rectangle if additional
  borders are needed.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.UpdateScrollBars
Summary
  Updates the scrollbar settings.
Description
  UpdateScrollBars will update the scrollbar settings to reflect the current control state.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.UseBands
Summary
  Indicates if inspector bands are used.
Description
  UseBands indicates if inspector bands are used. Bands are resizable inspector columns, where each
  column will contain a number of items. The number of bands and items per band are calculated on
  each resize.
  
  When using bands (UseBands is True), the inspector will never show a vertical scroll bar, but a
  horizontal scroll bar can appear if more bands are shown than actually fit in the control.
  
  When not using bands (UseBands is False), the inspector will never show a horizontal scroll bar,
  but a vertical scroll bar may appear if more items are shown than actually fit in the control.
See Also
  TJvCustomInspector.BandWidth

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Style
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.TopIndex
Summary
  Index of the first displayed item.
Description
  TopIndex indicates which item is displayed first (the item in the top left corner). Read TopIndex
  to find out which item is in the top left corner of the view or set it to a new index to scroll the
  view.
  Note
  Although you can change this value, it will be adjusted to display the selected item as soon as the
  user presses a key.
See Also
  TJvCustomInspector.Selected, TJvCustomInspector.SelectedIndex, TJvCustomInspector.VisibleItems

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.SortNotificationList
Summary
  List of items that need to be resorted.
Description
  SortNotificationList holds a list of items that need to be resorted when updates are no longer
  blocked. An item is added to this list when NotifySort is called, updates are blocked, and the item
  isn't already in the list. When EndUpdate decreases the LockCount to 0, the items will be resorted,
  after which the VisibleItems array will be rebuild.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Selecting
Summary
  Tracks if the user is selecting items.
Description
  Selecting indicates if the user is selecting items with the mouse. If the user presses the left
  mouse button and moves the mouse, the item where mouse moves over will be selected, until the user
  releases the left mouse button.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.SelectedIndex
Summary
  Index of selected item.
Description
  SelectedIndex indicates which item in the VisibleItems array is currently selected. If no item is
  selected, -1 will be returned, otherwise the 0-based index into the VisibleItems property is
  returned.
See Also
  TJvCustomInspector.Selected, TJvCustomInspector.VisibleItems

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Selected
Summary
  Reference to the selected item
Description
  Selected is the current selected item. If no item is selected, <B>nil</B> will be returned. Reading
  Selected is the same as:
  <CODE>
  if SelectedIndex > -1 then
    Selected := VisibleItems[SelectedIndex]
  else
    Selected := nil; </CODE>
  When you set Selected to a new item, and that item is not visible, Selected and SelectedIndex will
  not be changed.
See Also
  TJvCustomInspector.SelectedIndex, TJvCustomInspector.VisibleItems

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ScrollFactorV
Summary
  Determines the multiply/division factor for vertical scrollbar settings.
Description
  ScrollfactorV determines the multiplication/division factor for setting the vertical scrollbar.
  
  Because the windows scrollbar can only handle 16 bit values for thumbtracking messages, all values
  should be within -32768 .. 32767. The ImageHeight could be larger than that. To circumvent that, a
  factor is determined if the ImageHeight is to large such that the ImageHeight can be expressed as
  32767.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.SaveValues
Summary
  Refreshes the items of the inspector.
Description
  SaveValues will refresh all items of the inspector. If any item is being edited, the value of the
  editor is applied to the data instance.
  
  Use SaveValues if you know one or more of the items in the inspector have been modified outside the
  inspector (e.g. you changed a property from code and this property is displayed in the inspector)
  but you don't want to lose the data being edited.
See Also
  TJvCustomInspector.RefreshValues

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.RowSizingItem
Summary
  Holds the item being resized.
Description
  RowSizingItem indicates which item is being resized by the user. RowSizingItem is used internally
  to find out which row is being resized, and gives valid results only if RowSizing is True.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.RowSizing
Summary
  Tracks if a row is being resized.
Description
  RowSizing indicates if the user is resizing an item with the mouse. If RowSizing is set to True,
  mouse movements will be interpreted as changing the height of the item indicated by RowSizingItem.
  If
  RowSizing is False, mouse movements are not resizing an item (however, RowSizingItem might still
  point to the last resized item).
See Also
  TJvCustomInspector.BandSizing, TJvCustomInspector.BandSizingBand, TJvCustomInspector.RowSizingItem

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.RemoveNotifySort
Summary
  Removes an item from the sort request list.
Description
  RemoveNotifySort removes the specified item from the list of sort requests. If the item does not
  exist, RemoveNotifySort does nothing.
  Note
  This method is usually called by the destructor of an item.
Parameters
  Item - Description for this parameter
See Also
  TJvCustomInspector.NotifySort

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Root
Summary
  References the root item.
Description
  Root is a reference to the inspector's root item. The root item is a hidden item that functions as
  a place holder for the actual items to be inspected.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.RelativeDivider
Summary
  Determines whether the divider bar is a percentage of the width or an absolute position.
Description
  RelativeDivider determines whether the value represented by the Divider property is an absolute
  position is pixels or a percentage of either the <LINK BandWidth, width of a band> (UseBands set to
  True) or the control (UseBands set to False).
  
  When RelativeDivider is set to True, the Divider property is percentage and the divider bar will
  adjust when the width of the band or control changes. The DividerAbs property will hold the
  calculated absolute position in pixels.
  
  When RelativeDivider is set to False, the Divider property is an absolute position in pixels and
  the divider bar will remain at it's set position when the band or control is resized (although the
  bar will be adjusted if the minimum width to the right of bar becomes to small). The DividerAbs
  property
  will be the same as the Divider property.
See Also
  TJvCustomInspector.BandWidth, TJvCustomInspector.Divider, TJvCustomInspector.UseBands

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.RefreshValues
Summary
  Refreshes the items of the inspector.
Description
  RefreshValues will refresh all items of the inspector. If any item is being edited, the edit
  operation is canceled (losing any change not yet committed) and reinitialized.
  
  Use RefreshValues if you know one or more of the items in the inspector have been modified outside
  the inspector (e.g. you changed a property from code and this property is displayed in the
  inspector).
See Also
  TJvCustomInspector.SaveValues

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ReadOnly
Summary
  Indicates whether the inspector is in read-only mode.
Description
  ReadOnly indicates the read-only state of the inspector. When ReadOnly is True, the inspector is
  locked and items can not be edited. When ReadOnly is False, items can be edited (provided their
  ReadOnly property is True).
See Also
  TJvCustomInspectorItem.ReadOnly

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.RebuildVisible
Summary
  Rebuilds the VisibleItems list.
Description
  RebuildVisible will clear the VisibleItems array and fill it up with the currently visible items.
  It will not change the Selected property, unless the previously selected item is no longer visible,
  in which case the Selected property will be set to <B>nil</B>.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.PaintGeneration
Summary
  Counter of paints issued.
Description
  PaintGeneration holds the number of times the inspector has rendered its image. It's primary goal
  is to keep track which items have been painted during the last iteration. For that purpose, each
  item has a LastPaintGeneration property. If the two values are equal, the item has been displayed
  during the last render.
See Also
  TJvCustomInspectorItem.LastPaintGeneration

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Painter
Summary
  Reference to the painter object.
Description
  Painter is a reference to the painter object currently assigned. Painter are responsible for
  painting the control in different styles. By assigning a different painter to the inspector you can
  switch the viewing style.
  
  Read Painter to find out which painter is currently used to render the inspector or set it to
  another painter to change styles.
See Also
  TJvInspectorPainter

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnItemValueError
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender       - Description for this parameter
  Item         - Description for this parameter
  ExceptObject - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Paint
Summary
  Will paint the inspector control.
Description
  Paint will increase the PaintGeneration counter and tell the Painter to paint the image.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnItemValueChanged
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnItemValueChanging
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender      - Description for this parameter
  Item        - Description for this parameter
  NewValue    - Description for this parameter
  AllowChange - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnEditorKeyUp
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnEditorMouseDown
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender - Description for this parameter
  Item   - Description for this parameter
  Button - Description for this parameter
  Shift  - Description for this parameter
  X      - Description for this parameter
  Y      - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnItemDoubleClicked
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnItemEdit
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender     - Description for this parameter
  Item       - Description for this parameter
  DisplayStr - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnItemSelected
Summary
  Event fired after an item is selected.
Description
  The OnItemSelected event is fired when a new item is selected.
Parameters
  Sender - The inspector that fired the event.
See Also
  TJvCustomInspector.BeforeSelection

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnEditorKeyDown
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnEditorKeyPress
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnDataValueChanged
Summary
  Event fired after the data value is changed.
Description
  \Write an OnDataValueChanged to perform additional actions when the value of a data instance is
  changed.
Parameters
  Sender - The inspector that fired the event.
  \Data  - Reference to the data instance who's value has changed.
See Also
  TJvCustomInspector.OnItemValueChanged

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.OnEditorContextPopup
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.NotifySort
Summary
  Places an item into the sort request list.
Description
  NotifySort adds the specified item to the list of sort requests if it's not in the list already and
  LockCount <> 0. If LockCount is 0, the item's Sort method is called.
  
  The sort requests are handled when EndUpdate is called and the lock count reaches 0.
Parameters
  Item - Description for this parameter
See Also
  TJvCustomInspector.BeginUpdate, TJvCustomInspector.EndUpdate, TJvCustomInspector.RemoveNotifySort,
  TJvCustomInspector.SortNotificationList, TJvCustomInspectorItem.Sort

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.NeedRedraw
Summary
  Indicates if the control should redraw all items.
Description
  NeedRedraw indicates if the items should be redrawn when EndUpdate is called. NeedRedraw is set by
  InvalidateItem when update are blocked by a call to BeginUpdate.
See Also
  TJvCustomInspector.BeginUpdate, TJvCustomInspector.EndUpdate, TJvCustomInspector.NeedRebuild

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.NeedRebuild
Summary
  Indicates if the visible item list needs to be rebuild.
Description
  NeedRebuild indicates if the visible item list needs to be rebuild. NeedRebuild is set when
  InvalidateList is called and updates are blocked by a call to BeginUpdate. As soon as EndUpdate is
  called, the list will be rebuild.
See Also
  TJvCustomInspector.BeginUpdate, TJvCustomInspector.EndUpdate, TJvCustomInspector.NeedRedraw,
  TJvCustomInspector.RebuildVisible

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.LockCount
Summary
  Number of BeginUpdates not ended.
Description
  LockCount is the number of BeginUpdates that have been issued but have not been matched with an
  EndUpdate.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ItemHeight
Summary
  Standard item height.
Description
  ItemHeight is the standard items height. Although each item can have its own height, this property
  determines the default height for all non-resized items. In addition, this value could be used to
  determine the resize increments of an item.
  
  When you change this property, all non-resizable items are resized accordingly. In addition the
  items that resize in increments of ItemHeight or need a minimum height of ItemHeight are adjusted
  as well.
See Also
  TJvCustomInspector.InvalidateHeight

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.InvalidateList
Summary
  Signals that the list of visible items should be redetermined.
Description
  InvalidateList will make sure that the list of visible items will be rebuild before a new redraw
  will take place. If LockCount is non-zero, NeedRebuild will be set, otherwise RebuildVisible will
  be called.
  
  InvalidateList is called whenever an item is made visible or invisible (either through the items
  Visible or Hidden property, or because a parent item is expanded or collapsed).

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.InvalidateItem
Summary
  Signals that an item has been changed and the image should be redrawn.
Description
  InvalidateItem will make sure that the inspector will redraw the items. If LockCount is non-zero,
  NeedRedraw will be set, otherwise the scrollbar settings will be update, which in turn will lead to
  a repaint.
  
  InvalidateItem is called whenever an item has changed a visible property (e.g. its value, name or
  height).

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.InvalidateHeight
Summary
  Invalidates the cached virtual height of the inspector.
Description
  InvalidateHeight will clear the cached virtual height of the inspector. This will lead to a new
  size determination of the inspector image.
  
  InvalidateHeight is automatically called when items are resized (either through the user interface
  or
  in code) or the ItemHeight property of the inspector is changed.
See Also
  TJvCustomInspector.ItemHeight

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.InspectObject
Summary
  Inspects the specified object.
Description
  Use InspectObject to specify a single object. The value of InspectObject is <B>not</B> reset when
  the items of the inspector is manually modified (e.g. after clearing the inspector or manually
  adding
  items).
  
  Setting InspectObject to a new value will clear the inspector and add all published properties of
  the object to the root of the inspector.
  
  Read InspectObject to determine the instance last inspected or set it to a new instance.
See Also
  TJvCustomInspector.AddComponent

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ImageHeight
Summary
  Current image height.
Description
  ImageHeight returns the total height of all visible inspector items. This is the height that would
  be necessary to render all currently displayable items in a single band, even if the Inspector is
  in bands mode.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.IncPaintGeneration
Summary
  Increases the paint generation counter.
Description
  IncPaintGeneration increases the PaintGeneration property by 1. You should never need to call this
  method, as it is called automatically by the painting methods.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.IdxToY
Summary
  Calculates the Y offset of a given item index
Description
  IdxToY will determine the top of the item rectangle if the items would be rendered in a single band.
Parameters
  Index - Item index to retrieve the Y position for.
See Also
  TJvCustomInspector.YToIdx

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.HandleBandResize
Summary
  Resizes the band.
Description
  HandleBandResize will calculate the size of the band that is currently being resized.
  HandleBandResize is called when the user is resizing the bands with the mouse.
Parameters
  X - current X-position of the mouse

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.GetButtonRect
Summary
  Retrieves the expand/collapse button rectangle.
Description
  GetButtonRect retrieves the items expand/collapse button rectangle. If the item has no
  expand/collapse button, an empty rectangle will be returned.
Parameters
  ItemIndex - Index into the VisibleItems list of the item to retrieve the button rectangle for.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.GetLastFullVisible
Summary
  Retrieves the index of the last item that is completely visible.
Description
  GetLastFullVisible retrieves the index of the last completely visible item. GetLastFullVisible is
  used for navigational purposes. When scrolling a page down, the selection is first moved to the
  last completely visible item or, if it's already selected, scrolls an entire page.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.GetBandFor
Summary
  Determines in which band a given item is displayed.
Description
  GetBandFor retrieves the band index in which the given item is displayed or -1 if it's not
  displayed at all.
  
  GetBandFor is used in determining the scrollbar settings for a horizontal scrollbar and is called
  from UpdateScrollBars.
Parameters
  ItemIdx - Index into the VisibleItems list of the item to retrieve the band index for.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.FocusedItem
Summary
  The currently focused item.
Description
  FocusedItem returns the item that has input focus. Usually this will be same as Selected, unless
  the selected item is a compound item, in which case it will be set to the item of the currently
  selected column.
See Also
  TJvCustomInspector.Selected, TJvInspectorCustomCompoundItem,
  TJvInspectorCustomCompoundItem.SelectedColumn

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Focused
Summary
  Determines whether the control has input focus.
Description
  Use the Focused method to see if the control is the active control. When Focused returns True, the
  control has the input focus. If Focused returns False, the user cannot interact with the control.
  
  Because the inspector might have an edit control that has focus, Focused is reimplemented to check
  the active edit control as well as the inspector.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ExpandButton
Summary
  Bitmap to use as an expand button.
Description
  ExpandButton holds the TBitmap to use as an expand button for an item. By default it uses the image
  used in Borlands Object Inspector.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.EndUpdate
Summary
  Reenables screen repainting that was turned off with the BeginUpdate method.
Description
  Call EndUpdate after completing changes to the inspector that were begun with a call to the
  BeginUpdate method. When every call to BeginUpdate is matched by a subsequent call to EndUpdate,
  the inspector view image updates to reflect all changes that occurred while repaints were disabled.
See Also
  TJvCustomInspector.BeginUpdate

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DoItemSelected
Summary
  Executes the event handler assigned to OnItemSelected.
Description
  DoItemSelected calls the event handler assigned to OnItemSelected, if any.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DraggingDivider
Summary
  Flag to indicate the dragging of the divider bar.
Description
  DraggingDivider is an internal flag to indicate if the user is dragging the divider bar with the
  mouse.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DoBeforeItemSelect
Summary
  Executes the event handler assigned to BeforeSelection.
Description
  DoBeforeItemSelect calls the event handler assigned to BeforeSelection, if any. Returns True if the
  selection is allowed or no handler was assigned to BeforeSelection.
Parameters
  NewItem - Item to be selected.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DoAfterItemCreate
Summary
  Executes the event handler assigned to AfterItemCreate.
Description
  DoAfterItemCreate calls the event handler assigned to AfterItemCreate, if any.
Parameters
  \Item - The item just created.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DoBeforeItemCreate
Summary
  Executes the event handler assigned to BeforeItemCreate.
Description
  DoBeforeItemCreate calls the event handler assigned to BeforeItemCreate, if any.
Parameters
  \Data     - The data instance just created.
  ItemClass - class of the item to be created for this data instance.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DividerDragBandX
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DoAfterDataCreate
Summary
  Executes the event handler assigned to AfterDataCreate.
Description
  DoAfterDataCreate calls the event handler assigned to AfterDataCreate, if any.
Parameters
  \Data - The data instance just created.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.DividerAbs
Summary
  Absolute divider position.
Description
  DividerAbs is the X-position (in actual pixels) of the divider between the name and the value part.
  
  Depending on the state of RelativeDivider, DividerAbs is either identical to Divider
  (RelativeDivider set to False) or is the calculated X-offset (RelativeDivider set to True) based on
  the value of
  Divider and the BandWidth (UseBand set to True) or ClientWidth (UseBands set to False).
  
  Read DividerAbs to determine the X-position in pixels of the Divider bar or set it to a new
  position.
See Also
  TJvCustomInspector.BandWidth, TJvCustomInspector.Divider, TJvCustomInspector.RelativeDivider,
  TJvCustomInspector.UseBands

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Divider
Summary
  Divider position.
Description
  Divider is the position of the divider between the name and the value part.
  
  Depending on the value of RelativeDivider, this is either an actual position in pixels
  (RelativeDivider set to False) or the percentage (RelativeDivider set to True) of the width of a
  band (UseBands set to True) or the width of the inspector (UseBands set to False).
  
  To obtain or modify the actual position is pixels, regardless of the state of RelativeDivider you
  can read or set DividerAbs.
  
  Read Divider to determine its current location or set it to a new position.
See Also
  TJvCustomInspector.BandWidth, TJvCustomInspector.DividerAbs, TJvCustomInspector.RelativeDivider,
  TJvCustomInspector.UseBands

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.CollapseButton
Summary
  Bitmap to use as a collapse button.
Description
  CollapseButton holds the TBitmap to use as a collapse button for an item. By default it uses the
  image used in Borlands Object Inspector.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.CalcItemRect
Summary
  Determines the displaying rectangle for the given item.
Description
  CalcItemRect determines the displaying rectangle of the given item. Since this value is stored in
  the item itself, CalcItemRect can be replaced with:
  <CODE>
    ItemRect := Item.Rects[iprItem]; </CODE>
Parameters
  Item - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.Clear
Summary
  Clears the inspector.
Description
  Clear will remove all items from the inspector. Clear is implemented as:
  <CODE>
  BeginUpdate;
  Root.Clear;
  EndUpdate; </CODE>
See Also
  TJvCustomInspectorItem.Clear

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.CalcItemIndex
Summary
  Determines which item is at the specified position.
Description
  CalcItemIndex determines which item is displayed at the given position. In addition it will return
  the rectangle for that item. If the specified position has no item, the function will return -1 and
  the Rect parameter will be undefined.
Parameters
  X    - X-position to check
  Y    - Y-position to check
  Rect - Rectangle of item found. If no item was found, Rect will be undefined.
Return value
  Index of the item found at the given position or -1 if no item is displayed at the given position.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BeginUpdate
Summary
  Prevents updating of the inspector until the EndUpdate method is called.
Description
  Call BeginUpdate before making multiple changes to the inspector. When all changes are complete,
  call
  EndUpdate so that the changes can be reflected on screen. BeginUpdate and EndUpdate prevent
  excessive redraws and speed processing time when items are added, deleted, inserted or otherwise
  modified.
See Also
  TJvCustomInspector.EndUpdate

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.CalcImageHeight
Summary
  Determines the total size of the visible items.
Description
  CalcImageHeight determines the total size of the visible items. This means that the height will be
  calculated as if there are no bands (this value will be returned) and the number of bands and band
  starts are calculated.
  
  CalcImageHeight is called when you read the ImageHeight property as well as by the rendering
  methods.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BeforeSelection
Summary
  Event fired before an item is selected.
Description
  The BeforeSelection event is called just before an item is selected.
Parameters
  Sender  - The inspector that fired the event
  NewItem - The item about to be selected.
  Allow   - When set to True, the selection will happen, otherwise the selection is aborted.
See Also
  TJvCustomInspector.OnItemSelected

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BeforeItemCreate
Summary
  Event fired before an item is constructed.
Description
  The BeforeItemCreate event is called after the data has been constructed and right before the item
  is constructed. The Data parameter references the Data instance just created. The ItemClass
  parameter can be set to an item class or <B>nil</B> to prevent the item from being created.
Parameters
  Sender    - The inspector that fired the event
  Data      - A reference to the data instance
  ItemClass - The item to be constructed for this data object.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BandStarts
Summary
  A list of items that start a new band.
Description
  BandStarts is a list containing the items that are displayed on a new band. The list is used
  internally by the control for rendering and navigation.

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BandWidth
Summary
  Width of a band.
Description
  BandWidth holds the width of a band. Read BandWith to determine the current width of a band or set
  it to a new value.
See Also
  TJvCustomInspector.UseBands

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BeforeEdit
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender - Description for this parameter
  Item   - Description for this parameter
  Edit   - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BandSizingBand
Summary
  Indicates which band is being resized.
Description
  BandSizingBand indicates which band is being resized by the user. It's used internally during band
  resizing.
See Also
  TJvCustomInspector.BandSizing

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.AutoDropDown
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.BandSizing
Summary
  Internal band resizing flag.
Description
  BandSizing indicates whether the control is resizing band on mouse movements. The flag is used
  internally to keep track of band resizing.
See Also
  TJvCustomInspector.BandSizingBand

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.AfterItemCreate
Summary
  Event called when the item has been created.
Description
  The AfterItemCreate event is called after the item has been constructed.
Parameters
  Item   - The item that has just been created.
  Sender - Inspector that fired the event

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.AutoComplete
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.AfterDataCreate
Summary
  Event called when the data instance has been created
Description
  The AfterDataCreate event is called right after the data instance has been created.
Parameters
  Sender - The inspector control that fired the event
  Data   - The data instance belonging to the event

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.AddComponent
Summary
  Adds an object to the inspector.
Description
  AddComponent will add the published properties of an object to the inspector.
  
  If the CategoryName parameter is an empty string, the properties are added to the root of the
  inspector, otherwise a new category is created and the properties are added to that category.
  
  The Expanded parameter is only used if CategoryName is a non-empty string and determines if the new
  category should be expanded.
Parameters
  Instance     - Instance to be added to the inspector.
  CategoryName - Name of the category to create. If no name is given, no category will be created and
                  the object will be added to the root.
  Expanded     - Specifies whether the newly created category should be expanded when the object is  
                added. When set to True the category will be expanded. If no category is created
                  (because CategoryName is an empty string) the parameter will be ignored.
See Also
  TJvInspectorPropData.New

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector.ActivePainter
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TInspectorValueChangingEvent
<TITLE TInspectorValueChangingEvent type> <COMBINE TJvCustomInspector.OnItemValueChanging>

----------------------------------------------------------------------------------------------------
@@TInspectorValueErrorEvent
<TITLE TInspectorValueErrorEvent type> <COMBINE TJvCustomInspector.OnItemValueError>

----------------------------------------------------------------------------------------------------
@@TJvCustomInspector
Summary
  Base inspector control.
Description
  TJvCustomInspector is the base inspector control. You should never create an instance of this
  class, but rather one of the descendants.

----------------------------------------------------------------------------------------------------
@@TInspectorTMethodFlag.imfKeepFirstInstanceAsFirst
Indicates whether the first instance in the list should stay the first after sorting.

----------------------------------------------------------------------------------------------------
@@TInspectorTMethodFlags
<TITLE TInspectorTMethodFlags type> <COMBINE TInspectorTMethodFlag>

----------------------------------------------------------------------------------------------------
@@TInspectorSetFlag.isfRenderAsCategory
Indicate that the main item should be rendered and treated as a category item. Setting this flag will always create a boolean item for each member of the set, regardless of the isfCreateMemberItems flag.

----------------------------------------------------------------------------------------------------
@@TInspectorSetFlags
<TITLE TInspectorSetFlags type> <COMBINE TInspectorSetFlag>

----------------------------------------------------------------------------------------------------
@@TInspectorTMethodFlag
<TITLE TInspectorTMethodFlag type>
Summary
  Flags used for the TMethod (event) type inspector items.
Description
  TInspectorTMethodFlag are the available flags for TMethod (event handlers) type inspector item.

----------------------------------------------------------------------------------------------------
@@TInspectorTMethodFlag.imfShowInstanceNames
Indicates if instance names should be displayed.

----------------------------------------------------------------------------------------------------
@@TInspectorTMethodFlag.imfNoShowFirstInstanceName
Indicates whether the name of the first instance in the list should be suppressed.

----------------------------------------------------------------------------------------------------
@@TInspectorTMethodFlag.imfSortMethods
Indicates whether event handlers are sorted alphabetically within their owner.

----------------------------------------------------------------------------------------------------
@@TInspectorTMethodFlag.imfSortInstances
Indicates whether instances are sorted alphabetically.

----------------------------------------------------------------------------------------------------
@@TInspectorSetFlag.isfEditString
Indicates the string representing the set value can be edited.

----------------------------------------------------------------------------------------------------
@@TInspectorSetFlag.isfCreateMemberItems
Indicates that for each item in the set, a member item is created as a boolean value.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprUser6
Sixth user rectangle. Usage depends on the individual item types.

----------------------------------------------------------------------------------------------------
@@TInspectorSetFlag
<TITLE TInspectorSetFlag type>
Summary
  Set item flags.
Description
  TInspectorSetFlag holds the flags for set inspector item.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprUser5
Fifth user rectangle. Usage depends on the individual item types.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprUser2
Second user rectangle. Usage depends on the individual item types.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprUser3
Third user rectangle. Usage depends on the individual item types.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprUser4
Forth user rectangle. Usage depends on the individual item types.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprUser1
First user rectangle. Usage depends on the individual item types.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprEditButton
The rectangle for the drop-down or ellipses button. This rectangle will be at the right margin of the iprValueArea. The rectangle will be empty if the item is not in edit mode or if the item doesn't require a button.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprEditValue
The rectangle for the editor. This rectangle will fall in the iprValueArea. If the item has an edit button, the rectangle will have a right margin 1 left of the button's left rectangle. The rectangle will be empty if the item is not in edit mode.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprValue
The rectangle for the value. This rectangle will fall in the iprValueArea rectangle.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprName
The rectangle for the name. This rectangle will fall in the iprNameArea rectangle.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprValueArea
The rectangle the value or editor and button are to be painted in. Note that this area might not be filled completely.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprNameArea
The rectangle the name is to be painted in. Note that this area might not be filled completely.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprBtnDstRect
The rectangle within the button area where the button is to be drawn. The rectangle could be empty if no button is to be painted.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprButtonArea
The rectangle that contains the button. Note that this area might not be completely filled by the button.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprBtnSrcRect
The rectangle in the button image that should be painted. The rectangle could be empty if no button is to be painted.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect.iprItem
Item rectangle. This rectangle holds the rectangle that encompasses the entire item.

----------------------------------------------------------------------------------------------------
@@TInspectorPaintRect
<TITLE TInspectorPaintRect type>
Summary
  Specific paint rectangle
Description
  TInspectorPaintRect enumerates the different painting rectangles for an item. The painter object
  will set these rectangles for each item when it gets painted.

----------------------------------------------------------------------------------------------------
@@TInspectorItemSortKind.iskCustom
Items are sorted using an OnCompare event to determine the order.

----------------------------------------------------------------------------------------------------
@@TInspectorItemSortKind.iskManual
Items are sorted by their DisplayIndex.

----------------------------------------------------------------------------------------------------
@@TInspectorItemSortKind.iskNone
No sort order. All items are displayed in the order they are added.

----------------------------------------------------------------------------------------------------
@@TInspectorItemSortKind.iskName
Items are sorted alphabetically by their DisplayName.

----------------------------------------------------------------------------------------------------
@@TInspectorItemSortCompare
<TITLE TInspectorItemSortCompare type> <COMBINE TJvCustomInspectorItem.OnCompare>

----------------------------------------------------------------------------------------------------
@@TInspectorItemSortKind
<TITLE TInspectorItemSortKind type>
Summary
  The sort types.
Description
  The TInspectorItemSortKind type defines the various sort types available. This type is used by the
  SortKind property of an inspector item.

----------------------------------------------------------------------------------------------------
@@TInspectorItemGetValueListEvent
<TITLE TInspectorItemGetValueListEvent type> <COMBINE TJvCustomInspectorItem.OnGetValueList>

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlags
<TITLE TInspectorItemFlags type> <COMBINE TInspectorItemFlag>

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifOwnerDrawListMaxHeight
Description for iifOwnerDrawListMaxHeight

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifEditFixed
When specified locks the edit control. This flag is useful when you need an edit button to do the editing but the value should not be directly editable.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifEditButton
The item uses an edit button to perform additional editing functionality.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifOwnerDrawListFixed
The pick list should be owner drawn with a fixed height. This flag can only be used when iifValueList is also specified. In addition, this flag and iifOwnerDrawListVariable are mutually exclusive (this is handled by the item itself).

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifOwnerDrawListVariable
The pick list should be owner drawn with a variable height. This flag can only be used when iifValueList is also specified. In addition, this flag and iifOwnerDrawListFixed are mutually exclusive (this is handled by the item itself).

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifAllowNonListValues
The item can accept any value, including values that are not in the pick list. This value is only of use when iifValueList is also specified.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifValueList
Indicates whether or not the item uses a value list to edit the item (ie. uses a combo box to edit the value).

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifMultiLine
Indicates whether or not the item is a multiline edit.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifAutoUpdate
Any change to the edit control is immediately applied to the underlying data object.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifExpanded
Indicates the expanded state of the item. The item's Expanded property maps directly onto this flag.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifVisible
Indicates whether or not the item is visible. The Visible property maps directly onto this flags.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifQualifiedNames
Indicates whether or not the sub-items will use qualified names (ie. ParentName.ChildName).

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifHidden
Indicates whether the item is hidden. Hidden means that the item itself is never shown, but its sub items can be, depending on the iifExpanded and iifVisible flags.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag.iifReadonly
Indicates whether or not the item is read-only.

----------------------------------------------------------------------------------------------------
@@TInspectorItemFlag
<TITLE TInspectorItemFlag type>
Summary
  Item flags
Description
  TInspectorItemFlag is the flag type for inspector items.

----------------------------------------------------------------------------------------------------
@@TInspectorItemEvent
<TITLE TInspectorItemEvent type>
Summary
  Write here a summary (1 line)
Description
  This type is used by (for reference): TJvCustomInspector.AfterItemCreate
  TJvCustomInspector.OnItemValueChanged
Parameters
  Sender - Description for this parameter
  Item   - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TInspectorItemBeforeSelectEvent
<TITLE TInspectorItemBeforeSelectEvent type> <COMBINE TJvCustomInspector.BeforeSelection>

----------------------------------------------------------------------------------------------------
@@TInspectorItemBeforeCreateEvent
<TITLE TInspectorItemBeforeCreateEvent type> <COMBINE TJvCustomInspector.BeforeItemCreate>

----------------------------------------------------------------------------------------------------
@@TInspectorDataEvent
<TITLE TInspectorDataEvent type>
Summary
  Write here a summary (1 line)
Description
  This type is used by (for reference): TJvCustomInspector.AfterDataCreate
  TJvCustomInspector.OnDataValueChanged
Parameters
  Sender - Description for this parameter
  Data   - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TInspectorCompoundItemFlags
<TITLE TInspectorCompoundItemFlags type> <COMBINE TInspectorCompoundItemFlag>

----------------------------------------------------------------------------------------------------
@@TInspectorCompoundItemFlag.icifSingleNameUseFirstCol
Description for icifSingleNameUseFirstCol

----------------------------------------------------------------------------------------------------
@@TInspectorCompoundItemFlag.icifSingleName
Indicates the item is represented by a single name.
TInspectorCompoundItemFlag.icifSingleNameUseFirstCol Indicates the item's name in single name mode is obtained from the DisplayName of the item associated with the first column.

----------------------------------------------------------------------------------------------------
@@TInspectorCompoundItemFlag
<TITLE TInspectorCompoundItemFlag type>
Summary
  Flags used for the compound inspector items.
Description
  TInspectorCompoundItemFlag are the available flags for compound items.

----------------------------------------------------------------------------------------------------
@@TInspectorComponentFlag.icfSortOwners
Indicates whether owners are sorted alphabetically.

----------------------------------------------------------------------------------------------------
@@TInspectorComponentFlag.icfKeepFirstOwnerAsFirst
Indicates whether the first owner in the list should stay the first after sorting.

----------------------------------------------------------------------------------------------------
@@TInspectorComponentFlags
<TITLE TInspectorComponentFlags type> <COMBINE TInspectorComponentFlag>

----------------------------------------------------------------------------------------------------
@@TInspectorComponentFlag.icfSortComponents
Indicates whether components are sorted alphabetically withing their owner.

----------------------------------------------------------------------------------------------------
@@TInspectorComponentFlag.icfShowOwnerNames
Indicates if owner names should be displayed.

----------------------------------------------------------------------------------------------------
@@TInspectorComponentFlag.icfNoShowFirstOwnerName
Indicates whether the name of the first owner in the list should be suppressed.

----------------------------------------------------------------------------------------------------
@@TInspectorComponentFlag
<TITLE TInspectorComponentFlag type>
Summary
  Flags used for the TComponent type inspector items.
Description
  TInspectorComponentFlag are the available flags for TComponent type inspector item.

----------------------------------------------------------------------------------------------------
@@TInspectorClassFlag.icfRenderAsCategory
Description for icfRenderAsCategory

----------------------------------------------------------------------------------------------------
@@TInspectorClassFlags
<TITLE TInspectorClassFlags type> <COMBINE TInspectorClassFlag>

----------------------------------------------------------------------------------------------------
@@TInspectorClassFlag.icfShowClassName
Show the class name, instead of the default component name.

----------------------------------------------------------------------------------------------------
@@TInspectorClassFlag.icfCreateMemberItems
Create member items for the class instance.

----------------------------------------------------------------------------------------------------
@@TInspectorClassFlag
<TITLE TInspectorClassFlag type>
Summary
  Flags used for class type inspector items.
Description
  TInspectorClassFlag holds the flags for class type inspector items.

----------------------------------------------------------------------------------------------------
@@TInspectorBeforeEditEvent
<TITLE TInspectorBeforeEditEvent type> <COMBINE TJvCustomInspector.BeforeEdit>

----------------------------------------------------------------------------------------------------
@@SaveCanvasState
<TITLE SaveCanvasState function>
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Canvas - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@RestoreCanvasState
<TITLE RestoreCanvasState procedure>
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Canvas   - Description for this parameter
  SavedIdx - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@RegisterTypeInfoHelper
<TITLE RegisterTypeInfoHelper procedure>
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  AClass - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@EJvInspectorReg
Summary
  Inspector registration exception class.
Description
  Exception class for exception occurring in the TJvInspectorRegister class or in the
  TJvCustomInspectorRegItem class or one of its descendants.

----------------------------------------------------------------------------------------------------
@@EJvInspectorItem
Summary
  Inspector item exception class.
Description
  Exception class for exceptions occurring in the TJvCustomInspectorItem class or one of its
  descendants.

----------------------------------------------------------------------------------------------------
@@EJvInspectorData
Summary
  Inspector data exception class.
Description
  Exception class for exceptions occurring in the TJvCustomInspectorData class or one of its
  descendants.

----------------------------------------------------------------------------------------------------
@@EJvInspector
Summary
  JvInspector base exception class
Description
  EJvInspector is the base exception class used by the JvInspector package. This exception class is
  used when exceptions occur within the TJvCustomInspector and descendant classes.
  
  There are three descendant exception classes (EJvInspectorData, EJvInspectorItem and
  EJvInspectorReg).

----------------------------------------------------------------------------------------------------
@@DataRegister
<TITLE DataRegister function>
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@ApplyCanvasState
<TITLE ApplyCanvasState procedure>
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Canvas   - Description for this parameter
  SavedIdx - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.ClearInstances
Summary
  Removes all event instance from the list of instances.
Description
  ClearInstances removes all event instances from the list of instances. Deleting the instances will
  result in deleting all handlers.
See Also
  TJvInspectorTMethodItem.ClearMethods, TJvInspectorTMethodItem.DeleteInstance,
  TJvInspectorTMethodItem.IndexOfInstance

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.ClearMethods@Integer
Summary
  Removes all event handlers from the list of event handlers.
Description
  ClearMethods removes all event handlers from the list of event handlers.
  
  There are three overloaded versions of this method. You can specify an index of an instance, the
  instance itself or the name of the instance for which you want to remove all handlers.
Parameters
  InstanceIndex - 0-based index in the list of added instances of the instance for which all handlers
                   are to be removed.
  Instance      - TObject instance for which to delete all handlers. If the specified instance does  
                 not exist, an exception is raised.
  InstanceName  - Name (case insensitive) of the instance for which to delete all handlers. If the   
                specified instance does not exist, an exception is raised.
See Also
  TJvInspectorTMethodItem.AddMethod, TJvInspectorTMethodItem.DeleteMethod,
  TJvInspectorTMethodItem.IndexOfMethod

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.ClearMethods@string
<COMBINE TJvInspectorTMethodItem.ClearMethods@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.ClearMethods@TObject
<COMBINE TJvInspectorTMethodItem.ClearMethods@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteInstance@Integer
Summary
  Removes an event instance from the instance list.
Description
  DeleteInstance removes an event instance from the list of instances. Deleting an instance will
  result in deleting all handlers added to this instance.
  
  There are three overloaded versions of this method. You can delete an instance based on its
  position in the list, by providing a TObject instance or by specifying its name.
Parameters
  Index        - 0-based index in the list of added instances of the instance to delete.
  Instance     - TObject instance to delete. If the specified instance does not exist, an exception  
                will be raised.
  InstanceName - Name (case insensitive) of the instance to delete. If the specified instance does
  not                 exist, an exception will be raised.
See Also
  TJvInspectorTMethodItem.DeleteMethod, TJvInspectorTMethodItem.IndexOfInstance

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteInstance@string
<COMBINE TJvInspectorTMethodItem.DeleteInstance@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteInstance@TObject
<COMBINE TJvInspectorTMethodItem.DeleteInstance@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteMethod@Integer@Integer
Summary
  Removes an event handler from the list of event handlers.
Description
  DeleteMethod removes an event handler from the list of event handlers.
  
  There are seven overloaded versions of this method that allow various combinations of specifying
  the instance and/or handler to delete.
Parameters
  Method        - Method pointer to delete. The method pointer provides a Data address (the instance)
                   and a Code address (the address of the handler).
  InstanceIndex - 0-based index in the list of added instances of the instance of the handler to     
              delete.
  Instance      - TObject instance of the handler to delete. If the specified instance does not
  exist,                  an exception is raised.
  InstanceName  - Name (case insensitive) of the instance of the handler to delete. If the specified 
                  instance does not exist, an exception is raised.
  Index         - 0-based index of the handler to delete.
  MethodName    - Name (case insensitive) of the handler to delete. If the specified handler does not
                   exist within the specified instance, an exception is raised.
See Also
  TJvInspectorTMethodItem.DeleteInstance, TJvInspectorTMethodItem.AddMethod,
  TJvInspectorTMethodItem.ClearMethods, TJvInspectorTMethodItem.IndexOfMethod

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteMethod@Integer@string
<COMBINE TJvInspectorTMethodItem.DeleteMethod@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteMethod@string@Integer
<COMBINE TJvInspectorTMethodItem.DeleteMethod@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteMethod@string@string
<COMBINE TJvInspectorTMethodItem.DeleteMethod@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteMethod@TMethod
<COMBINE TJvInspectorTMethodItem.DeleteMethod@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteMethod@TObject@Integer
<COMBINE TJvInspectorTMethodItem.DeleteMethod@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.DeleteMethod@TObject@string
<COMBINE TJvInspectorTMethodItem.DeleteMethod@Integer@Integer>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.IndexOfInstance@string
Summary
  Determines the index of an instance in the list instances.
Description
  IndexOfInstance determines the 0-based index of an instance in the list instances. If the specified
  instance does not exists, -1 will be returned.
  
  There are two overloaded versions of this method. One to specify a TObject instance and the other
  to specify the instance name.
Parameters
  Instance     - TObject instance to locate.
  InstanceName - Case insensitive name of the instance to locate.
See Also
  TJvInspectorTMethodItem.IndexOfMethod, TJvInspectorTMethodItem.DeleteInstance

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.IndexOfInstance@TObject
<COMBINE TJvInspectorTMethodItem.IndexOfInstance@string>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.IndexOfMethod@Integer@string
Summary
  Determines the index of an event handler in the list of event handlers.
Description
  IndexOfMethod determines the 0-based index of an event handler in the list of event handlers. If
  the specified handler does not exist, -1 will be returned.
  
  There are four overloaded versions of this method that allow various combinations of how you can
  specify which instance to search in and which handler to locate.
Parameters
  Method        - Method pointer to locate. The method pointer provides a Data address (the instance)
                   and a Code address (the address of the handler).
  InstanceIndex - 0-based index in the list of added instances of the instance to search.
  Instance      - TObject instance to search. If the specified instance does not exist, -1 will be   
                returned.
  InstanceName  - Name (case insensitive) of the instance to search. If the specified instance does  
                 not exist, -1 will be returned.
  MethodName    - Name (case insensitive) of the handler to locate.
See Also
  TJvInspectorTMethodItem.IndexOfInstance, TJvInspectorTMethodItem.AddMethod,
  TJvInspectorTMethodItem.DeleteMethod, TJvInspectorTMethodItem.ClearMethods

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.IndexOfMethod@string@string
<COMBINE TJvInspectorTMethodItem.IndexOfMethod@Integer@string>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.IndexOfMethod@TMethod
<COMBINE TJvInspectorTMethodItem.IndexOfMethod@Integer@string>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.IndexOfMethod@TObject@string
<COMBINE TJvInspectorTMethodItem.IndexOfMethod@Integer@string>

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.InstanceCount
Summary
  Determines the number of instances added.
Description
  InstanceCount determines the number of instances added.
See Also
  TJvInspectorTMethodItem.DeleteInstance

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.InstanceNames
Summary
  Array of names of added instances.
Description
  InstanceNames is 0-based array of names of added instances. You can specify an index in the range
  from 0 up to InstanceCount-1 to retrieve the name of an added instance.
  
  The array will remain in the order in which items are added, regardless of the state of
  SortInstances and related properties.
Parameters
  I - 0-based index in the list added instances.
See Also
  TJvInspectorTMethodItem.DeleteInstance

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.Instances
Summary
  Array of added instances.
Description
  Instances is 0-based array of instances added. You can specify an index in the range from 0 up to
  InstanceCount-1 to retrieve a reference to an added instance.
  
  The array will remain in the order in which items are added, regardless of the state of
  SortInstances and related properties.
Parameters
  I - 0-based index in the list added instances.
See Also
  TJvInspectorTMethodItem.DeleteInstance

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.ItemTMethodFlags
Summary
  TMethod item flags.
Description
  ItemTMethodFlags are the flags specific to the TMethod (event handler) inspector item.
  
  Read ItemTMethodFlags to determine the current flags or set it to a new value.
See Also
  TJvInspectorTMethodItem.KeepFirstInstanceAsFirst, TJvInspectorTMethodItem.NoShowFirstInstanceName,
  TJvInspectorTMethodItem.ShowInstanceNames, TJvInspectorTMethodItem.SortInstances,
  TJvInspectorTMethodItem.SortMethods

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.KeepFirstInstanceAsFirst
Summary
  Indicates whether the handlers of the first instance should appear before other instance handlers.
Description
  KeepFirstInstanceAsFirst indicates whether the handlers of the first instance should appear before
  the handlers of the other instances, regardless of any sorting option.
  
  KeepFirstInstanceAsFirst maps to the imfKeepFirstInstanceAsFirst flag in the ItemTMethodFlags
  property.
See Also
  TJvInspectorTMethodItem.Instances, TJvInspectorTMethodItem.ItemTMethodFlags,
  TJvInspectorTMethodItem.SortInstances, TJvInspectorTMethodItem.SortMethods

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.MethodCount
Summary
  Determines the number of event handlers added to an instance.
Description
  MethodCount determines the number of Methods added.
Parameters
  Instance - TObject instance for which to retrieve a method name.
See Also
  TJvInspectorTMethodItem.AddMethod, TJvInspectorTMethodItem.DeleteMethod,
  TJvInspectorTMethodItem.ClearMethods

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.MethodNames
Summary
  Array of names of added event handlers.
Description
  MethodNames is 0-based array of names of added event handlers. You can specify a TObject instance
  and an index in the range from 0 up to MethodCount[<I>\<TObject instance></I>]-1 to retrieve the
  name of
  an added event handler.
  
  The array will remain in the order in which items are added, regardless of the state of SortMethods
  and related properties.
Parameters
  Instance - TObject instance for which to retrieve a method name.
  I        - 0-based index of the handler for which to retrieve the name.
See Also
  TJvInspectorTMethodItem.AddMethod, TJvInspectorTMethodItem.DeleteMethod,
  TJvInspectorTMethodItem.ClearMethods

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.Methods
Summary
  Array of added event handlers.
Description
  Methods is 0-based array of added event handlers. You can specify a TObject instance and an index
  in the range from 0 up to MethodCount[<I>\<TObject instance></I>]-1 to retrieve the TMethod pointer
  of an added event handler.
  
  The array will remain in the order in which items are added, regardless of the state of SortMethods
  and related properties.
Parameters
  Instance - TObject instance for which to retrieve a method name.
  I        - 0-based index of the handler for which to retrieve the name.
See Also
  TJvInspectorTMethodItem.AddMethod, TJvInspectorTMethodItem.DeleteMethod,
  TJvInspectorTMethodItem.ClearMethods

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.NoShowFirstInstanceName
Summary
  Indicates whether the first instance's name is to be shown in the drop down list.
Description
  NoShowFirstInstanceName indicates whether the first instance's name is to be prefixed in the drop
  down list of assignable handlers.
  
  When set to True, the name of the first instance is not shown, regardless of the state of the
  ShowInstanceNames property. When set to False, the name of the first instance will be shown if
  ShowInstanceNames is also set to True.
  
  NoShowFirstInstanceName maps to the imfNoShowFirstInstanceName flag in the ItemTMethodFlags
  property.
See Also
  TJvInspectorTMethodItem.ItemTMethodFlags, TJvInspectorTMethodItem.ShowInstanceNames

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.ShowInstanceNames
Summary
  Indicates whether the instance names are to be shown in the drop down list.
Description
  ShowInstanceNames indicates whether the instance names are to be prefixed in the drop down list of
  assignable handlers.
  
  When set to True, the name of the instance are shown. If NoShowFirstInstanceName is also set to
  True, the name of the first instance will not be shown.
  
  ShowInstanceNames maps to the imfShowInstanceNames flag in the ItemTMethodFlags property.
See Also
  TJvInspectorTMethodItem.ItemTMethodFlags, TJvInspectorTMethodItem.NoShowFirstInstanceName

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.SortInstances
Summary
  Indicates whether instances are grouped alphabetically.
Description
  SortInstances indicates whether or not the instance list is sorted alphabetically before adding
  handlers.
  
  Sorting handlers can be controlled separately through the SortMethods property. In addition, if
  KeepFirstInstnaceAsFirst is set to True, the first instance of the list (Instances[0]) will always
  be the first in the list.
  
  SortInstances maps to the imfSortInstances flag in the ItemTMethodFlags property.
See Also
  TJvInspectorTMethodItem.Instances, TJvInspectorTMethodItem.ItemTMethodFlags,
  TJvInspectorTMethodItem.KeepFirstInstanceAsFirst, TJvInspectorTMethodItem.SortMethods

----------------------------------------------------------------------------------------------------
@@TJvInspectorTMethodItem.SortMethods
Summary
  Indicates whether event handlers are sorted alphabetically.
Description
  SortMethods indicates whether or not the event handlers of each instance are sorted alphabetically.
  
  Sorting instances can be controlled separately through the SortInstances property.
  
  SortMethods maps to the imfSortMethods flag in the ItemTMethodFlags property.
See Also
  TJvInspectorTMethodItem.Instances, TJvInspectorTMethodItem.ItemTMethodFlags,
  TJvInspectorTMethodItem.SortInstances

----------------------------------------------------------------------------------------------------
@@TJvInspectorTStringsItem
Summary
  TStrings inspector item.
Description
  TJvInspectorTStringsItem is an inspector item that allows any TStrings descendant to be edited
  either inline or using a string list editor, much like the one Borland provides.
  
  The distinction between inline editable and stringlist editable is determine by the Flags property.
  
  If iifEditButton is set, the string list editor is used and the item can not be edited inline (in
  addition, the iifMultiLine flag will be removed).
  
  If iifMultiLine is set, you can edit the item inline and it can not be edited through the string
  list editor (in addition, the iifEditButton flag will be removed).
  
  TJvInspectorCustomData registers this item for TStrings class types.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoMapperRegItem
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoMapperRegItem.NewTypeInfo
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoMapperRegItem.ObjectClass
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoMapperRegItem.PropertyName
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoMapperRegItem.PropertyType
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoRegItem
Summary
  Registration item based on type info
Description
  TJvInspectorTypeInfoRegItem is a registration item that bases its matching value on the type info
  it represents and the type info in the data object.
  
  The match value is determined as follows:
  <TABLE>
  Situation                                 Value
  ----------------------------------------  -----
  Equal RTTI pointers                       100
  Different RTTI pointers, class type,      50
    objects class inherits from the given
    class.
  Different RTTI, no class type or not      0   inheriting from class </TABLE>
  
  Thus, if the registration item represents the type info for TComponent and the data instance points
  to TWinControl, the MatchValue will be 50 (ie. not a perfect match).
  
  The match percentage will be equal to the match value in all cases.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it should use if this
  item matches a data instance.
Parameters
  AItemClass - Inspector item class to assign to the registration item.
  ATypeInfo  - The RTTI pointer this item should represent.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeInfoRegItem.TypeInfo
Summary
  The type info this registration item represents
Description
  TypeInfo indicates the RTTI pointer this registration item is used for. Read TypeInfo to determine
  which RTTI pointer is matched or set it to another RTTI pointer.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeKindRegItem
Summary
  Registration item based on type kinds
Description
  TJvInspectorTypeKindRegItem is a registration item that bases its matching value on the kind of
  type it represents and the type info in the data object.
  
  The match value is determined as follows:
  <TABLE>
  Situation             Value
  --------------------  -----
  Equal type kinds      100
  Not equal type kinds  0 </TABLE>
  
  Since TypKind is generic, the match percentage will be either 0 or 50%.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeKindRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it should use if this
  item matches a data instance.
Parameters
  AItemClass - Inspector item class to assign to the registration item.
  ATypeKind  - The type of RTTI this item should represent.

----------------------------------------------------------------------------------------------------
@@TJvInspectorTypeKindRegItem.TypeKind
Summary
  The type kind this registration item represents
Description
  TypeKind indicates what sort of type info this registration item is used for. Read TypeKind to
  determine which type of RTTI is matched or set it to another RTTI type.

----------------------------------------------------------------------------------------------------
@@TJvInspectorVarData
Summary
  Variable data layer.
Description
  TJvInspectorVarData is the inspector data layer that obtains its data from a simple variable or
  some value on the heap. The class implements all access properties, but the type info will be used
  to check the legality of the access (ie. a float can't be accessed as Int64).
  
  The data layer provides its own item registration database.

----------------------------------------------------------------------------------------------------
@@TJvInspectorVarData.Address
Summary
  Holds the address of the data.
Description
  Address holds the address where the inspected data is. Regardless of how you created the data layer
  (either specifying an address or a variable), the address is determined by the constructor.

----------------------------------------------------------------------------------------------------
@@TJvInspectorVarData.New@TJvCustomInspectorItem@string@PTypeInfo@Pointer
Summary
  Instantiate a data instance and attaches an item to it.
Description
  New instantiates a new data instance with the given parameters. If the data referred to by the
  given parameters already exists, the item will be attached to that data instance, instead of
  creating a new data instance.
  
  TJvInspectorVarData implements New to allow you to specify a name, type information and either an
  address or a variable.
Parameters
  AParent   - The parent to which this data should be added.
  AName     - Default name for the data object
  ATypeInfo - Default RTTI pointer for the data object
  AAddress  - The address where the data is located. Alternatively you could use the overloaded      
         version where you can specify a variable.
  ##  AVar -          The variable that holds the data. Alternatively you could use
  ##                  the overloaded version where you can specify an address.

----------------------------------------------------------------------------------------------------
@@TJvInspectorVariantItem
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@TJvInspSupportsMethodPointers
<TITLE TJvInspSupportsMethodPointers type> <COMBINE TJvInspectorEventData.OnSupportsMethodPointers>

----------------------------------------------------------------------------------------------------
@@TJvTypeInfoHelperClass
<TITLE TJvTypeInfoHelperClass type>
Summary
  Defines the metaclass for TJvTypeInfoHelper.
Description
  TJvTypeInfoHelperClass is the metaclass for TJvTypeInfoHelper. Its value is the class reference for
  TJvTypeInfoHelper or for one of its descendants.

----------------------------------------------------------------------------------------------------
@@TOnJvInspectorItemEdit
<TITLE TOnJvInspectorItemEdit type> <COMBINE TJvCustomInspector.OnItemEdit>

----------------------------------------------------------------------------------------------------
@@TOnJvInspectorMouseDown
<TITLE TOnJvInspectorMouseDown type> <COMBINE TJvCustomInspector.OnEditorMouseDown>

----------------------------------------------------------------------------------------------------
@@TOnJvInspectorSetItemColors
<TITLE TOnJvInspectorSetItemColors type>
Summary
  Write here a summary (1 line)
Description
  This type is used by (for reference): TJvInspectorBorlandPainter.OnSetItemColors
  TJvInspectorDotNETPainter.OnSetItemColors
Parameters
  Item   - Description for this parameter
  Canvas - Description for this parameter

----------------------------------------------------------------------------------------------------
@@TypeInfoFromName
<TITLE TypeInfoFromName function>
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  TypeName - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

