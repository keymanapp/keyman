##Package: Cmp
##Status: Completed (I)
----------------------------------------------------------------------------------------------------
@@JvCreateProcess.pas
Summary
    Contains the TJvCreateProcess, TJvProcessEntry and TJvCPSStartupInfo components.
Author
  Petr Vones
----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.LargeIconIndex
Summary
  Returns the index of the file's large icon.
Description
  \Read LargeIconIndex to determine the index of the file's large icon within the system image list.
  
  LargeIconIndex will only return a valid icon index if you did specify a valid path and filename for
  the AFileName parameter when creating the object by calling Create.
See Also
  TJvProcessEntry.Create, TJvProcessEntry.SmallIconIndex

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.FileName
Summary
  Returns the path and file name of the file associated with the TJvProcessEntry object.
Description
  \Read FileName to determine the path and file name of the file associated with the TJvProcessEntry
  object. The returned value is equal to the AFileName parameter specified when creating the object
  by calling Create.
See Also
  TJvProcessEntry.ProcessID, TJvProcessEntry.ProcessName

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.Create
Summary
  Creates and initializes a new TJvProcessEntry object.
Description
  Use \Create to create and initialize a new TJvProcessEntry object.
  
  \Create calls the inherited \Create method, then sets the initial values for the TJvProcessEntry
  object as follows:
Parameters
  AProcessID   - The process id of a process to be associated with a new TJvProcessEntry
  AFileName    - The path and file name of a file to be associated with a new TJvProcessEntry.
  AProcessName - A description for the process.

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry
Summary
  Enables you to control a process.
Description
  Use TJvProcessEntry to control a process after it has been created with TJvCreateProcess.
See Also
  TJvCreateProcess

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.Close
Summary
  Closes the process.
Description
  Call Close to close the process. If UseQuit is True then the application will terminate immediately
  after processing the request. If UseQuit is False then the application can prompt the user for
  confirmation, and close only if the user confirms the choice.
Parameters
  UseQuit - Indicates whether to close immediately.
Return value
  Returns True if a process with an ID equal to ProcessID exists, otherwise returns False.
See Also
  TJvProcessEntry.Terminate

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.WriteLn
Summary
  Writes to the input of a console process and adds an end-of-line marker
Description
  Call WriteLn to write to the input of a console process, created with TJvCreateProcess. The component will append an end-of-line 
  arker (carriage return/line feed) to the data. If parameter S is an empty string, WriteLn an
  end-of-line marker to the input of a console process.
  Note coRedirect must be included in ConsoleOptions otherwise WriteLn will have no effect.
Parameters
  S - Data to be written to the input of a console process.
Return value
  Returns True on success, otherwise returns False.
See Also
  TJvCreateProcess.Write

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.Write
Summary
  Writes to the input of a console process.
Description
  Call Write to write to the input of a console process, created with TJvCreateProcess.
  Note coRedirect must be included in ConsoleOptions otherwise Write will have no effect.
Parameters
  S - Data to be written to the input of a console process.
Return value
  Returns True on success, otherwise returns False.
See Also
  TJvCreateProcess.WriteLn

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.WaitForTerminate
Summary
  Indicates whether the component waits for the process to terminate.
Description
  Set WaitForTerminate to True to specify that the component must wait for the process to terminate.
  After calling Run, property State will be set to psWaiting. If the process ends, the State will be
  set to psReady and the OnTerminate event will be fired. Note that you cannot call Run if the
  component is waiting for a process to end.
  
  Set WaitForTerminate to False to specify that the component must not wait for the process to
  terminate. After calling Run, property State will be set to psRunning.
  
  Setting WaitForTerminate to True is useful if you want to take action when the process ends, or if
  you want to prevent the user to call Run if a process started by TJvCreateProcess is still running.
  Otherwise set WaitForTerminate to False.
  
  \Note that you cannot change WaitForTerminate if State is psWaiting.
  Note
  If coRedirect is included in ConsoleOptions, the value of WaitForTerminate is ignored. The
  component will then always wait for the process to terminate.
See Also
  TJvCreateProcess.OnTerminate, TJvCreateProcess.Run, TJvCreateProcess.State,
  TJvCreateProcess.StopWaiting, TJvCreateProcess.Terminate

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.TerminateWaitThread
Summary
  Stops waiting for the process to end.
Description
  Applications can’t call this protected method. It is used internally by StopWaiting to stop waiting
  for the process to end.
See Also
  TJvCreateProcess.StopWaiting

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.Terminate
Summary
  Ends process execution.
Description
  Call Terminate to terminate a process created with TJvCreateProcess. It will unconditionally cause
  the created process to exit. Use it only in extreme circumstances, otherwise use <LINK
  TJvCreateProcess.CloseApplication, CloseApplication>. Calling Terminate when State is psReady, will
  raise an error.
  Note
  A case when calling Terminate is reasonable is when the component has redirected the standard input
  and output of a console process, and that process blocks.
See Also
  TJvCreateProcess.CloseApplication

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.StopWaiting
Summary
  Stops waiting for the process to end.
Description
  Call StopWaiting to stop waiting for a process created with TJvCreateProcess to end. Property State
  will be set to psReady, so you can call Run to create another process.
  
  If the process ends, no OnTerminate event will be fired.
  
  Calling StopWaiting when State is psReady, has no effect.
  Note
  It is not recommended to call StopWaiting if TJvCreateProcess has redirected the standard input and
  \output of a console process.
See Also
  TJvCreateProcess.Terminate, TJvCreateProcess.WaitForTerminate

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.State
Summary
  Returns the current operating mode of the TJvCreateProcess component.
Description
  Examine State to determine the current operating mode of the TJvCreateProcess component. State
  determines what can be done with the component, such as starting a new process or closing a started
  process.
  
  Initially the state of the component is psReady: it means that you can call Run to start an
  application, but you can't call <LINK TJvCreateProcess.CloseApplication, CloseApplication> or
  Terminate to stop a running application.
  
  Starting an application with Run changes the state to psWaiting (if WaitForTerminate is set to
  True) \or to psRunning (if WaitForTerminate is False).
  
  If the state is psWaiting, it means that the component is waiting for a process to end. If the
  process ends an OnTerminate event is fired, and the state changes to psReady. You can call
  StopWaiting to stop waiting for the process to end, it will change the state from psWaiting to
  psReady. You can also call <LINK TJvCreateProcess.CloseApplication, CloseApplication> or Terminate
  to stop the running application, but you can not call Run to start a new application.
  
  If the state is psRunning, it means that the component has started an application. You can call
  <LINK
  TJvCreateProcess.CloseApplication, CloseApplication> or Terminate to stop the running application;
  you can also call Run to start a new Application.
See Also
  TJvCreateProcess.CloseApplication

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.StartupInfo
Summary
  Contains information about the process to be created with TJvCreateProcess.
Description
  Use StartupInfo to specify the window station, desktop, and appearance of the main window for a new
  process created with TJvCreateProcess. Access StartupInfo at runtime to view and set its properties
  dynamically (at design time use the object inspector to set the properties of StartupInfo).
See Also
  TJvCPSStartupInfo

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.ProcessInfo
Summary
  Contains identification information about a new process.
Description
  \Read ProcessInfo after calling Run to get identification information about the new process.

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.Run
Summary
  Creates a new process and its primary thread.
Description
  Call Run to create a new process and its primary thread. Run uses the properties of
  TJvCreateProcess to create the new process.
  
  If the creation fails an EOSError error is raised. If the creation succeeded, and WaitForTerminate
  is
  True, State is set to psWaiting, and TJvCreateProcess waits for the process to end. If the process
  ends an OnTerminate event is triggered. If the creation succeeded, and WaitForTerminate is False,
  State is set to psRunning. No event will be triggered if the process ends.
  
  You can stop the created process by calling <LINK TJvCreateProcess.CloseApplication,
  CloseApplication> \or Terminate.
  
  \Note that you cannot call Run if State is psWaiting.
See Also
  TJvCreateProcess.CloseApplication

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.Priority
Summary
  \Controls the priority class of a process created with TJvCreateProcess.
Description
  Priority controls the new process's priority class, which is used to determine the scheduling
  priorities of the process's threads. The system schedules CPU cycles to each process based on a
  priority scale; the Priority property adjusts a process's priority higher or lower on the scale.
  Note that setting priority higher than normal is discouraged and may starve other applications in
  system.

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.OnTerminate
Summary
  Occurs after a process created with TJvCreateProcess has ended.
Description
  Write an OnTerminate event handler to execute code after the process finishes executing.
  WaitForTerminate must be set to True, otherwise OnTerminate will not be triggered.
Parameters
  Sender   - The object that triggered this event.
  ExitCode - Indicates the termination status of the specified process.
See Also
  TJvCreateProcess.WaitForTerminate

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.OnRawRead
Summary
  Occurs when a console process created with TJvCreateProcess outputs some data.
Description
  \Write an OnRawRead event handler to respond when a console process outputs some data. The data
  isn't pre-processed; thus, it may contain back space (#8), tab (#9), line feed (#10) or carriage
  return (#13) chars.
  
  It may be necessary to respond to OnRawRead events, when the console process updates the current
  line only and doesn't output a line feed char; for instance to indicate the progress of a process.
  In this case no OnRead event will be fired.
  Note coRedirect must be included in ConsoleOptions, otherwise no OnRawRead event will be fired.
Parameters
  Sender - The object that triggered this event.
  S      - The data received from the console process.
See Also
  TJvCreateProcess.ConsoleOptions, TJvCreateProcess.ConsoleOutput, TJvCreateProcess.OnRead

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.OnRead
Summary
  Occurs when a console process created with TJvCreateProcess outputs a line feed (#10) char.
Description
  \Write an OnRead event handler to respond when a console process outputs a new line. The data is
  pre-processed; thus, it won't contain back space (#8), tab (#9), line feed (#10) or carriage return
  (#13) chars.
  
  Example:
  <CODE>
  procedure TForm1.JvCreateProcess1Read(Sender: TObject; const S: string;
    const StartsOnNewLine: Boolean);
  begin
    // C is the Form Feed char.
    if S = #$C then
      // Clear screen
      ListBox1.Clear;
    else
    if StartsOnNewLine then
      // Add new line
      ListBox1.Items.Add(S);
    else
      // Change last line
      ListBox1.Items[ListBox1.Count - 1] := S
  end; </CODE>
  Note coRedirect must be included in ConsoleOptions, otherwise no OnRead event will be fired.
Parameters
  Sender          - The object that triggered this event.
  S               - The data received from the console process.
  StartsOnNewLine - Indicates whether parameter S starts on a new line or is on the same line as the 
                    last line read.
See Also
  TJvCreateProcess.ConsoleOptions, TJvCreateProcess.ConsoleOutput, TJvCreateProcess.OnRawRead

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.InputReader
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.OnErrorRawRead
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.OnErrorRead
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.ErrorReader
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.Destroy
Summary
  Destroys an instance of TJvCreateProcess
Description
  Do not call Destroy directly in an application. Instead, call Free. Free verifies that the
  TJvCreateProcess object is not nil and only then calls Destroy.
See Also
  TJvCreateProcess.Create

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.Environment
Summary
  Lists the environment block for the new process.
Description
  Use Environment to access the environment block for the new process. Each string must be in the
  form:
  
  name=value
  
  Because the equal sign is used as a separator, it must not be used in the name of an environment
  variable.
  
  If no environment is specified, the new process uses the environment of the calling process.
  
  Note that it isn't allowed to add empty strings to Environment.
See Also
  TJvCreateProcess.Run

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.CreationFlags
Summary
  \Controls the creation of the process.
Description
  Use CreationFlags to control the creation of the process.

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.CurrentDirectory
Summary
  Determines the current drive and directory for the new process.
Description
  Set CurrentDirectory to a drive and directory to specify the current drive and directory for the
  new process. The string must be a full path that includes a drive letter. If no value is specified,
  the new process will have the same current drive and directory as the calling process.
See Also
  TJvCreateProcess.Run

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.ConsoleOutput
Summary
  Returns a string list that contains the output of the console process.
Description
  ConsoleOutput is a string list that contains the output of console processes created with the
  TJvCreateProcess component, which standard input and output is redirected.
  
  The console output is pre-processed by TJvCreateProcess: It has the same format as it appears in a
  DOS box. To determine the raw output of a console process, you must respond to OnRawRead events.
  
  coOwnerData must <I>not</I> be included in Options, but coRedirect must be included, otherwise
  ConsoleOutput stays empty.
  
  Use properties and methods for string lists to traverse this list of directories and read
  individual items.
See Also
  TJvCreateProcess.ConsoleOptions, TJvCreateProcess.OnRawRead, TJvCreateProcess.OnRead

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.Create
Summary
  Creates and initializes a new TJvCreateProcess object.
Description
  Use \Create to create and initialize a new TJvCreateProcess object.
  
  \Create calls the inherited \Create method, then sets the initial values for the component as
  follows:
  
  * CreationFlags is set to [].
  * Priority is set to ppNormal.
  * State is set to psReady.
  * WaitForTerminate is set to True.
  * ConsoleOptions is set to [coOwnerData].
Parameters
  AOwner - A component, typically the form, that is responsible for freeing the component.
See Also
  TJvCreateProcess.CreationFlags, TJvCreateProcess.Destroy, TJvCreateProcess.Priority,
  TJvCreateProcess.State, TJvCreateProcess.WaitForTerminate

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.ConsoleOptions
Summary
  Specifies behavioral properties of the search component concerning console creation.
Description
  When the TJvCreateProcess creates a console process, it can redirect the standard input and output
  of that process. The component will then generate OnRawRead and OnRead events, that enables you to
  respond to the output of the console; Furthermore, you can send data directly to the consoles input
  by calling Write or WriteLn.
  
  Use ConsoleOptions to specify whether to redirect the standard input and output of newly created
  console processes, and whether to log the console output.
See Also
  TJvCreateProcess.ConsoleOutput, TJvCreateProcess.OnRawRead, TJvCreateProcess.OnRead

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.CommandLine
Summary
  Determines the command line to execute.
Description
  Set CommandLine to a string to specify the command line to execute.
  
  If the string is empty then TJvCreateProcess uses the string specified by ApplicationName as the
  command line.
  
  If both ApplicationName and CommandLine are not empty, then ApplicationName specifies the module to
  execute, and CommandLine specifies the command line. Generally the module name is repeated as the
  first token in the command line.
  
  If ApplicationName is empty, then the first white-space – delimited token of the command line
  specifies the module name. If you are using a long file name that contains a space, use quoted
  strings to indicate where the file name ends and the arguments begin. If the file name does not
  contain an extension, .exe is appended. Therefore, if the file name extension is .com, this
  parameter must include the .com extension. If the file name ends in a period (.) with no extension,
  or if the file name contains a path, .exe is not appended. If the file name does not contain a
  directory path, the system searches for the executable file in the following sequence:
  
  * The directory from which the application loaded.
  * The current directory for the parent process.
  * The Windows system directory.
  * The Windows directory.
  * The directories that are listed in the PATH environment variable.
See Also
  TJvCreateProcess.ApplicationName, TJvCreateProcess.Run

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.CloseProcessHandles
Summary
  Closes used handles.
Description
  Applications can’t call the protected CloseProcessHandles method. It is used internally by
  TJvCreateProcess to close used handles.

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.CloseApplication
Summary
  Closes the process.
Description
  Call CloseApplication to close the process. If SendQuit is True then the application will terminate
  immediately after processing the request. If SendQuit is False then the application can prompt the
  user for confirmation, and close only if the user confirms the choice.
  
  Calling CloseApplication when State is psReady, will raise an error.
Parameters
  SendQuit - Indicates whether to close immediately.
Return value
  Returns True if a process with an ID equal to <LINK ProcessInfo, ProcessInfo.dwProcessId> exists,
  otherwise returns False.
See Also
  TJvCreateProcess.Terminate

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.CheckRunning
Summary
  Raises an EJvProcessError exception if no process is running.
Description
  Applications can’t call this protected method. It is used internally in methods that affect the
  process, to check whether the change is permitted, and if not, raise an exception.
See Also
  TJvCreateProcess.CheckNotWaiting

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.CheckNotWaiting
Summary
  Raises an EJvProcessError exception if TJvCreateProcess is waiting for a process to end.
Description
  Applications can’t call this protected method. It is used internally in methods that affect the
  process, to check whether the change is permitted, and if not, raise an exception.
See Also
  TJvCreateProcess.CheckRunning

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess.ApplicationName
Summary
  Determines the module to execute.
Description
  Set ApplicationName to a string to specify the module to execute.
  
  The string can specify the full path and file name of the module to execute or it can specify a
  partial name. In the case of a partial name, TJvCreateProcess uses the current drive and current
  directory to complete the specification. TJvCreateProcess will not use the search path. If the file
  name does not contain an extension, .exe is assumed. Therefore, if the file name extension is .com,
  this parameter must include the .com extension.
  
  The string specified by ApplicationName can be empty. In that case, the module name must be the
  first white space-delimited token in the string specified by CommandLine. If you are using a long
  file name that contains a space, use quoted strings to indicate where the file name ends and the
  arguments begin; otherwise, the file name is ambiguous. For example, consider the string
  'c:\program files\sub dir\program name'. This string can be interpreted in a number of ways. The
  system tries to interpret the possibilities in the following order:
  
  * <B>'c:\program.exe'</B> files\sub dir\program name
  * <B>'c:\program files\sub.exe'</B> dir\program name
  * <B>'c:\program files\sub dir\program.exe'</B> name
  * <B>'c:\program files\sub dir\program name.exe'</B>
See Also
  TJvCreateProcess.CommandLine, TJvCreateProcess.Run

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.ShowWindow
Summary
  Specifies how the launched application window appears.
Description
  Use ShowWindow to indicate how you want the application window to appear when TJvCreateProcess
  creates a new process. Set DefaultWindowState to True to ignore this property.

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.StartupInfo
Summary
  Returns a windows STARTUPINFO structure.
Description
  \Read StartupInfo to get a windows STARTUPINFO structure filled with values specified by the
  properties of TJvCPSStartupInfo. This property is used by TJvCreateProcess to get a windows
  STARTUPINFO structure.

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.Title
Summary
  Specifies a text string that is displayed in the title bar if a new console window is created.
Description
  For console processes, this is the title displayed in the title bar if a new console window is
  created. If Title is empty, the name of the executable file is used as the window title instead.
  Property Title must be empty for GUI or console processes that do not create a new console window.

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.Top
Summary
  Specifies the y offset of the upper left corner of the new window in pixels.
Description
  Height specifies the y offset of the upper left corner of a window if a new window is created, in
  pixels. The offset is from the upper left corner of the screen.
  
  Set DefaultPosition to True to ignore this property.
See Also
  TJvCPSStartupInfo.DefaultPosition, TJvCPSStartupInfo.DefaultSize, TJvCPSStartupInfo.Height,
  TJvCPSStartupInfo.Left, TJvCPSStartupInfo.Width

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.Width
Summary
  Specifies the horizontal size of the new window in pixels.
Description
  Width specifies the width of the window if a new window is created, in pixels.
  
  Set DefaultSize to True to ignore this property.
See Also
  TJvCPSStartupInfo.DefaultPosition, TJvCPSStartupInfo.DefaultSize, TJvCPSStartupInfo.Height,
  TJvCPSStartupInfo.Left, TJvCPSStartupInfo.Top

----------------------------------------------------------------------------------------------------
@@TJvCPSState
<TITLE TJvCPSState type>
Summary
  Represents different operating modes of a TJvCreateProcess component.
Description
  The TJvCPSState type represents different operating modes of a JvCreateProcess component.

----------------------------------------------------------------------------------------------------
@@TJvCPSState.psReady
TJvCreateProcess isn't monitoring any process. A process can be started by calling <LINK
TJvCreateProcess.Run, Run>.

----------------------------------------------------------------------------------------------------
@@TJvCPSState.psRunning
A process is started, it can be stopped by calling <LINK TJvCreateProcess.Terminate, Terminate>.
Another process can be started by calling <LINK TJvCreateProcess.Run, Run>.

----------------------------------------------------------------------------------------------------
@@TJvCPSState.psWaiting
TJvCreateProcess has started a process, and is now waiting for it to end; the process can be stopped by calling <LINK TJvCreateProcess.Terminate, Terminate>. The user cannot call <LINK
TJvCreateProcess.Run, Run> until the process ends, or <LINK TJvCreateProcess.StopWaiting,
StopWaiting> must be called to stop waiting for the process to end.

----------------------------------------------------------------------------------------------------
@@TJvCPSTerminateEvent
<TITLE TJvCPSTerminateEvent type> <COMBINE TJvCreateProcess.OnTerminate>

----------------------------------------------------------------------------------------------------
@@TJvCreateProcess
<TITLEIMG TJvCreateProcess>
#JVCLInfo
<GROUP JVCL.System.LibProcAndThread.Processes>
<FLAG Component>
Summary
  Enables you to create processes and wait for them to end.
Description
  Use TJvCreateProcess to start a process or application, and possibly wait for it to terminate.
  
  First use the properties of TJvCreateProcess to specify how and which process must be created:
  
  * Set ApplicationName to a string to specify the module to execute.
  * Set CommandLine to a string to specify the command line to execute.
  * Use WaitForTerminate to specify whether TJvCreateProcess must wait for the process to end. If you
    set WaitForTerminate to True, specify an OnTerminate event handler to execute code after the
  process finishes executing.
  
  TJvCreateProcess enables you to redirect the standard input and output of console processes it
  creates. Do this by including coRedirect in ConsoleOptions. After a console process is successfully
  created, the component will wait for the process to end whether you set WaitForTerminate to True or
  not.
  
  You might also set the following properties:
  
  * Use StartupInfo to specify the window station, desktop, and appearance of the main window for the
    new process. Use this property for example to hide a console which standard input and output has
  been redirected.
  * Set CurrentDirectory to a drive and directory to specify another drive and directory for the new 
   process than the current application.
  * Use Environment to specify another environment than the current application.
  * Set CreationFlags to control the creation of the process.
  * Set Priority to specify another priority class for the new process than the default ppNormal.
  
  After setting these properties you can call Run to start the application or process. After
  successfully creating the new process, you can call <LINK TJvCreateProcess.CloseApplication,
  CloseApplication> or Terminate to stop the application.
  
  If WaitForTerminate is set to True, or coRedirect is included in ConsoleOptions, the component
  waits for the process to end and then triggers an OnTerminate event.
  
  If you have included coRedirect in ConsoleOptions, and thus the standard input and output of the
  console process is redirected, then you can call Write or WriteLn to write to the input of the
  console. Furthermore OnRawRead and OnRead events will be fired if the console outputs some data.
  
  You can stop waiting for the process to end by calling StopWaiting, although this is not
  recommended if the component has redirected the standard input and output of the console process.

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.Left
Summary
  Specifies the x offset of the upper left corner of the new window in pixels.
Description
  Height specifies the x offset of the upper left corner of a window if a new window is created, in
  pixels. The offset is from the upper left corner of the screen.
  
  Set DefaultPosition to True to ignore this property.
See Also
  TJvCPSStartupInfo.DefaultPosition, TJvCPSStartupInfo.DefaultSize, TJvCPSStartupInfo.Height,
  TJvCPSStartupInfo.Top, TJvCPSStartupInfo.Width

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.Height
Summary
  Specifies the vertical size of the new window in pixels.
Description
  Height specifies the height of the window if a new window is created, in pixels.
  
  Set DefaultSize to True to ignore this property.
See Also
  TJvCPSStartupInfo.DefaultPosition, TJvCPSStartupInfo.DefaultSize, TJvCPSStartupInfo.Left,
  TJvCPSStartupInfo.Top, TJvCPSStartupInfo.Width

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.ForceOffFeedback
Summary
  Determines the feedback after TJvCreateProcess creates a process.
Description
  Set ForceOffFeedback to True to force off the feedback cursor while the process starts. The 'Normal
  Select' cursor is displayed.
See Also
  TJvCPSStartupInfo.ForceOnFeedback

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.ForceOnFeedback
Summary
  Determines the feedback after TJvCreateProcess creates a process.
Description
  Set ForceOnFeedback to True to indicate that the cursor is in feedback mode for two seconds after
  TJvCreateProcess creates a process. The 'Working in Background' cursor is displayed (see the
  Pointers tab in the Mouse control panel utility). If during those two seconds the process makes the
  first GUI call, the system gives five more seconds to the process. If during those five seconds the
  process shows a window, the system gives five more seconds to the process to finish drawing the
  window.
  
  The system turns the feedback cursor off after the first call to GetMessage, regardless of whether
  the process is drawing.
See Also
  TJvCPSStartupInfo.ForceOffFeedback

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.Desktop
Summary
  Specifies either the name of the desktop, or the name of both the desktop and window station for
  this process.
Description
  Windows NT/2000/XP: Desktop specifies either the name of the desktop, or the name of both the
  desktop and window station for this process. A backslash in the string indicates that the string
  includes both the desktop and window station names. If Desktop is empty, then the new process
  inherits the desktop and window station of its parent process.

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.DefaultWindowState
Summary
  Determines whether ShowWindow is used when TJvCreateProcess creates a process.
Description
  Set DefaultWindowState to True, to ignore the ShowWindow property when TJvCreateProcess creates a
  process. Set DefaultWindowState to False, to use property ShowWindow when TJvCreateProcess creates a
  process.
See Also
  TJvCPSStartupInfo.ShowWindow

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.DefaultSize
Summary
  Determines whether Height and Width are used when TJvCreateProcess creates a process.
Description
  Set DefaultSize to True, to ignore the Height and Width properties when TJvCreateProcess creates a
  process. Set DefaultSize to False, to use the Height and Width properties when TJvCreateProcess
  creates a process.
See Also
  TJvCPSStartupInfo.DefaultPosition, TJvCPSStartupInfo.Height, TJvCPSStartupInfo.Left,
  TJvCPSStartupInfo.Top, TJvCPSStartupInfo.Width

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.DefaultPosition
Summary
  Determines whether Left and Top are used when TJvCreateProcess creates a process.
Description
  Set DefaultPosition to True, to ignore the Left and Top properties when TJvCreateProcess creates a
  process. Set DefaultPosition to False, to use the Left and Top properties when TJvCreateProcess
  creates a process.
See Also
  TJvCPSStartupInfo.DefaultSize, TJvCPSStartupInfo.Height, TJvCPSStartupInfo.Left,
  TJvCPSStartupInfo.Top, TJvCPSStartupInfo.Width

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo.Create
Summary
  Creates and initializes a new TJvCPSStartupInfo object.
Description
  Use \Create to create and initialize a new TJvCPSStartupInfo object.
  
  \Create calls the inherited \Create method, then sets the initial values for the object as follows:
  
  * DefaultSize is set to True.
  * DefaultPosition is set to True.
  * DefaultWindowState is set to True.
  * ShowWindow is set to swNormal.

----------------------------------------------------------------------------------------------------
@@TJvCPSShowWindow.swMinimize
The external application window is activated and minimized.

----------------------------------------------------------------------------------------------------
@@TJvCPSShowWindow.swMaximize
The external application window is activated and maximized.

----------------------------------------------------------------------------------------------------
@@TJvCPSShowWindow.swNormal
The external application window is activated and restored to its original size and position if it was maximized or minimized.

----------------------------------------------------------------------------------------------------
@@TJvCPSStartupInfo
Summary
  Wrapper for the windows STARTUPINFO structure.
Description
  TJvCPSStartupInfo is a wrapper for the windows STARTUPINFO structure.
  
  Use TJvCPSStartupInfo to specify the window station, desktop, and appearance of the main window for
  a new process created with TJvCreateProcess.

----------------------------------------------------------------------------------------------------
@@TJvCPSShowWindow
<TITLE TJvCPSShowWindow type>
Summary
  Represents different ways how a launched application window can appear.
Description
  The TJvCPSShowWindow type defines values describing how the launched application window appears,
  when
  TJvCreateProcess creates a new process.
See Also
  TJvCPSStartupInfo

----------------------------------------------------------------------------------------------------
@@TJvCPSShowWindow.swHide
The external application window is hidden. If it was active, another window is activated.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlags
<TITLE TJvCPSFlags type> <COMBINE TJvCPSFlag>

----------------------------------------------------------------------------------------------------
@@TJvCPSRawReadEvent
<TITLE TJvCPSRawReadEvent type> <COMBINE TJvCreateProcess.OnRawRead>

----------------------------------------------------------------------------------------------------
@@TJvCPSReadEvent
<TITLE TJvCPSReadEvent type> <COMBINE TJvCreateProcess.OnRead>

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfDetached
For console processes, the new process does not inherit its parent's console (the default). The new process can call the AllocConsole function at a later time to create a console. For more information, see 'Creation of a Console' in the MSDN library. This option is only valid if <LINK
TJvCreateProcess.CreationFlags, CreationFlags> doesn't include cfNewConsole.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfSharedWdm
Windows NT/2000/XP: The flag is valid only when starting a 16-bit Windows-based application. If the
DefaultSeparateVDM switch in the Windows section of WIN.INI is TRUE, this flag overrides the switch.
The new process is run in the shared Virtual DOS Machine.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfSuspended
The primary thread of the new process is created in a suspended state, and does not run until the
Windows API function ResumeThread is called.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfUnicode
Windows NT/2000/XP: Indicates the format of the <LINK TJvCreateProcess.Environment, Environment> property. If this flag is set, property <LINK TJvCreateProcess.Environment, Environment> uses Unicode characters. Otherwise, the environment block uses ANSI characters.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfSeparateWdm
Windows NT/2000/XP: This flag is valid only when starting a 16-bit Windows-based application. If set, the new process runs in a private Virtual DOS Machine (VDM). By default, all 16-bit Windows-based applications run as threads in a single, shared VDM. The advantage of running separately is that a crash only terminates the single VDM; any other programs running in distinct VDMs continue to function normally. Also, 16-bit Windows-based applications that are run in separate VDMs have separate input queues. That means that if one application stops responding momentarily, applications in separate VDMs continue to receive input. The disadvantage of running separately is that it takes significantly more memory to do so. You should use this flag only if the user requests that 16-bit applications should run in them own VDM.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfNewProcGroup
The new process is the root process of a new process group. The process group includes all processes
that are descendants of this root process. The process identifier of the new process group is the same as the process identifier, which is returned in the <LINK TJvCreateProcess.ProcessInfo,
ProcessInfo> property.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfNewConsole
The new process has a new console, instead of inheriting its parent's console (the default). For more information, see 'Creation of a Console' in the MSDN library. This option is only valid if <LINK
TJvCreateProcess.CreationFlags, CreationFlags> doesn't include cfDetached.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag.cfDefaultErrorMode
The new process does not inherit the error mode of the calling process. Instead, the new process gets
the current default error mode.

----------------------------------------------------------------------------------------------------
@@TJvCPSFlag
<TITLE TJvCPSFlag type>
Summary
  \Controls the creation of a process by a TJvCreateProcess component.
Description
  TJvCPSFlag values controls the creation of a process by a TJvCreateProcess component.
  
  TJvCPSFlags is a set of TJvCPSFlag values.
See Also
  TJvCreateProcess.Priority, TJvCreateProcess.Run

----------------------------------------------------------------------------------------------------
@@TJvConsoleOption.coSeparateError
Description for coSeparateError

----------------------------------------------------------------------------------------------------
@@TJvConsoleOptions
<TITLE TJvConsoleOptions type> <COMBINE TJvConsoleOption>

----------------------------------------------------------------------------------------------------
@@TJvConsoleOption
<TITLE TJvConsoleOption type>
Summary
  Enumerates console options.
Description
  Use the TJvConsoleOption type to specify console options. TJvConsoleOptions is a set of
  TJvConsoleOption values.

----------------------------------------------------------------------------------------------------
@@TJvConsoleOption.coOwnerData
If this flag is set, the component doesn't fill the <LINK TJvCreateProcess.ConsoleOutput,
ConsoleOutput> list with the output generated by a console process it has created. Applies only if the coRedirect flag is on.

----------------------------------------------------------------------------------------------------
@@TJvConsoleOption.coRedirect
Redirects the standard input and output of console processes.

----------------------------------------------------------------------------------------------------
@@TJvBaseReader.OnRead
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvBaseReader.OnRawRead
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvBaseReader
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@TJvBaseReader.ConsoleOutput
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@EJvProcessError
<TITLE EJvProcessError type>
Summary
  EJvProcessError is the exception class for TJvCreateProcess components.
Description
  EJvProcessError is raised when the user calls a method of TJvCreateProcess while <LINK
  TJvCreateProcess.State, State> has an invalid value.
  
  For example, if TJvCreateProcess is waiting for a process to end, calling <LINK
  TJvCreateProcess.Run,
  Run> raises an EJvProcessError error.

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.Priority
Summary
  Indicates the priority of the process associated with the TJvProcessEntry object.
Description
  \Read Priority to determine the priority of the process associated with the TJvProcessEntry object.
See Also
  TJvProcessEntry.PriorityText

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.PriorityText
Summary
  Converts a priority into a string that describes the priority.
Description
  Call PriorityText to obtain a text description of the priority associated with a process. For
  Example, use this function when the application needs to display a description of a priority to the
  user.
Parameters
  Priority - The priority that needs to be converted to a string.
Return value
  A string describing the priority indicated by parameter Priority.
See Also
  TJvProcessEntry.Priority

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.ProcessID
Summary
  Returns the process ID of the process associated with the TJvProcessEntry object.
Description
  \Read ProcessID to determine the process ID of the process associated with the TJvProcessEntry
  object. The returned value is equal to the AProcessID parameter specified when creating the object
  by calling Create.
See Also
  TJvProcessEntry.FileName, TJvProcessEntry.ProcessName

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.ProcessName
Summary
  Returns the name of the process associated with the TJvProcessEntry object.
Description
  \Read ProcessName to determine the name of the process associated with the TJvProcessEntry object.
  The returned value is equal to the AProcessName parameter specified when creating the object by
  calling Create.
See Also
  TJvProcessEntry.FileName, TJvProcessEntry.ProcessID

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.SmallIconIndex
Summary
  Returns the index of the file's small icon.
Description
  \Read SmallIconIndex to determine the index of the file's small icon within the system image list.
  
  SmallIconIndex will only return a valid icon index if you did specify a valid path and filename for
  the AFileName parameter when creating the object by calling Create.
See Also
  TJvProcessEntry.Create, TJvProcessEntry.LargeIconIndex

----------------------------------------------------------------------------------------------------
@@TJvProcessEntry.Terminate
Summary
  Ends process execution.
Description
  Call Terminate to terminate a process created with TJvCreateProcess. It will unconditionally cause
  the created process to exit. Use it only in extreme circumstances, otherwise use <LINK
  TJvProcessEntry.Close, Close>.
Return value
  Returns True on success, otherwise returns False.
See Also
  TJvProcessEntry.Close

----------------------------------------------------------------------------------------------------
@@TJvProcessPriority
<TITLE TJvProcessPriority type>
Summary
  Represents types of priority classes of a process created with TJvCreateProcess.
Description
  The TJvProcessPriority type defines values that represents the priority class of a process created
  with TJvCreateProcess.
See Also
  TJvCreateProcess.CreationFlags, TJvCreateProcess.Run

----------------------------------------------------------------------------------------------------
@@TJvProcessPriority.ppIdle
Process whose threads run only when the system is idle and are preempted by the threads of any
process running in a higher priority class. An example is a screen saver. The idle priority class is inherited by child processes.

----------------------------------------------------------------------------------------------------
@@TJvProcessPriority.ppNormal
Process with no special scheduling needs.

----------------------------------------------------------------------------------------------------
@@TJvProcessPriority.ppHigh
Process that performs time-critical tasks that must be executed immediately for it to run correctly.
The threads of a high-priority class process preempt the threads of normal or idle priority class processes. An example is the Task List, which must respond quickly when called by the user, regardless of the load on the operating system. Use extreme care when using the high-priority class, because a high-priority class CPU-bound application can use nearly all available cycles.

----------------------------------------------------------------------------------------------------
@@TJvProcessPriority.ppRealTime
Process that has the highest possible priority. The threads of a real-time priority class process
preempt the threads of all other processes, including operating system processes performing important tasks. For example, a real-time process that executes for more than a very brief interval can cause disk caches not to flush or cause the mouse to be unresponsive.

