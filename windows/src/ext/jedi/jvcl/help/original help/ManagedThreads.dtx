@@CurrentMTThread

Description
  This global function returns the MT thread, which is currently active. The caller is running in
  the context of this thread. The return value will be nil if the caller is running in the context
  of the main VCL thread (or any other non MT thread).

Note
  The TJvMTThread type is equal to the TJvMtSingleThread type defined in JvMtComponents.pas.
----------------------------------------------------------------------------------------------------
@@TJvMtSingleThread

Description
  This class is the JEDI name for TJvMTThread, it is exactly the same as the TJvMTThread class.

----------------------------------------------------------------------------------------------------
@@TJvMTThread

Description
  This class represents one managed thread.

  The JEDI name for TJvMTThread is TJvMtSingleThread.
  The wrapper component class is called TJvMtThread (note that the wrapper can spawn multiple MT thread's).
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Create

Description
  Create the managed thread. Specify a Manager and a unique ticket.
  You should never need to call this constructor yourself. Instead use a MT Manager to create new
  instances of this class.

----------------------------------------------------------------------------------------------------
@@TJvMTThread.CheckTerminate
Description
  This functions checks if the thread needs to terminate. It will raise an EMTTerminate exception
  if the thread needs to terminate.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Release
Description
  Releases the thread after an Acquire by the MT Manager. If multiple call to acquire where made, the
  same amount of calls to Release must be performed to actually release the thread.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Run
Description
  Activates the thread. The OnExecute event will fire during or after a call to Run.
  The thread status should be stInitializing or stWaiting, any other state will raise an EMTThread exception.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Synchronize

Description
  Runs method in the context of the main thread. This function will only return after the method has finished.

Note
  Should only be called from the context of the this thread.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Terminate

Description
  Terminates the thread. The thread will terminate as soon as possible, but this does not have to be immediately. See also the Wait function.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Wait

Description
  Returns when the thread state becomes tsFinished.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Name

Description
Name of the thread. This name will be displayed in the Delphi Threads debug window.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.OnExecute

Description
Run context: background thread
Called when the thread enters tsRunning state.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.OnFinished
Description
Run context: main VCL thread
Called when a thread has finished.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.OnTerminating

Description
Run context: background thread

Always called after OnExecute. The thread has entered tsTerminating state.
Warning
  You can NOT use the MT data components, and you can NOT use the MT Section components.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.ReferenceCount
Number of times the thread is Acquired. Calling Release decreases this value. When the counter is zero the thread will destroy itself if the status becomes tsFinished.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Status
Description
----------------------------------------------------------------------------------------------------
@@TJvMTThread.TerminateSignal

Description
This semaphore enters signalled state when the thread has to terminate. The synchronisation classes use this to detect a terminate during a wait.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.ThreadManager

Description
The manager.
----------------------------------------------------------------------------------------------------
@@TJvMTThread.Ticket

Description
The unique ticket value.
----------------------------------------------------------------------------------------------------
@@TJvMtComponent

Description
The base class for al the JEDI Managed Thread components.
----------------------------------------------------------------------------------------------------
@@TJvMtSingleThread

Description
The TJvMtSingleThread class is the same as the internal TJvMTThread.

----------------------------------------------------------------------------------------------------
@@TJvMtThreadEvent

Description
Managed thread event. The Sender is the component from which the MTThread was started with Run() or RunCopy().

----------------------------------------------------------------------------------------------------
@@TJvMtManager

Description
Manages the TJvMtThread components. 

----------------------------------------------------------------------------------------------------
@@TJvMtManager.AcquireNewThread

Description
Returns a creates a new TJvMtSingleThread. And returns it in an acquired state. It should be released by calling the Release() of the MtSingleThread.

----------------------------------------------------------------------------------------------------
@@TJvMtManager.AcquireThread

Description
Finds the MtSingleThread which has an corresponding Ticket. It then acquires the thread and returns it.  Return value is True if the function succeeded, False otherwise.

----------------------------------------------------------------------------------------------------
@@TJvMtManager.ActiveThreads

Description
Returns True if there is one or more active JvMtSingleThread, False otherwise.

----------------------------------------------------------------------------------------------------
@@TJvMtManager.ReleaseThread

Description
Releases a thread previously acquired with Acquire(). It is the same as calling the Release() method of the acquired thread.

----------------------------------------------------------------------------------------------------
@@TJvMtManager.TerminateThreads

Sends the terminate signal to all running threads. The function can return before all threads have actually terminated. Call WaitThreads() after this function to make sure that all threads have actually finished.

----------------------------------------------------------------------------------------------------
@@TJvMtManager.WaitThreads

Description
Waits for all threads to have gone into tsTerminated state or have been destroyed.
----------------------------------------------------------------------------------------------------
@@TJvMtManagedComponent


Description
Base class for all components belonging to a manager.

----------------------------------------------------------------------------------------------------
@@TJvMtManagedComponent.Manager

Description
Design+Runtime. Set/Get the manager to which this component belongs.

 
----------------------------------------------------------------------------------------------------
@@TMtThread

Description
This component can be used to start one or more TJvMtSingleThreads.

----------------------------------------------------------------------------------------------------
@@TMtThread.CheckTerminate

Description
Should only be called from the OnExecute event. This method will raise an EMTTerminate exception if the thread needs to terminate. This makes it easy to use end-less-loops. 

Example
while True do
begin
  MTThread.CheckTerminate;
  DoSomethingImportant;
end;


----------------------------------------------------------------------------------------------------
@@TMtThread.Run

Description
Starts one and only one TJvMtSingleThread. An exception will be raised if the Run() method is called more then once. Use the RunCopy if you want to run multiple instances of the thread.

----------------------------------------------------------------------------------------------------
@@TMtThread.RunCopy
Description
Start a TJvMtSingleThread. If there is all ready a thread running it will be disconnected from the TMtThread component and released. The disconnected thread will continue to run. If you need to reference it, use the Ticket value.

----------------------------------------------------------------------------------------------------
@@TMtThread.Synchronize

Description
Should only be called from the OnExecute event.
It pauses the thread, and runs the Method in the context of the main VCL thread. When the method has finished the thread will resume. 

Warning 
  The thread will not terminate during the waiting. So make sure the Method is short and does not use critical sections and such.
----------------------------------------------------------------------------------------------------
@@TMtThread.Terminate

Description
Terminates the last started JvMtSingleThread using Run() or RunCopy(). The functions can return before the thread has actually terminated. See also the management TerminateThreads() method to terminate other JvMtSingleThreads started using the RunCopy().
----------------------------------------------------------------------------------------------------
@@TMtThread.Wait

Description
Returns when the thread has finished.
----------------------------------------------------------------------------------------------------
@@TMtThread.Status

----------------------------------------------------------------------------------------------------
@@TMtThread.Ticket

Description
A number identifying this thread. The number is unique during the runtime of the application.
----------------------------------------------------------------------------------------------------
@@TMtThread.RunOnCreate
Description
If set to True the thread will be started as soon as the component is created at runtime.
----------------------------------------------------------------------------------------------------
@@TMtThread.OnExecute

Description
Run context: background thread
Called when the thread enters tsRunning state.
----------------------------------------------------------------------------------------------------
@@TMtThread.OnFinished

Description
Run context: main VCL thread
Called when a thread has finished. 
----------------------------------------------------------------------------------------------------
@@TMtThread.OnTerminating

Description
Run context: background thread
Always called after OnExecute. The thread has entered tsTerminating state.
Warning: You can NOT use the MT data components, and you can NOT use the MT Section components.
----------------------------------------------------------------------------------------------------
@@TJvMtAsyncBufferBase 


Description
Base class for the data components

----------------------------------------------------------------------------------------------------
@@TJvMtAsyncBufferBase.Read

Description
Waits for an object to arrive in the buffer and returns it. The caller takes owner ship of the object and is thus responsible for destroying it when needed. The function can return nil pointer if this was put into the buffer using Write().
Can raise EMTTerminate.

----------------------------------------------------------------------------------------------------
@@TJvMtAsyncBufferBase.Write

Description
Waits for room in the buffer and writes the object into the buffer.
After an call to Write() the buffer owns the object (even if the EMTTerminate is raised)
Can raise EMTTerminate.

----------------------------------------------------------------------------------------------------
@@TJvMtAsyncBufferBase.MaxBufferSize

Description
Specifies the maximum number of objects allowed in the buffer.
  
----------------------------------------------------------------------------------------------------
@@TJvMtThreadToVCL 
Description
(none)
----------------------------------------------------------------------------------------------------
@@TJvMtThreadToVCL.OnCanRead

Description
Called in the context of the main VCL thread. At least one object can be read from the buffer during this event. For each object in the buffer this event will fire exactly once.

----------------------------------------------------------------------------------------------------
@@TJvMtVCLToThread 
Description

----------------------------------------------------------------------------------------------------
@@TJvMtVCLToThread.OnCanWrite

Description
Called in the context of the main VCL thread. At least one object can be written to the buffer during this event. This event will fire after a Write() as soon as there is buffer space. This event will also fire when the object is first created during runtime (and there is buffer space).
  
----------------------------------------------------------------------------------------------------
@@TJvMtThreadToThread 

Description
Used for exchanging data between threads. All calls are blocking.
See TJvMtAsyncBufferBase for method description.
----------------------------------------------------------------------------------------------------
@@TJvMtSectionBase 

Description
Base class for all JvMt Section components.
----------------------------------------------------------------------------------------------------
@@TJvMtSectionBase.Enter

Description
Try to enter the section. The method will only return if the section has been entered.
This method will raise a TMTTerminate exception if the thread has to terminate.


----------------------------------------------------------------------------------------------------
@@TJvMtSectionBase.Leave

Description
Try to leave the section. The method will only return if the section has been left.
This method will raise a TMTTerminate exception if the thread cannot leave immediately and has to terminate.

----------------------------------------------------------------------------------------------------
@@TJvMtSectionBase.Active

Description
Read only. Returns true if the section has been used at least once.


----------------------------------------------------------------------------------------------------
@@TJvMtSection 

Description
The most basic section.

----------------------------------------------------------------------------------------------------
@@TJvMtSection.AllowRecursion

Description
When the Enter() method is called multiple time by the same thread this option determines if a 2nd call blocks or succeeds.

----------------------------------------------------------------------------------------------------
@@TJvMtSection.InitEntered

Description
Specify if the section is put in Entered state during creation at runtime.
----------------------------------------------------------------------------------------------------
@@TJvMtCountingSection 

Description
Allows a maximum amount of threads into the section. The section does not allow recursion (see TJvMtSection).
----------------------------------------------------------------------------------------------------
@@TJvMtCountingSection.InitCount

Description
Specifies the number threads inside the section when the component is created at runtime. The threads don't actually have to be inside.

----------------------------------------------------------------------------------------------------
@@TJvMtCountingSection.MaxCount

Description
The maximum number call's to Enter() before the section starts blocking.
----------------------------------------------------------------------------------------------------
@@TJvMtMonitorSection 

Description
This component represents a monitored section. Only one thread can be active inside a monitor, but 
multiple threads can be suspended inside. 

A monitor has conditions. A thread can signal a condition or wait for a condition. The Signal 
and Wait of a condition should not be confused with the Enter and Leave of a section, because 
they are fundamentally different.

See also
  "Operating System Concepts. Sixth edition", John Wiley & Sons Inc, paragraph 7.7.
----------------------------------------------------------------------------------------------------
@@TJvMtMonitorSection.Enter
Description
Enter the section.

----------------------------------------------------------------------------------------------------
@@TJvMtMonitorSection.Leave

Description
Leave the section.
----------------------------------------------------------------------------------------------------
@@TJvMtMonitorSection.Condition

Description
Returns a condition associated with the specified ID. If the condition does not exist yet, it will automatically be created.

Example
const 
  mcThereIsFire = 1

thread1:
Monitor.Enter;
try
  Monitor.Condition[mcThereIsFire].Wait;
  PutOutFire;
finally
  Monitor.Leave; 
end;

thread2:
Monitor.Enter;
try
  MakeSomeFire;
  Monitor.Condition[mcThereIsFire].Signal;
finally
  Monitor.Leave;
end;

----------------------------------------------------------------------------------------------------
@@TMTCondition 

Description
Condition belonging to a monitor section.
----------------------------------------------------------------------------------------------------
@@TMTCondition.Signal

Description
Signal a condition. If there are other thread(s) waiting for this signal they will be resumed one at a time before this thread continues.
Can raise EMTTerminate

----------------------------------------------------------------------------------------------------
@@TMTCondition.Wait

Description
Wait for a condition. The thread will be suspended until the condition is signalled by another thread.
Can raise EMTTerminate

----------------------------------------------------------------------------------------------------
@@TMTCondition.ID

Description
Returns the ID which identifies the condition. This ID is unique within the monitor this condition belongs to.

----------------------------------------------------------------------------------------------------
@@TMTCondition.Monitor

Description
Returns the monitor this condition belongs to.
----------------------------------------------------------------------------------------------------
@@TMTThreadStatus

Description
  Enumerated type that describes the status of a thread.
  
@@TMTThreadStatus.tsInitializing 
  The thread is created but not running
@@TMTThreadStatus.tsWaiting      
  The thread was running, but is waiting for something
@@TMTThreadStatus.tsRunning      
  The thread is running
@@TMTThreadStatus.tsTerminating  
  The thread is running, but going to stop soon
@@TMTThreadStatus.tsFinished     
  The thread has finished but is still Acquired


