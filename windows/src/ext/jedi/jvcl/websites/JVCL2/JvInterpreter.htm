<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>JVCL Interpreter</title>
<meta name="Microsoft Border" content="b, default">
</head>

<body bgcolor="#EEEEEE"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">

<font face="Verdana" size="2">
<h1><font color="#FF0000">JVCL Interpreter</font></h1>
</font>
		<P>JvInterpreter allows you to embed powerful command language into your 
			Delphi/C++Builder application. You can use it to create macros, scripts, 
			reports, custom forms and other means to make your application more flexible 
			and powerful. JvInterpreter has the following features:</P>
		<UL>
			<LI>
			simple Pascal syntax, with support for procedures, local and global variables 
			of simple data types, variant and array types in your script
			<LI>
			allows to manipulate published properties and standard events from script 
			without any additional work
			<LI>
			support for OLE automation calls (control Excel, Word and other OLE enabled 
			applications from your script)
			<LI>
			support for calls to DLLs
			<LI>
			support for assigning of script procedures to your application events
			<LI>
			allows binding of your application procedures, classes, records and enum types 
			to interpreter language
			<LI>
				ready bindings to most standard VCL components</LI></UL>
		<P>The future version will have even more features (many of them are already 
			implemented in JVCL CVS, download <A HREF="http://jvcl.sourceforge.net/daily">
                        daily CVS snapshots</A> to have a look at them):</P>
		<UL>
			<LI>
			support for record, classes and dynamic arrays declaration from script
			<LI>
			allows binding of your application interfaces (IInterface and IUnknown 
			descendants) to interpreter language
			<LI>
			debugger
			<LI>
				support for declaring new datatypes, specific to your application</LI></UL>
		<P>JvInterpreter was first developed by Andrei Prygounkov as a part of RALib 
			library. Now it is developed as a part of <A href="http://jvcl.sourceforge.net">JEDI-VCL 
				(JVCL)</A> library by JVCL developers. Refer to <A href="http://jvcl.sourceforge.net">
				JVCL page</A> for information about license, downloading, bug reporting, 
			contributing and so on. Please note that JvInterpreter is broken in JVCL 2.10, 
			so you should patch it with updated JvInterpreter files.
		</P>
		<P>As our help team is overdriven and help is incomplete, here are answers for most 
			common questions. Also take a look at JvInterpreter examples (you can find them 
			in examples\RALib folder of your JVCL installation).</P>
		<H3>How can I embed JvInterpreter into my program?</H3>
		<P>Drop a JvInterpreterProgram component on your form/datamodule. Assign script 
			text to Pas property. Call Run method. It will look for a procedure named 
			'main' in your script and run it. Use this script for testing:</P>
<PRE>unit HelloWorldFromJvInterpreter;

procedure Main;
begin
  ShowMessage('Hello world!');
end;

end.</PRE>
		<P>If you don't use "Build with runtime packages" option then it will most likely
                 complain about undeclared identifier ShowMessage. You can manually add unit
                 JvInterpreter_all.pas from your JVCL installation to your project to correct
                 the problem.</P>
		<H3>How can I tell JvInterpreter to run specific procedure/function from a user 
			script?</H3>
		<P>Use a CallFunction method. Suppose you need to call this script function:</P>
		<P><PRE>unit JvInterpreterFunctionCall;

function MyPlus(A, B: Integer): Integer;
begin
  Result := A + B;
end;

end.</PRE>
		<P>Then in Delphi write:</P>
		<PRE>FuncResult := JvInterpreterProgram1.CallFunction('MyPlus', nil, [10, 20]);</PRE>
		<P>You should get 30 in FuncResult.</P>
		<P></P>
		<H3>How can I supply some arguments/parameters from my application to a user 
			script?</H3>
		<P>Use OnGetValue event. Suppose you need to supply some object as a variable named 
			'MyApplication' in your script. Then write:</P>
		<PRE>procedure TForm1.JvInterpreterProgram1GetValue(Sender: TObject; Identifier: string;
  var Value: Variant; Args: TJvInterpreterArgs; var Done: Boolean);
begin
  if AnsiSameText(Identifier, 'MyApplication') then
  begin
    Value := O2V(MyApplicationObject);
    Done := True;
  end;
end;</PRE>
		<H3>How can I bind procedures/class methods from my application for use in a 
			script?</H3>
		<P>There is a global variable GlobalJvInterpreterAdapter in unit JvInterpreter. You 
			should use its methods such as AddGet, AddClass, AddSet and so on from 
			initialization part of your unit. See units that implement binding for standart 
			VCL components as examples. Start with JvInterpreter_all.pas and then study, for 
			example, JvInterpreter_StdCtrls.pas from your JVCL installation.</P>
		<H3>I need an editor component with syntax highlighting for script editing</H3>
		<P>Use JvHLEditor, that is also a part of JVCL library. Also take a look at <A href="http://jediedit.sourceforge.net">
				JEDI-Editor</A>.</P>
		<H3>I need a form designer &amp; object inspector for use in conjunction with 
			JvInterpreter</H3>
		<P>JvInspector is the perfect object inspector. It is also a part of JVCL library. 
			Unfortunately, JVCL doesn't contain a form designer yet. I use ExtLib 2.1 (<A href="http://www.torry.net/packslite.htm##7695">info</A>
			on torry.net, <A href="http://www.torry.net/vcl/packs/lite/extlib.zip">download</A>). 
			Some hints of using JvInterpreter with form designer:</P>
		<P>1. Describe a 'Self' variable using OnGetValue event. It should point to a form. 
			Also describe in OnGetValue all components owned by form. Here is the sample:</P>
		<PRE>procedure TForm1.JvInterpreterProgram1GetValue(Sender: TObject; Identifier: string;
  var Value: Variant; Args: TJvInterpreterArgs; var Done: Boolean);
var
  I: Integer;
begin
  if AnsiSameText(Identifier, 'Self') then
  begin
    Value := O2V(DesignedForm);
    Done := True;
    Exit;
  end;
  
  for I := 0 to DesignedForm.ComponentCount - 1 do
  begin
    if AnsiSameText(Identifier, DesignedForm.Components[I].Name) then
    begin
      Value := O2V(DesignedForm.Components[I]);
      Done := True;
      Exit;
    end;
  end;
end;</PRE>
		<P>2. As ExtLib doesn't support visual event editing, assign events in a main 
			procedure of the script. Here is a sample script:</P>
		<PRE>unit SampleJvInterpreterFormWithACloseButton;

procedure CloseButtonClick(Sender: TObject);
begin
  Self.Close;
end;

procedure Main;
begin
  CloseButton.OnClick := CloseButtonClick;
end;

end.</PRE>
		<P>Should you develop a better way, please e-mail it to me :) My e-mail: 
			ode !at! prbank !dot! ru.</P>
<p><font SIZE="2">Dmitry</font></p>
&nbsp;

<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

<hr>
<font face="Verdana" size="2">JVCL is hosted by</font> <font face="Verdana" size="2"><a href="http://sourceforge.net" target="_blank"><img src="http://sourceforge.net/sflogo.php?group_id=45786&amp;type=1" border="0" alt="SourceForge.net Logo"></a></font>

</td></tr><!--msnavigation--></table></body>

</html>
