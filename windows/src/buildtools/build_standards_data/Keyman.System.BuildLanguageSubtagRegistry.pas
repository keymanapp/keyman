unit Keyman.System.BuildLanguageSubtagRegistry;

interface

uses
  System.Classes;

type
  TBuildLanguageSubtagRegistry = class
  private
    FSubtagRegistry: TStrings;
  public
    constructor Create(ASubtagRegistryFile: string);
    destructor Destroy; override;
    procedure BuildSuppressScriptRegistry(const DestinationFile: string);
  end;

implementation

uses
  System.SysUtils;

{ TBuildLanguageSubtagRegistry }


procedure TBuildLanguageSubtagRegistry.BuildSuppressScriptRegistry(const DestinationFile: string);
var
  n: Integer;
  s: string;
  FLangCode: string;
  FirstLine: Boolean;
  FResult: TStringList;
begin
  FResult := TStringList.Create;
  try
    FResult.Add('unit Keyman.System.Standards.BCP47SuppressScriptRegistry;');
    FResult.Add('');
    FResult.Add('interface');
    FResult.Add('');
    FResult.Add('// File-Date: '+FormatDateTime('yyyy-mm-dd hh:nn:ss', Now));
    FResult.Add('// Extracted from http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry');
    FResult.Add('// Generated by build_standards_data');
    FResult.Add('');
    FResult.Add('const');
    FResult.Add('  SuppressScriptSubtagRegistry: string =');
    n := 0;
    FLangCode := '';
    FirstLine := True;
    while n < FSubtagRegistry.Count-1 do
    begin
      s := Trim(FSubtagRegistry[n]);
      if s = '%%' then
        FLangCode := '';
      if Copy(s,1,Length('Subtag:')) = 'Subtag:' then
        FlangCode := Trim(Copy(s,Length('Subtag:')+1,MaxInt));
      if Copy(s,1,Length('Suppress-Script:')) = 'Suppress-Script:' then
      begin
        if not FirstLine then
          FResult[FResult.Count-1] := FResult[FResult.Count-1] + '#13#10+';
        FirstLine := False;
        FResult.Add('    '''+FLangCode+'='+Trim(Copy(s,Length('Suppress-Script:')+1,MaxInt))+'''');
      end;
      Inc(n);
    end;
    FResult[FResult.Count-1] := FResult[FResult.Count-1] + ';';
    FResult.Add('');
    FResult.Add('implementation');
    FResult.Add('');
    FResult.Add('end.');

    FResult.SaveToFile(DestinationFile);
  finally
    FResult.Free;
  end;
end;

constructor TBuildLanguageSubtagRegistry.Create(ASubtagRegistryFile: string);
begin
  FSubtagRegistry := TStringList.Create;
  FSubtagRegistry.LoadFromFile(ASubtagRegistryFile);
end;

destructor TBuildLanguageSubtagRegistry.Destroy;
begin
  inherited Destroy;
  FreeAndNil(FSubtagRegistry);
end;

end.
