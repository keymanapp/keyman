#!/usr/bin/python3

import argparse
import logging
import sys
import gi

gi.require_version('Gtk', '3.0')

from gi.repository import Gtk

from keyman_config import __versionwithtag__, __pkgversion__, add_standard_arguments, initialize_logging, initialize_sentry
from keyman_config.handle_install import download_and_install_package
from keyman_config.ibus_util import verify_ibus_daemon
from keyman_config.view_installed import ViewInstalledWindow


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='km-config shows the currently installed ' +
                                     'Keyman keyboard packages and allows you to view ' +
                                     'information about them. It enables you to download new ' +
                                     'keyboard packages from the website or install from ' +
                                     'local files.')
    parser.add_argument('-i', '--install', action='store', help='download and/or install .kmp ' +
                        'package. INSTALL can either be a downloaded .kmp file, a file:// URL ' +
                        'pointing to a .kmp file, or a keyman:// URL, possibly with a ' +
                        'bcp47=<language> specified (e.g. keyman://download/keyboard/' +
                        'sil_el_ethiopian_latin?bcp47=ssy-latn).')
    parser.add_argument('url', nargs='?', default='', metavar='INSTALL',
                        help='download and/or install .kmp ' +
                        'package. INSTALL can either be a downloaded .kmp file, a file:// URL ' +
                        'pointing to a .kmp file, or a keyman:// URL, possibly with a ' +
                        'bcp47=<language> specified (e.g. keyman://download/keyboard/' +
                        'sil_el_ethiopian_latin?bcp47=ssy-latn).')
    add_standard_arguments(parser)

    args = parser.parse_args()

    Gtk.init(sys.argv[1:])

    initialize_logging(args)
    initialize_sentry()

    logging.info('Keyman version %s %s', __versionwithtag__, __pkgversion__)

    verify_ibus_daemon(False)

    if args.install:
        download_and_install_package(args.install)
    elif args.url:
        download_and_install_package(args.url)
    else:
        w = ViewInstalledWindow()
        try:
            w.run()
        except KeyboardInterrupt:
            logging.debug('User cancelled the app')
        w.destroy()
