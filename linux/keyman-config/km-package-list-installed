#!/usr/bin/python3

import argparse
import logging
import os
from keyman_config import __version__


def main():
    parser = argparse.ArgumentParser(description='Show installed Keyman keyboard packages with name, version, id.')
    parser.add_argument('-l', "--long", help='additionally show description', action="store_true")
    parser.add_argument('-s', "--shared", help='show keyboard packages installed in shared area', action="store_true")
    parser.add_argument('-o', "--os", help='show keyboard packages installed by the OS', action="store_true")
    parser.add_argument('-u', "--user", help='show keyboard packages installed in user area', action="store_true")
    parser.add_argument('--version', action='version', version='%(prog)s version ' + __version__)
    parser.add_argument('-v', '--verbose', action='store_true', help='verbose logging')
    parser.add_argument('-vv', '--veryverbose', action='store_true', help='very verbose logging')

    args = parser.parse_args()
    if args.verbose:
        logging.basicConfig(level=logging.INFO, format='%(levelname)s:%(message)s')
    elif args.veryverbose:
        logging.basicConfig(level=logging.DEBUG, format='%(levelname)s:%(message)s')
    else:
        logging.basicConfig(format='%(levelname)s:%(message)s')

    all = not args.user and not args.shared and not args.os
    from keyman_config.list_installed_kmp import get_installed_kmp, get_install_area_path, InstallArea
    if args.user or all:
        installed_kmp = get_installed_kmp(InstallArea.IA_USER)
        if args.verbose or args.veryverbose:
            print("--- Installed user Keyman keyboard packages (%s) ---" % (get_install_area_path(InstallArea.IA_USER)))
        else:
            print("--- Installed user Keyman keyboard packages ---")
        print_keyboards(installed_kmp, args.long)
    if args.shared or all:
        installed_kmp = get_installed_kmp(InstallArea.IA_SHARED)
        if args.verbose or args.veryverbose:
            print("--- Installed shared Keyman keyboard packages (%s) ---" %
                  (get_install_area_path(InstallArea.IA_SHARED)))
        else:
            print("--- Installed shared Keyman keyboard packages ---")
        print_keyboards(installed_kmp, args.long)
    if args.os or all:
        installed_kmp = get_installed_kmp(InstallArea.IA_OS)
        if args.verbose or args.veryverbose:
            print("--- Installed OS Keyman keyboard packages (%s) ---" % (get_install_area_path(InstallArea.IA_OS)))
        else:
            print("--- Installed OS Keyman keyboard packages ---")
        print_keyboards(installed_kmp, args.long)


def print_keyboards(installed_kmp, verbose):
    for packageID in sorted(installed_kmp):
        print(installed_kmp[packageID]['name'] + ", version:", installed_kmp[packageID]['version'] + ", id:", packageID)
        if verbose:
            if installed_kmp[packageID]['version'] != installed_kmp[packageID]['kmpversion']:
                print("Version mismatch. Installed keyboard package is %s. Website says it is %s."
                      % (installed_kmp[packageID]['kmpversion'], installed_kmp[packageID]['version']))
            if installed_kmp[packageID]['name'] != installed_kmp[packageID]['kmpname']:
                print("Name mismatch. Installed keyboard package is %s. Website says it is %s."
                      % (installed_kmp[packageID]['name'], installed_kmp[packageID]['kmpname']))

            if installed_kmp[packageID]['description']:
                print(installed_kmp[packageID]['description'])
            else:
                print("No description")
            print(os.linesep)


if __name__ == "__main__":
    main()
