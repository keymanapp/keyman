kmnTree: line*
line: contentLine|blankLine
contentLine: WHITESPACE? content WHITESPACE? COMMENT? NEWLINE
blankLine: WHITESPACE? COMMENT? NEWLINE
padding: continuationNewline|WHITESPACE
continuationNewline: WHITESPACE? CONTINUATION WHITESPACE? NEWLINE WHITESPACE?
content: stringSystemStoreAssign|casedkeysStoreAssign|hotkeyStoreAssign|
  variableStoreAssign|ruleBlock
paddedText: padding text
text: textRange|simpleText|outsStatement
simpleText: STRING|virtualKey|U_CHAR
textRange: simpleText rangeEnd+
rangeEnd: WHITESPACE? RANGE WHITESPACE? simpleText
virtualKey: LEFT_SQ WHITESPACE? spacedShiftCode* KEY_CODE WHITESPACE? RIGHT_SQ
spacedShiftCode: shiftCode WHITESPACE
shiftCode: SHIFT|CAPS|SHIFT_CODE
outsStatement: OUTS bracketedStoreName
ruleBlock: beginBlock|groupBlock|usingKeysProductionBlock|readOnlyProductionBlock|
  contextProductionBlock
beginBlock: beginStatement spacedChevron useStatement
beginStatement: BEGIN spacedEntryPoint?
spacedEntryPoint: WHITESPACE entryPoint
entryPoint: UNICODE|NEWCONTEXT|POSTKEYSTROKE|ANSI
spacedChevron: WHITESPACE CHEVRON WHITESPACE
useStatement: USE bracketedGroupName
bracketedGroupName: LEFT_BR WHITESPACE? groupNameOrKeyword WHITESPACE? RIGHT_BR
groupNameOrKeyword: groupName|permittedKeyword
groupName: PARAMETER
groupBlock: groupStatement spacedGroupQualifier?
groupStatement: GROUP bracketedGroupName
spacedGroupQualifier: WHITESPACE groupQualifier
groupQualifier: usingKeys|READONLY
usingKeys: USING WHITESPACE KEYS
usingKeysProductionBlock: usingKeysLhsBlock spacedChevron rhsBlock
readOnlyProductionBlock: readOnlyLhsBlock spacedChevron rhsBlock
contextProductionBlock: contextLhsBlock spacedChevron rhsBlock
usingKeysLhsBlock: usingKeysInputBlock
readOnlyLhsBlock: MATCH|NOMATCH|readOnlyInputBlock|ifLikeBlock
contextLhsBlock: contextInputBlock
usingKeysInputBlock: paddedIfLikeBlock? paddedInputContext? PLUS padding keystroke
readOnlyInputBlock: paddedIfLikeBlock? keystroke
contextInputBlock: paddedIfLikeBlock? inputContext
paddedInputContext: inputContext padding
inputContext: inputElement paddedInputElement*
paddedInputElement: padding inputElement
inputElement: anyStatement|notAnyStatement|deadKeyStatement|contextStatement|text
keystroke: anyStatement|text
anyStatement: ANY bracketedStoreName
notAnyStatement: NOTANY bracketedStoreName
paddedIfLikeBlock: ifLikeBlock padding
ifLikeBlock: ifLikeStatement paddedIfLikeStatement*
paddedIfLikeStatement: padding IfLikeStatement
ifLikeStatement: ifStatement|platformStatement|baselayoutStatement
ifStatement: ifStoreStoreStatement|ifStoreStringStatement|ifSystemStoreStoreStatement
  ifSystemStoreStringStatement
ifStoreStoreStatement: IF LEFT_BR WHITESPACE? variableStoreName WHITESPACE
  comparison WHITESPACE variableStoreName WHITESPACE? RIGHT_BR
ifStoreStringStatement: IF LEFT_BR WHITESPACE? variableStoreName WHITESPACE
  comparison WHITESPACE STRING WHITESPACE? RIGHT_BR
ifSystemStoreStoreStatement: IF LEFT_BR WHITESPACE? AMPHASAND systemStoreName
  WHITESPACE comparison WHITESPACE variableStoreName WHITESPACE? RIGHT_BR
ifSystemStoreStringStatement: IF LEFT_BR WHITESPACE? AMPHASAND systemStoreName
  WHITESPACE comparison WHITESPACE STRING WHITESPACE? RIGHT_BR
ifSystemStoreName: PLATFORM|LAYER|BASELAYOUT|NEWLAYER|OLDLAYER
comparison:EQUAL|NOT_EQUAL
layerStatement: LAYER bracketedString
platformStatement: PLATFORM bracketedString
baselayoutStatement: BASELAYOUT bracketedString
bracketedString: LEFT_BR WHITESPACE? STRING WHITESPACE? RIGHT_BR
rhsBlock: contextOutputBlock|CONTEXT|NUL
contextOutputBlock: paddedContext? outputBlock
paddedContext: CONTEXT padding
outputBlock: outputStatement paddedOutputStatement*
paddedOutputStatement: padding outputStatement
outputStatement: useStatement|callStatement|setStoreStatement|saveStatement|
  deadKeyStatement|setLayerStatement|layerStatement|indexStatement|
  contextStatement|text|BEEP
callStatement: CALL bracketedStoreName
saveStatement: SAVE bracketedStoreName
deadKeyStatement: DEADKEY bracketedStoreName
indexStatement: INDEX LEFT_BR WHITESPACE? variableStoreName spacedComma offset WHITESPACE? RIGHT_BR
spacedComma: WHITESPACE? COMMA WHITESPACE?
offset: PARAMETER
contextStatement: CONTEXT LEFT_BR WHITESPACE? offset WHITESPACE? RIGHT_BR

# System and Variable Store Rules
stringSystemStoreAssign: stringSystemStore padding STRING
stringSystemStore: STORE LEFT_BR WHITESPACE? AMPHASAND stringSystemStoreName WHITESPACE? RIGHT_BR
stringSystemStoreName: BITMAP|COPYRIGHT|DISPLAYMAP|ETHNOLOGUECODE|INCLUDECODES|
  KEYBOARDVERSION|KMW_EMBEDCSS|KMW_EMBEDJS|KMW_HELPFILE|KMW_HELPTEXT|KMW_RTL|
  LANGUAGE|LAYOUTFILE|MESSAGE|MNEMONICLAYOUT|NAME|TARGETS|VERSION|
  VISUALKEYBOARD|WINDOWSLANGUAGES|CAPSALWAYSOFF|CAPSONONLY|SHIFTFREESCAPS
casedkeysStoreAssign: casedkeysStore paddedText+
casedkeysStore: STORE LEFT_BR WHITESPACE? AMPHASAND CASEDKEYS WHITESPACE? RIGHT_BR
hotkeyStoreAssign: hotkeyStore padding virtualKey
hotkeyStore: STORE LEFT_BR WHITESPACE? AMPHASAND HOTKEY WHITESPACE? RIGHT_BR
variableStoreAssign: variableStore paddedText+
variableStore: STORE bracketedStoreName
bracketedStoreName: LEFT_BR WHITESPACE? variableStoreName WHITESPACE? RIGHT_BR
variableStoreName: PARAMETER
systemStoreName: stringSystemStoreName|CASEDKEYS|HOTKEY|LAYER|NEWLAYER|OLDLAYER
permittedKeyword: NEWCONTEXT|POSTKEYSTROKE
setStoreStatement: SET LEFT_BR WHITESPACE? variableStoreName WHITESPACE EQUAL
  WHITESPACE STRING WHITESPACE? RIGHT_BR
setLayerStatement: SET LEFT_BR WHITESPACE? AMPHASAND LAYER WHITESPACE EQUAL
  WHITESPACE STRING WHITESPACE? RIGHT_BR
