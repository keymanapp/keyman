/*
  Copyright:        Copyright (C) 2022 SIL International.
  Authors:          srl295
  This tool generates a .h version of the keyman_core_ldml.ts file
*/

import { constants } from './keyman_core_ldml.js';
import { argv } from "node:process";
import { writeFileSync } from "node:fs";

const [ hfile, shfile ] = argv.slice(2);

const keys = Object.keys(constants);
keys.sort();

const year = new Date().getFullYear();

const HEADER = `
Copyright:        Copyright (C) 2022-${year} SIL International.
Authors:          srl295
This file provides constants for the KMX Plus (LDML support) binary format,
to be shared between TypeScript, C++, and shell via the generator (below)

Generated File - do not edit

This file is generated by core/tools/ldml-const-builder/build.sh
based on core/include/ldml/keyman_core_ldml.ts
`;

// .h file
const hout = [
  '/**',
  ...HEADER.split('\n').map(s => ` * ${s}`),
  ' */',
  '',
  '#pragma once',
  '',
]; 

// .sh file
const shout = [
  '#!/usr/bin/env bash',
  ...HEADER.split('\n').map(s => `# ${s}`),
  '',
];

let errs = 0;

for (const key of keys) {
  const value: any = constants[key as keyof typeof constants];
  const upkey = key.toUpperCase();
  const type = typeof value;
  if (type === 'number') {
    hout.push(`#define LDML_${upkey} 0x${value.toString(16).toUpperCase()}`);
  } else if (type === 'string') {
    hout.push(`#define LDML_${upkey} "${value}"`);
    shout.push(`LDML_${upkey}="${value}"`);
  } else if (key === 'section') {
    // handle section table
    const subkeys = Object.keys(value);
    subkeys.sort();
    for (const subkey of subkeys) {
      const upsubkey = subkey.toUpperCase();
      const subvalue = value[subkey];
      if (subvalue !== subkey) {
        // "can't happen" because tsc would complain
        console.error(`In the SectionMap:  ${subkey}: '${subvalue}' - expected key and value to match.`);
        errs++;
      }
      const asnum = constants.hex_section_id(subkey);
      hout.push(`#define LDML_${upkey}ID_${upsubkey} 0x${asnum.toString(16).toUpperCase()} /* "${subkey}" */`);
      hout.push(`#define LDML_${upkey}NAME_${upsubkey}             "${subkey}"`);
    }
  } else if (key.endsWith('_map') || type === 'function') {
    // ignored
  } else {
    console.error(`Donâ€™t know what to do with constants[${key}] of type ${type}`);
    errs++;
  }
}

console.log(`- Writing ${hfile}`);
writeFileSync(hfile, hout.join('\n')+'\n', 'utf-8');
console.log(`- Writing ${shfile}`);
writeFileSync(shfile, shout.join('\n')+'\n', 'utf-8');

if (errs != 0) {
  throw Error(`Fail: ${errs} error(s), see above.`);
}
