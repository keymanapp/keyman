##Package: Plugin
##Status: Completed, Incomplete
----------------------------------------------------------------------------------------------------
@@JvPluginManager.pas
Summary
    Contains all code to make an application plugin enabled.
Author
  Tim Sullivan
----------------------------------------------------------------------------------------------------
@@TJvPluginManager.UnloadPlugin
Summary
  Unloads the specified plugin.
Description
  UnloadPlugin will unload the plugin at the specified index.
Parameters
  Index - Zero-based index into the Plugins array of the plugin to unload.
See Also
  TJvPluginManager.LoadPlugin, TJvPluginManager.PluginCount, TJvPluginManager.Plugins

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.ShowLoadPluginErrors
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.Plugins
Summary
  Array of loaded plugins.
Description
  Plugins is an array of loaded plugins. The index is zero-based and runs from 0 up to PluginCount-1.
Parameters
  Index - Zero-based index of the plugin to reference. This value must lie within the range 0 ..
           PluginCount-1.
See Also
  TJvPluginManager.GetLoadedPlugins, TJvPluginManager.PluginCount

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.SendMessage
Summary
  Broadcasts a message to all loaded plugins.
Description
  SendMessage will broadcast the specified message to all loaded plugins. It does so by calling <LINK
  TJvPlugIn.SendPluginMessage, SendPluginMessage> for each plugin in the Plugins array.
  
  If you want to send a message to a specific plugin, you can use
  <B>\Plugins[</B>\<<I>index</I>\><B>].SendPluginMessage(</B>\<<I>message
  ID</I>\><B>,</B>\<<I>message text</I>\><B>);</B> As a host developer you are responsible of
  defining and documenting the messages your application may send. You should make this public so
  plugin developers can use this information.
Parameters
  PluginMessage - ID of the message to send. As a host developer you can define these yourself.
  PluginParams  - String containing additional parameters for the message. As a host developer you   
                determine the meaning of this string.
See Also
  TJvPlugIn.SendPluginMessage, TJvPluginManager.PluginCount, TJvPluginManager.Plugins

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.PluginKind
Summary
  Type of plugins to use when loading plugins.
Description
  LoadPlugins reads this property to determine the type of plugin to specify when loading the plugins
  that were found.
  
  When you change the value of this property and the Extension property contains the default
  extension for the old value, the \Extension will be changed to the default extension for the new
  plugin type.
See Also
  TJvPluginManager.Extension, TJvPluginManager.LoadPlugins, TJvPluginManager.PluginFolder

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.PluginFolder
Summary
  Folder to scan for plugins.
Description
  LoadPlugins reads this property to determine in which folder to scan for plugins.
  
  If this property is left blank, LoadPlugins will search in the folder where the application's
  executable is located, otherwise it will use whatever folder is put in this property.
See Also
  TJvPluginManager.Extension, TJvPluginManager.LoadPlugins

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.PluginCount
Summary
  Number of loaded plugins.
Description
  PluginCount holds the number of plugins currently loaded. You can access individual plugins by
  using the Plugins property and you can retrieve a name list of loaded plugins by calling
  GetLoadedPlugins.
See Also
  TJvPluginManager.GetLoadedPlugins, TJvPluginManager.Plugins

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.OnPlugInError
Summary
  Event called when an exception has occurred while loading a plugin.
Description
  Write an OnPlugInError event handler to responds to exceptions while loading a plugin. The S
  parameter will contain the message of the exception.
  
  The OnPlugInError event will only occur when an exception occurs while loading a plugin found by a
  call to LoadPlugins.
Parameters
  Sender - Reference to this plugin manager.
  AError - Value of the exception message property.
See Also
  TJvPluginManager.LoadPlugins, TJvPluginManager.OnAfterLoad, TJvPluginManager.OnBeforeLoad,
  TJvPluginManager.OnNewCommand

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.OnNewCommand
Summary
  Event called for each command of a loaded plugin.
Description
  Write an OnNewCommand event handler to register a command in a loaded plugin. The event will be
  called for each command in each loaded plugin. The parameters contain the values of their
  respective properties in the command.
Parameters
  Sender    - Reference to the plugin manager component.
  ACaption  - The value of the command's <LINK TJvPluginCommand.Caption, Caption> property.
  AHint     - The value of the command's <LINK TJvPluginCommand.Hint, Hint> property.
  AData     - The value of the command's <LINK TJvPluginCommand.Data, Data> property.
  AShortCut - Description for this parameter
  ABitmap   - The value of the command's <LINK TJvPluginCommand.Bitmap, Bitmap> property.
  AEvent    - The value of the command's <LINK TJvPluginCommand.OnExecute, OnExecute> event.
See Also
  TJvPluginManager.LoadPlugins, TJvPluginManager.OnAfterLoad, TJvPluginManager.OnBeforeLoad,
  TJvPluginManager.OnPlugInError

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.OnBeforeNewCommand
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender  - Description for this parameter
  APlugIn - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.OnAfterNewCommand
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Sender  - Description for this parameter
  APlugIn - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.OnBeforeLoad
Summary
  Event called just before a plugin is loaded.
Description
  Write an OnBeforeLoad event handler to take additional action before a plugin is loaded. The
  Filename parameter contains the filename of the plugin about to be loaded. Set AllowLoad to False
  to prevent the plugin from being loaded (in which case the OnAfterLoad will not be triggered).
  
  The OnBeforeLoad event will only occur when LoadPlugins is used to scan for and load all plugins in
  a folder.
Parameters
  Sender    - Reference to this plugin manager
  FileName  - Name of the package or DLL to load
  AllowLoad - Flag to indicate if the plugin should be loaded. Set this to False to prevent the
  plugin              from loading.
See Also
  TJvPluginManager.LoadPlugins, TJvPluginManager.OnAfterLoad, TJvPluginManager.OnNewCommand,
  TJvPluginManager.OnPlugInError

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.OnAfterLoad
Summary
  Event called when a plugin has loaded.
Description
  Write an OnAfterLoad event handler to take additional action when a plugin has been loaded. The S
  parameter will contain the filename of the loaded plugin.
  
  The OnAfterLoad event will only occur when LoadPlugins is used and if the loading of the plugin
  wasn't blocked by the OnBeforeLoad event.
Parameters
  Sender     - Reference to this plugin manager.
  FileName   - Filename of the loaded plugin.
  ALibHandle - Description for this parameter
  AllowLoad  - Description for this parameter
See Also
  TJvPluginManager.LoadPlugins, TJvPluginManager.OnBeforeLoad, TJvPluginManager.OnNewCommand,
  TJvPluginManager.OnPlugInError

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.LoadPlugins
Summary
  Scans a folder for and loads plugins.
Description
  LoadPlugins will scan a folder for plugin files and attempts to load them.
  
  The PluginFolder property is read to determine the folder to scan. If the PluginFolder property is
  empty, the executable's folder will be used instead.
  
  The Extensions property is read to determine the file extensions to consider as a plugin.
  
  For each file found the following steps will take place:
  
  * The OnBeforeLoad event is called.
  * If \OnBeforeLoad has not disallowed the file to be loaded, LoadPlugin is called to load the
  plugin   (specifying PluginKind as the plugin type). This method will call the OnNewCommand event
  for each
    provided command.
  * The OnAfterLoad event is called.
  
  If an exception occurred during the steps above, the OnLoadingError event will be called. Any
  additional files will still be loaded.
See Also
  TJvPluginManager.Extension, TJvPluginManager.LoadPlugin, TJvPluginManager.OnAfterLoad,
  TJvPluginManager.OnBeforeLoad, TJvPluginManager.OnNewCommand, TJvPluginManager.OnPlugInError,
  TJvPluginManager.PluginFolder, TJvPluginManager.PluginKind

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.GetLoadedPlugins
Summary
  Fills the specified string list with the names of the loaded plugins.
Description
  GetLoadedPlugins will fill the specified string list with the names of all loaded plugins. The
  specified string list must be provided by the caller. On entry the list will be cleared.
Parameters
  PlugInList - A TStrings descendant to receive the names of the loaded plugins in. The list will be 
               empties on entry to this method.
See Also
  TJvPluginManager.PluginCount, TJvPluginManager.Plugins

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.LoadPlugin
Summary
  Loads a plugin.
Description
  LoadPlugin will load the specified filename and treat it as the specified plugin type. If the file
  is not a valid plugin or an error occurs during loading and/or initializing, an exception will be
  raised.
  
  For each command the plugin provides, the OnNewCommand event is called.
Parameters
  FileName - Name of the DLL or package to load.
  PlgKind  - Type of plugin (either plgDLL or plgPackage).
See Also
  TJvPluginManager.LoadPlugins, TJvPluginManager.Plugins

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.Extension
Summary
  Extension of plugins to find.
Description
  LoadPlugins reads this property to determine the extension to use while scanning for plugins.
  
  By default this extension will be set to the extension belonging to the current type of plugins, as
  set by the PluginKind property. Changing \PluginKind will change the Extension property as well,
  provided it contains the extension belonging the previous PluginKind.
  
  If you change Extension to another extension you should not specify the dot. The extension will not
  change when you change the \PluginKind property.

----------------------------------------------------------------------------------------------------
@@TJvPluginManager.AddCustomPlugin
Summary
  Adds a plugin to the manager.
Description
  AddCustomPlugin will add the specified plugin to the list of loaded plugins. The plugin will be
  registered as a custom plugin and will be initialized with the filename <B>CustomPlugin</B>.
  
  Just as with loading a plugin directly, each command supported by the plugin will be registered
  using the OnNewCommand event.
  
  This method can be used to add plugins embedded in the main application or additional plugins
  embedded in another plugin DLL or package.
  
  If the initialization of the plugin fails the method will return False, otherwise True will be
  returned.
Parameters
  PlugIn   - Reference to the TJvPlugin instance to register.
  FileName - Description for this parameter
See Also
  TJvPluginManager.LoadPlugin, TJvPluginManager.OnNewCommand

----------------------------------------------------------------------------------------------------
@@TJvPluginManager
<TITLEIMG TJvPluginManager>
#JVCLInfo
<GROUP JVCL.FormsAndApp.Application.Plugins>
<FLAG Component>
Summary
  Plugin manager.
Description
  TJvPluginManager is the plugin manager for an application. It's the core of a plugin enabled (or
  host) application.
  
  The component takes care of all the housekeeping involved in loading/unloading plugins and provides
  several properties and methods to load or unload plugins, configuring a plugin, sending messages to
  one plugin or all plugins or executing a command.
  
  Loaded plugins are stored in the Plugins property. You can access individual plugins much like you
  can access individual strings in TStrings object, e.g. Plugins[0].Configure.
  
  For more information on writing plugins and make applications plugin enabled, take a look at <LINK
  __JVCL.Info.Plugins, Writing plugins and plugin enabled applications>.
  Note
  Due to an unresolved bug, you should make sure that TJvPluginManager is created <B>before</B> the
  main menu if you add plug-ins to the main menu. TJvPluginManager should be available when the main
  menu is destroyed.

----------------------------------------------------------------------------------------------------
@@TJvPlgInErrorEvent
<TITLE TJvPlgInErrorEvent type> <COMBINE TJvPluginManager.OnPlugInError>

----------------------------------------------------------------------------------------------------
@@TJvBeforeLoadEvent
<TITLE TJvBeforeLoadEvent type> <COMBINE TJvPluginManager.OnBeforeLoad>

----------------------------------------------------------------------------------------------------
@@TJvBeforeCommandsEvent
<TITLE TJvBeforeCommandsEvent type> <COMBINE TJvPluginManager.OnBeforeNewCommand>

----------------------------------------------------------------------------------------------------
@@TJvAfterLoadEvent
<TITLE TJvAfterLoadEvent type> <COMBINE TJvPluginManager.OnAfterLoad>

----------------------------------------------------------------------------------------------------
@@TJvAfterCommandsEvent
<TITLE TJvAfterCommandsEvent type> <COMBINE TJvPluginManager.OnAfterNewCommand>

----------------------------------------------------------------------------------------------------
@@EJvInitializationCustomPlugInError
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@EJvInitializationPlugInError
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@EJvLoadPluginError
Summary
  Exception class used for plugin loading errors.
Description
  EJvLoadPluginError is the exception class used to denote errors in loading a plugin.
See Also
  EJvPlugInError

----------------------------------------------------------------------------------------------------
@@EJvPlugInError
Summary
  Base exception class used for plugins.
Description
  EJvPluginError is the base exception class used for plugins.
See Also
  EJvLoadPluginError

----------------------------------------------------------------------------------------------------
@@EJvExtensionPlugInError
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@EJvCantRegisterPlugInError
Summary
  Write here a summary (1 line)
Description
  Write here a description

----------------------------------------------------------------------------------------------------
@@TNewCommandEvent
<TITLE TNewCommandEvent type> <COMBINE TJvPluginManager.OnNewCommand>

----------------------------------------------------------------------------------------------------
@@TPluginInfo
Summary
  Type denoting an item in the plugin registration database.
Description
  TPluginInfo is a type denoting an item in the plugin registration database. It holds information
  about a plugin.

----------------------------------------------------------------------------------------------------
@@TPluginInfo.Handle
Summary
  Handle of the DLL or package.
Description
  Handle of the DLL or package. This value will be 0 for custom plugins.

----------------------------------------------------------------------------------------------------
@@TPluginInfo.PlugIn
Summary
  Reference to the TJvPlugin instance.
Description
  Reference to the TJvPlugin instance.

----------------------------------------------------------------------------------------------------
@@TPluginInfo.PluginKind
Summary
  Denotes the type of the plugin.
Description
  Denotes the type of the plugin.

----------------------------------------------------------------------------------------------------
@@TPluginKind
<TITLE TPluginKind type>
Summary
  Type of a plugin.
Description
  TPluginKind denotes the type of a plugin. It is used in the plugin registration database as well as
  by the <LINK TJvPluginManager.PluginKind, PluginKind> property of the <LINK TJvPluginManager,
  plugin manager> (note that in the latter case plgCustom will not load any plugin).

----------------------------------------------------------------------------------------------------
@@TPluginKind.plgDLL
Plugin is in a DLL ("old style" plugins).

----------------------------------------------------------------------------------------------------
@@TPluginKind.plgPackage
Plugin is in a runtime package.

----------------------------------------------------------------------------------------------------
@@TPluginKind.plgCustom
Plugin is a custom plugin (e.g. plugins embedded in the host application).

