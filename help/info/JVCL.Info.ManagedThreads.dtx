@@JVCL.Info.ManagedThreads
<GROUP JVCL.Info>
<TITLE Managed threads>
----------------------------------------------------------------------------------------------------
@@JVCL.Info.ManagedThreads.Goals
<GROUP JVCL.Info.ManagedThreads>
<TITLE The Goals>
- Develop a set of components that provide a solid framework for developing multithreaded business applications.
- Ease of use is more important then performance issues. 
- The components must assist in deadlock prevention as much as possible. 
- Terminating threads must be automated as much as possible.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.ManagedThreads.Limitations
<GROUP JVCL.Info.ManagedThreads>
<TITLE Known limitations>

There are several limitations, which you should be aware of:
* Code (probably) won't work in DLL's or Runtime Packages
* No support for synchronisation between multiple processes
* Only for Delphi 6 and Delphi 7
----------------------------------------------------------------------------------------------------
@@JVCL.Info.ManagedThreads.Idea
<GROUP JVCL.Info.ManagedThreads>
<TITLE The Idea>

There are three components groups: 
* Threading
* Data Exchange
* Synchronization.

  The component TJvMtThread is used to represent a thread. All threads belong to a specific manager
  TJvMtManager. The Suspend and Resume functions are not supported, as they are considered very dangerous.
  A thread can be acquired and released (just as synchronization objects) using a Ticket, which was issued
  by the manager. After acquiring a thread it can be safely manipulated, it will always exist. Though the
  status of a thread can change because it will keep running. After finishing with a thread, it must be
  released using Release().

  The threads need to exchange information between them selves and with the main VCL thread. For this
  purpose the TJvMtThreadToVCL, TJvMtVCLToThread and TJvMtThreadToThread components have been developed.
  The buffers take owner ship of the object being passed thru and free it if the buffer gets destroyed.
  If the object is passed to the reader, this reader will also get the ownership. If a thread is terminated
  while waiting for buffer data, it will raise an EMTTerminate exception. This will cause the thread
  to terminate in an orderly fashion.

  Usually it is also necessary to synchronize threads. The TJvMtSection, TJvMtCountingSection and
  TJvMtMonitorSection have been developed as a safe way of suspending and resuming threads. Even if a
  thread is blocked (suspended) while trying to enter one of these sections, it can still be terminated
  safely.
----------------------------------------------------------------------------------------------------
