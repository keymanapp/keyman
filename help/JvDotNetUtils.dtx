##Package: DotNetCtrls
##Status: Completed, Incomplete (peter3)
----------------------------------------------------------------------------------------------------
@@JvDotNetUtils.pas
Summary
    Contains utility routines used by the DotNet controls.
Author
  Marc Hoffman
----------------------------------------------------------------------------------------------------
@@SetDotNetFrameColors
<TITLE SetDotNetFrameColors procedure>
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  FocusedColor   - Description for this parameter
  UnfocusedColor - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@DrawDotNetControl
<TITLE DrawDotNetControl procedure>
Summary
  Draws a control in a DotNet style.
Description
  Draws the border of a control differently depending on the state of InControl. If InControl is
  true, the border of the control is drawn with a thick blue edge. If InControl is false, the border
  is drawn with a thinner grey edge.
  
  Normally, you don't need to call this procedure since it is called from DotNetMessageHandler. If
  you are creating your own DotNet style controls, call DotNetMessageHandler from an overridden
  WindowProc instead of calling this procedure.
Parameters
  Control   - The control to draw.
  AColor    - The background color of the control.
  InControl - Specifies the location of the mouse, true if the mouse is inside the component, false  
             otherwise.
See Also
  DotNetMessageHandler

----------------------------------------------------------------------------------------------------
@@DotNetMessageHandler
<TITLE DotNetMessageHandler procedure>
Summary
  Provides centralized message handling for the DotNet controls.
Description
  DotNetMessageHandler reacts to specific windows messages and draws a control according to the
  message received and the current location of the mouse.
  
  Normally, you don't need to call this procedure since it is called from within a DotNet style
  control.
  
  If you create your own DotNet style controls, replace the WindowProc of your component and call
  DotNetMessageHandler after first passing the message to the old WindowProc.
Parameters
  Msg       - The windows message to handle.
  AControl  - The control sending the message.
  AColor    - The background color of the control.
  InControl - Modified if the message is either CM_MOUSELEAVE (set to false) or CM_MOUSEENTER (set to
               true).
See Also
  <DELPHILINK TControl.WindowProc>

