##Package: System
##Status: Completed (I)
----------------------------------------------------------------------------------------------------
@@JvShellHook.pas
Summary
    Contains the TJvShellHook component.
Author
  Peter Thörnqvist
  
  ##@@GET_APPCOMMAND_LPARAM
  ##<TITLE GET_APPCOMMAND_LPARAM function>
  ##Summary
  ##  Retrieves the application command from the specified LPARAM value.
  ##Description
  ##  The return value is the bits of the high-order word representing the application command. It
  can be
  ##  one of the following values.
  ##  <TABLE>
  ##    APPCOMMAND_BASS_BOOST              Toggle the bass boost on and off.
  ##    APPCOMMAND_BASS_DOWN               Decrease the bass.
  ##    APPCOMMAND_BASS_UP                 Increase the bass.
  ##    APPCOMMAND_BROWSER_BACKWARD        Navigate backward.
  ##    APPCOMMAND_BROWSER_FAVORITES       Open favorites.
  ##    APPCOMMAND_BROWSER_FORWARD         Navigate forward.
  ##    APPCOMMAND_BROWSER_HOME            Navigate home.
  ##    APPCOMMAND_BROWSER_REFRESH         Refresh page.
  ##    APPCOMMAND_BROWSER_SEARCH          Open search.
  ##    APPCOMMAND_BROWSER_STOP            Stop download.
  ##    APPCOMMAND_LAUNCH_APP1             Start App1.
  ##    APPCOMMAND_LAUNCH_APP2             Start App2.
  ##    APPCOMMAND_LAUNCH_MAIL             Open mail.
  ##    APPCOMMAND_MEDIA_NEXTTRACK         Go to next track.
  ##    APPCOMMAND_MEDIA_PLAY_PAUSE        Play or pause playback.
  ##    APPCOMMAND_MEDIA_PREVIOUSTRACK     Go to previous track.
  ##    APPCOMMAND_MEDIA_SELECT            Go to Media Select mode.
  ##    APPCOMMAND_MEDIA_STOP              Stop playback.
  ##    APPCOMMAND_MICROPHONE_VOLUME_DOWN  Windows XP: Increase microphone volume.
  ##    APPCOMMAND_MICROPHONE_VOLUME_MUTE  Windows XP: Mute the microphone.
  ##    APPCOMMAND_MICROPHONE_VOLUME_UP    Windows XP: Decrease microphone volume.
  ##    APPCOMMAND_TREBLE_DOWN             Decrease the treble.
  ##    APPCOMMAND_TREBLE_UP               Increase the treble.
  ##    APPCOMMAND_VOLUME_DOWN             Lower the volume.
  ##    APPCOMMAND_VOLUME_MUTE             Mute the volume.
  ##    APPCOMMAND_VOLUME_UP               Raise the volume.
  ##  </TABLE>
  ##
  ##  This function is a converted macro.
  ##Parameters
  ##  lParam - Specifies the value to be converted.
  ##See Also
  ##  <LINK GET_DEVICE_LPARAM>, <LINK GET_FLAGS_LPARAM>, <LINK GET_KEYSTATE_LPARAM>, <LINK
  ##  GET_MOUSEORKEY_LPARAM>
  
  ##@@GET_DEVICE_LPARAM
  ##<TITLE GET_DEVICE_LPARAM function>
  ##Summary
  ##  Retrieves the input device type from the specified LPARAM value.
  ##Description
  ##  The return value is the bit of the high-order word representing the input device type. It can
  be one
  ##  of the following values.
  ##  <TABLE>
  ##    Value              Meaning
  ##    -----------------  -----------------------------------------------------------------------
  ##    FAPPCOMMAND_KEY    User pressed a key.
  ##    FAPPCOMMAND_MOUSE  User clicked a mouse button.
  ##    FAPPCOMMAND_OEM    An unidentified hardware source generated the event. It could be a
  ##                         mouse or a keyboard event.
  ##  </TABLE>
  ##
  ##  This function is identical to the <LINK GET_MOUSEORKEY_LPARAM> function. This function is a
  converted
  ##  macro.
  ##Parameters
  ##  lParam - Specifies the value to be converted.
  ##See Also
  ##  <LINK GET_APPCOMMAND_LPARAM>,
  ##  <LINK GET_FLAGS_LPARAM>,
  ##  <LINK GET_KEYSTATE_LPARAM>,
  ##  <LINK GET_MOUSEORKEY_LPARAM>
  
  ##@@GET_FLAGS_LPARAM
  ##<TITLE GET_FLAGS_LPARAM function>
  ##Summary
  ##  Retrieves the state of certain virtual keys from the specified LPARAM value.
  ##Description
  ##  The return value is the low-order word representing the virtual key state. It can be one of the
  ##  following values.
  ##  <TABLE>
  ##    MK_CONTROL   The Ctrl key is down.
  ##    MK_LBUTTON   The left mouse button is down.
  ##    MK_MBUTTON   The middle mouse button is down.
  ##    MK_RBUTTON   The right mouse button is down.
  ##    MK_SHIFT     The Shift key is down.
  ##    MK_XBUTTON1  The first X button is down.
  ##    MK_XBUTTON2  The second X button is down.
  ##  </TABLE>
  ##
  ##  This function is identical to the <LINK GET_KEYSTATE_LPARAM> function. This function is a
  converted
  ##  macro.
  ##Parameters
  ##  lParam - Specifies the value to be converted.
  ##See Also
  ##  <LINK GET_APPCOMMAND_LPARAM>,
  ##  <LINK GET_DEVICE_LPARAM>,
  ##  <LINK GET_KEYSTATE_LPARAM>,
  ##  <LINK GET_MOUSEORKEY_LPARAM>
  
  ##@@GET_KEYSTATE_LPARAM
  ##<TITLE GET_KEYSTATE_LPARAM function>
  ##Summary
  ##  Retrieves the state of certain virtual keys from the specified LPARAM value.
  ##Description
  ##  The return value is the low-order word representing the virtual key state. It can be one of the
  ##  following values.
  ##  <TABLE>
  ##    MK_CONTROL   The Ctrl key is down.
  ##    MK_LBUTTON   The left mouse button is down.
  ##    MK_MBUTTON   The middle mouse button is down.
  ##    MK_RBUTTON   The right mouse button is down.
  ##    MK_SHIFT     The Shift key is down.
  ##    MK_XBUTTON1  The first X button is down.
  ##    MK_XBUTTON2  The second X button is down.
  ##  </TABLE>
  ##
  ##  This function is identical to the <LINK GET_FLAGS_LPARAM> function. This function is a converted
  ##  macro.
  ##Parameters
  ##  lParam - Specifies the value to be converted.
  ##See Also
  ##  <LINK GET_APPCOMMAND_LPARAM>,
  ##  <LINK GET_DEVICE_LPARAM>,
  ##  <LINK GET_FLAGS_LPARAM>,
  ##  <LINK GET_MOUSEORKEY_LPARAM>
  
  ##@@GET_MOUSEORKEY_LPARAM
  ##<TITLE GET_MOUSEORKEY_LPARAM function>
  ##Summary
  ##  Retrieves the input device type from the specified LPARAM value.
  ##Description
  ##  The return value is the bit of the high-order word representing the input device type. It can
  be one
  ##  of the following values.
  ##  <TABLE>
  ##    Value              Meaning
  ##    -----------------  -----------------------------------------------------------------------
  ##    FAPPCOMMAND_KEY    User pressed a key.
  ##    FAPPCOMMAND_MOUSE  User clicked a mouse button.
  ##    FAPPCOMMAND_OEM    An unidentified hardware source generated the event. It could be a
  ##                         mouse or a keyboard event.
  ##  </TABLE>
  ##
  ##  This function is identical to the <LINK GET_DEVICE_LPARAM> function. This function is a
  converted
  ##  macro.
  ##Parameters
  ##  lParam - Specifies the value to be converted.
  ##See Also
  ##  <LINK GET_APPCOMMAND_LPARAM>,
  ##  <LINK GET_DEVICE_LPARAM>,
  ##  <LINK GET_FLAGS_LPARAM>,
  ##  <LINK GET_KEYSTATE_LPARAM>
----------------------------------------------------------------------------------------------------
@@TShellHookInfo
<TITLE TShellHookInfo type>
Summary
  Record type that contains info about a window's size.
Description
  TShellHookInfo is used by the Msg parameter of the OnShellMessage event in TJvShellHook. When the
  wParam of the message is HSHELL_GETMINRECT, lParam contains a TShellHookInfo record.

----------------------------------------------------------------------------------------------------
@@TShellHookInfo.hwnd
Handle to the window.

----------------------------------------------------------------------------------------------------
@@TShellHookInfo.rc
A rect describing the size of the window.

----------------------------------------------------------------------------------------------------
@@TJvShellHookEvent
<TITLE TJvShellHookEvent type> <COMBINE TJvShellHook.OnShellMessage>

----------------------------------------------------------------------------------------------------
@@TJvShellHook.Active
Summary
  Specifies if shell messages are received and propagated to the event handler.
Description
  Use Active to specify whether the component receives shell messages or not. When Active is true,
  the component calls the RegisterShellWindow API function to register its own message handler.
  Messages received are relayed to the user through the OnShellMessage event handler.
See Also
  TJvShellHook.OnShellMessage

----------------------------------------------------------------------------------------------------
@@TJvShellHook.OnShellMessage
Summary
  Occurs when a shell message is received.
Description
  Write a handler for the OnShellMessage event to take specific action when a shell message is
  received by the component. Depending on the value of Msg.wParam, Msg.lParam contains various data
  as described in the table below.
  
  <TABLE>
    wParam                       lParam
    ---------------------------  -------------------------------------------------------------
    HSHELL_GETMINRECT            A pointer to a SHELLHOOKINFO structure.
    HSHELL_WINDOWACTIVATEED      The HWND handle of the activated window.
    HSHELL_RUDEAPPACTIVATEED     The HWND handle of the activated window.
    HSHELL_WINDOWREPLACING       The HWND handle of the window replacing the top-level window.
    HSHELL_WINDOWREPLACED        The HWND handle of the window being replaced.
    HSHELL_WINDOWCREATED         The HWND handle of the window being created.
    HSHELL_WINDOWDESTROYED       The HWND handle of the top-level window being destroyed.
    HSHELL_ACTIVATESHELLWINDOW   Not used.
    HSHELL_TASKMAN               Can be ignored.
    HSHELL_REDRAW                The HWND handle of the window that needs to be redrawn.
    HSHELL_FLASH                 The HWND handle of the window that needs to be flashed.
    HSHELL_ENDTASK               The HWND handle of the window that should be forced to exit.
    HSHELL_APPCOMMAND            The APPCOMMAND which has been unhandled by the application
                                   or other hooks. See WM_APPCOMMAND in the Windows API Help
                                   and use the function GET_APPCOMMAND_LPARAM to extract the
                                   parameter.
  </TABLE>
Parameters
  Sender - The object that called the event.
  Msg    - The message received. lParam should be interpreted according to the value of wParam.
  ##See Also
  ##  <LINK GET_APPCOMMAND_LPARAM>

----------------------------------------------------------------------------------------------------
@@TJvShellHook
<TITLEIMG TJvShellHook>
#JVCLInfo
<GROUP JVCL.System>
<FLAG Component>
Summary
  Wrapper component for the RegisterShellHookWindow and DeregisterShellHookWindow Windows API
  functions.
Description
  Wraps calls to RegisterShellHookWindow and DeregisterShellHookWindow into a simple to use component.
  
  RegisterShellHookWindow registers a specified shell window to receive certain messages for events
  or notifications that can be useful to shell applications. The event messages received are only
  those sent to the shell window associated with the specified window's desktop. Many of the messages
  are the same as those that can be received after calling the SetWindowsHookEx function and
  specifying
  WH_SHELL for the hook type. The difference with RegisterShellHookWindow is that the messages are
  received through the specified window's WindowProc and not through a call back procedure.
  
  See MSDN (http://msdn.microsoft.com, search for "RegisterShellHookWindow") for more details
  Note
  The RegisterShellHookWindow and DeregisterShellHookWindow API functions may not be available on all
  versions of Windows. To detect if the API is available, set Active to true. If it remains true, the
  API is available. If it is reset to false, the API is not available.

----------------------------------------------------------------------------------------------------
@@PShellHookInfo
<TITLE PShellHookInfo type> <COMBINE TShellHookInfo>

