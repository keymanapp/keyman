--------------------------------------------------------------------------------
## Inspector items: Types and class references
--------------------------------------------------------------------------------
@@TJvInspectorItemClass
Summary
  Class reference to inspector items.
Description
  TJvInspectorItemClass is the class reference for inspector items.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem
--------------------------------------------------------------------------------
Summary
  Base inspector item.
Description
  TJvCustomInspectorItem is the base inspector item. An item is
  responsible for drawing and editing the underlaying data
  object, as well as managing the sub items. The base class
  introduces methods and properties to:
    *   display and edit the data object
    *   manage child items
  The base class itself can be used as a read only item with no
  underlaying data object. An instance of this class is used as
  the root item for the inspector. The standard package
  provides various item classes to edit the different types of
  data:
    *   Ordinals
    *   Enumerations
    *   Sets
    *   Strings
    *   Floats
  In addition it provides an item class that functions as a category holder. A
  category holder also has no data instance to provide values. Categories can
  be nested, but each item can belong to only one category.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Create
Summary
  Instantiates a new inspector item.
Description
  Create instantiates a new inspector item and adds it to a parent item. You
  should almost never need to create an instance of TJvCustomInspectorItem. In
  addition, except for the category item, there should be no need to create
  an item directly. Usually you create a data instance which in turn will create
  an instance of a proper descendant.
Parameters
  AParent - Parent item to which the new item is to be added. This can never be
            <B>nil</B>
  AData   - The data instance to assign to this item. For category items, this
            should be <B>nil</B>.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Add
Summary
  Adds an item.
Description
  Add adds a child item to this item. Under normal circumstances Add will be
  called automatically by the Create constructor of the child item. There is no
  need to call Add in your application. Add uses Insert to do the actual
  insertion.
Parameters
  Item  - \Item to add.
  Data  - \Data instance to add. It is assumed the data instance already has an
          item assigned to it.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.AlphaSort
Summary
  Sorts the sub items alphabetically by their DisplayName.
Description
  AlphaSort will sort the sub items alphabetically by their DisplayName.
  AlphaSort is called by Sort when SortKind = iskName.
See Also
  SortKind, DisplayName
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Apply
Summary
  Applies the current edit value to the data layer.
Description
  Apply applies the current edit value to the data layer. After applying the
  value, it is reread from the data layer, the edit controls SelectAll method
  will be called and the undo buffer and modified flag cleared.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ApplyDisplayIndices
Summary
  Set the DisplayIndex of all items in the given list to their index in the
  list.
Description
  ApplyDisplayIndices will iterate over all items in the specified list and sets
  the DisplayIndex of these items to their index in the list.

  ApplyDisplayIndices is used by all sorting mechanisme to change/update the
  sort order of sub items (eg. AlphaSort calls BuildDisplayableList to retrieve
  a list of displayable items, sort the list alphabetically by name and calls
  ApplyDisplayIndices to save that order).
Parameters
  ItemList - The list of items for which to set the DisplayIndex.
See Also
  BuildDisplayableList
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.AutoUpdate
Summary
  Indicates if item auto updates the data during edit.
Description
  AutoUpdate indicates if the item automatically applies the edit value during
  editing. Read AutoUpdate to determine if the changes are updated immediately or
  set AutoUpdate to set/reset this state.
Notes:
  AutoUpdate maps onto the iifAutoUpdate flag in the Flags property.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.BaseCategory
Summary
  References the root category for this item.
Description
  BaseCategory references the top-level category for this item, if any. If the
  item is in no category, BaseCategory will be <B>nil</B>.

  The value of BaseCategory is used by the DotNET/Visual Studio paint style to
  determine if a category bar should be painted to the left of the item.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.BuildDisplayableList
Summary
  Retrieves a list of displayable sub items.
Description
  BuildDisplayableList will fill the specified list with sub items that have
  this items as their DisplayParent. On entry the list is not cleared.

  BuildDisplayableList is used by all sorting mechanisme to retrieve the list of
  items to be sorted (eg. AlphaSort calls BuildDisplayableList to retrieve a
  list of displayable items, sort the list alphabetically by name and calls
  ApplyDisplayIndices to save that order).
Parameters
  ItemList - The list to retrieve the items in.
See Also
  ApplyDisplayIndices
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ButtonClick
Summary
  Event handler for the edit buttons OnClick event.
Description
  ButtonClick handles the clicking of the edit button with the left mouse
  button or the Ctrl+Enter key combination. This leads to the calling of the
  Edit method.
Parameters
  Sender - A reference to the items edit control.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.CanEdit
Summary
  Determines if the item can be edited.
Description
  CanEdit determines if the item can be edited and returns True if that's the
  case. An item can be edited if all of the following conditions apply:

  * It's not a read-only item (Readonly = False)
  * The inspector is not read-only (<LINK TJvCustomInspector.Readonly,
      Inspector.ReadOnly> = False)
  * The data instance has been initialized (
      <LINK TJvCustomInspectorData.IsInitialized, Data.IsInitialized> returns
      True)
  * The data instance has a value (<LINK TJvCustomInspectorData.HasValue,
      Data.HasValue> returns True).
  Can edit is used by InitEdit before the item is set to edit mode.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Category
Summary
  References the nearest category for this item.
Description
  Category references the nearest category for this item, if any. If the
  item is in no category, Category will be <B>nil</B>.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.CloseUp
Summary
  Closes the drop down list.
Description
  CloseUp closes the drop down list. In addition if the Accept parameter is set
  to True, the selected item will be applied to the data layer.

  If the list is not dropped down, CloseUp will do nothing.
Parameters
  Accept - Indicates if the selected item in the list box should be applied. Set
            this parameter to True to accept the selected item, otherwise set it
            to False.
See Also
  DropDown
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Count
Summary
  Indicates the number of child items.
Description
  Count indicates how many child items this item has. Use the Items property to
  retrieve the child items.
See Also
  Items
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Data
Summary
  References the data layer instance.
Description
  Data is a reference to the data layer instance providing the item with it's
  values.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DataSort
Summary
  Sorts the sub items by the result of the OnCompare event
Description
  DataSort will sort the sub items by the result of the OnCompare event.
  DataSort is called by Sort when SortKind = iskCustom.
See Also
  SortKind, OnCompare
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Delete
Summary
  Deletes an item.
Description
  Delete removes an item from the list of child items. The item and data layer
  instance will be freed as well.
Parameters
  Index   - Index of child item to delete.
  Item    - \Item to delete.
  Data    - \Data instance to delete.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DisplayIndex
Summary
  Sorted index in the dsiplay parent.
Description
  DisplayIndex indicates the index after sorting this item is at in it's
  display parent. Read DisplayIndex to determine the position at which the item
  is displayed or set it to a new index.
Note:
  Setting DisplayIndex to a new value will result in the display parent's
  SortKind property being set to iskManual.
See Also
  SortKind, Sort, GetDisplayParent
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DisplayName
Summary
  Holds the name that is displayed.
Description
  DisplayName holds the name that is displayed. Depending on the state of the
  QualifiedNames property of it's parent, this name could include the name of
  the parent.

  DisplayName is initialized to the Data.Name property. If no data instance is
  linked to the item when it's created, DisplayName is initialized to an empty
  string.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DisplayValue
Summary
  Holds the current display value.
Description
  DisplayValue holds the current value to be displayed. Read DisplayValue to
  retrieve the current value as it is displayed or set it to a new value.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoAfterItemCreate
Summary
  Calls the AfterItemCreate event.
Description
  DoAfterItemCreate will call the <LINKTJvCustomInspectorItem.DoAfterItemCreate,
  Inspector.DoAfterItemCreate> method if an inspector is assigned.
See Also
  TJvCustomInspector.DoAfterItemCreate
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoCompare
Summary
  Compares this item with another using the OnCompare event.
Description
  DoCompare uses the handler assigned to the OnCompare event to compare the item
  with a specified other item.

  If no handler is assigned, the method will return <B>0</B>. Otherwise the
  result of the OnCompare handler is returned.
See Also
  OnCompare, DataSort, SortKind
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoDrawListItem
Summary
  Event handler for the drop down list box.
Description
  DoDrawListItem is the OnDrawListItem event handler of the drop down list box.
  By default, the method will just output the items text to the Canvas.

  Descendants can override this method to provide owner draw list box drawing,
  tailored to the data it represents.

  See the VCL help on TCustomListBox.OnDrawListItem for information on the
  parameters.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoDropDownKeys
Summary
  Key handler for the drop down list.
Description
  DoDropDownKeys handles the editor keys to handle the value list (ie. drop
  down or accept with Alt+Up/Down, accept on Enter or cancel on Escape).

  DoDropDownKeys is called from Edit_WndProc when the item has a value list
  and a key has been pressed.
See Also
  CloseUp, DropDown, Edit_WndProc, TInspectorItemFlag.iifValueList
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoGetValueList
Summary
  Calls the OnGetValueList event handler.
Description
  DoGetValueList will call the OnGetValueList event handler if one is assigned.
  If no event handler has been assigned, the method does nothing.
Parameters
  Strings - Instance of a TStrings descendant to receive the list. This list is
              not cleared on entry, although the event handler called might.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoMeasureListItem
Summary
  Event handler for the drop down list box
Description
  DoMeasureListItem is the OnMeasureItem event handler of the drop down list
  box.

  By default, DoMeasureListItem does not change the initial item height, which
  results in fixed item heights. Descendants can override this method to allow
  for variable item heights.

  See the VCL help on TCustomListBox.OnMeasureItem for information on the
  parameters.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoMeasureListItemWidth
Summary
  Determines the drop down items drawing width.
Description
  DoMeasureListItemWidth determines the width of the drop down item. On entry to
  this method, the \Width parameter is set to the TextWidth of the items text.

  By default, DoMeasureListItemWidth does not change the initial item width.
  Descendants can override this method to provide additional width calculations.
Parameters
  Control - The control in which the item is to be drawn. Use the specified
              controls \Canvas to base the calculations on.
  Index - Index of the list item to calculate the widht for.
  Width - The width of the specified item. On entry this parameter is set to the
            TextWidth of the items text.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DoneEdit
Summary
  Sets the item in browse mode.
Description
  DoneEdit sets the item in browse mode, provided the item is in edit mode. The
  current edit value can be either applied or discarded before returning to
  browse mode.
Parameters
  CancelEdits - Flag to indicate if changes should discarded or applied. If set
                to True, modifications done in the editor are discarded,
                otherwise they are applied.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DrawEditor
Summary
  Draws the editor.
Description
  DrawEditor draws the editor. The implementation of TJvCustomInspectorItem will
  check if an edit control has been generated and paint the edit's image onto
  the inspector's canvas, including any edit buttons (dropdown or ellipses).
  This will reduce the flickering when dragging the divider bar.

  Descendants can override this method to paint a state / value to be used while
  editing. For example, TJvInspectorBooleanItem overrides DrawEditor to draw the
  image of a checkbox (no actual checkbox is used).

  DrawEditor is called by DrawValue when the item is in edit mode.
Parameters
  ACanvas - Canvas to draw on.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DrawName
Summary
  Draws the item name.
Description
  DrawName draws the item's name. The default implementation simply draws the
  name using the current font and brush.

  Descendants should override this method to provide other means of painting the
  name. <B>Note:</B> the fact that category names are painted bold is <B>not</B>
  determined by the DrawName method, but rather by the painter object.
Parameters
  ACanvas - Canvas to draw on.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DrawValue
Summary
  Draws the item value.
Description
  DrawValue draws the item's value. The default implementation either calls the
  DrawEditor method (if the item is in edit mode) or draws the current value
  using the current font and brush.

  Descendants should override this method to provide other means of painting the
  value. <B>Note:</B> the font color for values is determined by the painter
  object, not by the DrawValue method.
Parameters
  ACanvas - Canvas to draw on.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DropDown
Summary
  Drops down the value list.
Description
  DropDown will drop down the value list. This involves in creating a drop down
  list box, retrieving the list values, determining the maximum widht of the
  items, determining the correct position and size of the list box and finally
  showing it on screen.
See Also
  CloseUp, DroppedDown, TInspectorItemFlag.iifValueList, DoMeasureListItem,
  DoMeasureListItemWidth
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.DroppedDown
Summary
  Indicates if the value list is dropped down.
Description
  DroppedDown determines if the drop down list is currently displayed. This flag
  is set automatically when the user drops down the value list and reset when
  the list is closed.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Edit
Summary
  Non-inline editing of the item.
Description
  Edit allows for non-inline editing of the item. This usually is the case for
  items with the <LINK TInspectorItemFlag.iifEditButton, iifEditButton> flag, which often use a
  dialog box to change the value.

  Edit is called automatically when the button is clicked, but can be called
  from code if needed.
See Also
  ButtonClick, TInspectorItemFlag.iifEditButton
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Edit_WndProc
Summary
  Window procedure for the edit control.
Description
  Edit_WndProc is a replacement window procedure for the edit control. The
  handler will reroute key messages to the DoDropDownKeys method and if the
  list is dropped down, also to the list box.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditChange
Summary
  Handler for the OnChange event of the edit control.
Description
  EditChange is the handler for the edit controls OnChange event. The handler
  will apply the value of the edit if the AutoUpdate property is set to True.
Parameters
  Sender - Reference to the edit control.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditCtrl
Summary
  Reference to the current edit control.
Description
  EditCtrl holds a reference to the current edit control or <B>nil</B> if the
  value is not being edited.

  EditCtrl is initialized by InitEdit and finalized by DoneEdit.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Editing
Summary
  Editing state.
Description
  Editing indicates if the item is being edited. After a call to the InitEdit
  method, this property is set to True (provided the item is editable). After a
  call to DoneEdit the property is reset to False.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditKeyDown
Summary
  OnKeyDown handler for the edit control.
Description
  EditKeyDown is the OnKeyDown handler for the edit control. On entry to the
  method the Sender property is checked. If it is not set to the inspector, the
  method was indeed called from the edit control. Execution is transfered to the
  inspector.

  If the call originated from the inspector (Sender is set to Inspector), the
  item editor keys are processed. This means the keys for Apply, Undo, select
  prior value, select next value and to invoke the Edit method are checked.

  Descendants that override this should call inherited and only process special
  keys if Sender is set to Inspector (so that the inspector had a change to
  process it's own keys first).
Parameters
  Sender - Originator of the call. This is either the edit control or the
            inspector.
  Key - The key on the keyboard. For non-alphanumeric keys, you must use WinAPI
        virtual key codes to determine the key pressed. For more information,
        search for virtual key codes in the Win32 Developer's Reference
        (WIN32.HLP).
  Shift - Indicates whether the Shift, Alt, or Ctrl keys are combined with the
          keystroke.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditMouseDown
Summary
  OnMouseDown handler for the edit control.
Description
  EditMouseDown is the OnMouseDown handler for the edit control.

  The base implementation handles double clicks to select the next value from
  the value list. Descendants can override this method to provide additional
  functionality.
Parameters
  Sender - Reference to the edit control.
  Button - The mouse button that is held down.
  Shift - Indicates the shift state at the time the button was pressed.
  X - X-position of the mouse in the client area of the sender.
  Y - Y-position of the mouse in the client area of the sender.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditMouseMove
Summary
  OnMouseMove handler for the edit control.
Description
  EditMouseMove is the OnMouseMove handler for the edit control.

  The base implementation does nothing. Descendants can override this method to
  provide additional functionality.
Parameters
  Sender - Reference to the edit control.
  Shift - Indicates the shift state at the time the mouse was moved.
  X - X-position of the mouse in the client area of the sender.
  Y - Y-position of the mouse in the client area of the sender.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditMouseUp
Summary
  OnMouseUp handler for the edit control.
Description
  EditMouseUp is the OnMouseUp handler for the edit control.

  The base implementation does nothing. Descendants can override this method to
  provide additional functionality.
Parameters
  Sender - Reference to the edit control.
  Button - The mouse button that is held down.
  Shift - Indicates the shift state at the time the mouse was moved.
  X - X-position of the mouse in the client area of the sender.
  Y - Y-position of the mouse in the client area of the sender.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditWndPrc
Summary
  Holds the address of the official WindowProc for the edit control.
Description
  EditWndProc points to the WindowProc of the edit control as it was on
  creation.

  The edit controls WindowProc is changed to allow for drop down lists. Because
  the original WindowProc must be called, it's value is saved into this
  property.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.EditFocused
Summary
  Determines if the edit control has focus.
Description
  EditFocused determines if the edit control has focus. If the item is in edit
  mode, has an edit control and the control has focus, the function will return
  True, otherwise False is returned.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Expanded
Summary
  Indicates if item is expanded.
Description
  Expanded indicates if the item is expanded. Read Expanded to determine if the
  item is expanded or set Expanded to a new state.
Notes:
  Expanded maps onto the iifExpanded flag in the Flags property.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Flags
Summary
  Item flags.
Description
  Flags are the item's flags. Depending on the descendant, some of the possible
  flags are filtered out or explicitly set when setting a new value. Read Flags
  to determine the current flags or set Flags to a new value.
Notes:
  Some of the flags are aliased through the properties of the item.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.GetDisplayParent
Summary
  Retrieves the visual parent.
Description
  GetDisplayParent retrieves the visual parent of the item. Most of the time
  this will be equal to the Parent property.

  If the parent item, however, has it's Hidden property set to True,
  GetDisplayParent will go up the parent hierarchie until it reaches the root,
  or an item is found who's Hidden property is set to False.

  GetDisplayParent is used when items are added/deleted to request a resort of
  the display parent.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.GetNextSibling
Summary
  Finds the next sibling of this item.
Description
  GetNextSibling will locate and return the next sibling of this item. If this
  item has no more siblings, the method will return <B>nil</B>.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.GetValueList
Summary
  Retrieves the list of selectable values.
Description
  GetValueList retrieves the list of selectable values.

  GetValueList simply calls DoGetValueList. However, descendants might override
  GetValueList to bypass or augment the event handler, without overriding the
  DoGetValueList method, which is the wrapper method for the OnGetValueList
  event.
Parameters
  Strings - Instance of a TStrings descendant to receive the list. This list is
              not cleared on entry, although the event handler called might.
See Also
  DoGetValueList, TInspectorItemFlag.iifValueList, OnGetValueList
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.HasViewableItems
Summary
  Determines if the item has viewable sub items.
Description
  HasViewableItems determines if the item has viewable sub items. An item has
  viewable sub items if:
  * There are sub items with Visible property set to True.
  * Either the item is not hidden (Hidden set to False), or if it's hidden,
    it must be expanded and have viewable items.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Hidden
Summary
  Indicates if item is hidden.
Description
  Hidden indicates if the item is hidden. When an item is hidden, it's never
  visible in the inspector, but child items are (provided the item is
  <LINK TJvCustomInspectorItem.Expanded,expanded> and
  <LINK TJvCustomInspectorItem.Visible,visible>).

  Read Hidden to determine if the item is hidden or set Hidden to a new state.
Notes:
  Hidden maps onto the iifHidden flag in the Flags property.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Height
Summary
  Item's height.
Description
  Height holds the actual item height in pixels. The inspector uses this
  property to detemine the current height or set it to a new value. Because the
  height depends on various other properties, the value will be adjusted if it's
  not exactly the value it should be.
See Also
  HeightFactor, RowSizing
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.HeightFactor
Summary
  Item's sizing factor.
Description
  HeightFactor holds the number of increments specified by the RowSizing
  property. The Height property will be <B>RowSizing.MinHeight+HeightFactor*
  RowSizing.SizingFactor</B>.
See Also
  Height, RowSizing
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.IndexOf
Summary
  Locates an item or data instance.
Description
  IndexOf determines the index of an item or a data instance. If the item is not
  in the child list, IndexOf returns -1, otherwise the 0-based index is
  returned.
Parameters
  Item    - \Item to locate.
  Data    - \Data instance to locate.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InitEdit
Summary
  Sets the item in edit mode.
Description
  InitEdit sets the item in edit mode, provided the item can be edited (CanEdit
  returns True).
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Insert
Summary
  Inserts an item.
Description
  Insert inserts a child item to this item. Under normal circumstances Insert
  will be called automatically by the \Create constructor of the child item.
  There is no need to call Insert in your application.
Parameters
  Index - 0-based index at which to insert. The new item will be inserted before
          the specified index.
  Item  - Item to insert.
  Data  - \Data instance to insert. It is assumed the data instance already has an
          item assigned to it.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Inspector
Summary
  Item's assigned inspector.
Description
  Inspector holds a reference to the inspector the item is assigned to. The
  property is properly initialized when the item is created and added to an
  existing item.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateItem
Summary
  Signals the inspector the item has changed.
Description
  InvalidateItem notifies the inspector that the item has changed appearance.

  In it's current implementation this means the
  <LINK TJvCustomInspector.InvalidateItem, Inspector.InvalidateItem> method will
  be called.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateList
Summary
  Signals the inspector the list of visible items has changed.
Description
  InvalidateList notifies the inspector that the list of visible items has
  changed.

  In it's current implementation this means the
  <LINK TJvCustomInspector.InvalidateList, Inspector.InvalidateList> method will
  be called.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateMetaData
Summary
  Signals the inspector the item's meta data has changed.
Description
  InvalidateMetaData notifies the inspector that the item's meta data has
  changed.

  Because as far the inspector is concerned, there is no difference between
  a data change and meta data change, the current implementation will call
  InvalidateItem. However, this might change in the future and descendants can
  override this method to take appropiate action when meta data has changed.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.InvalidateSort
Summary
  Invalidates the sort order.
Description
  InvalidateSort is called whenever the sort order might have changed. If the
  inspector's LockCount is 0, the Sort method will be called, followed by an
  InvalidateList. If the inspector's LockCount > 0, it's NotifySort will
  be called.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.IsCompoundColumn
Summary
  Determines if the item a column of a compound row item.
Description
  IsCompountColumn determines if the item is a column of a compound row item. If
  the item is a column, the funtion returns True, otherwise it returns False.
See Also
  TJvInspectorCustomCompoundItem
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Items
Summary
  List of child items.
Description
  Items is a 0-base array of assigned child items. When items are added or
  deleted, the list is updated automatically. Use Count to find out how many
  items are in the list.
See Also
  Count
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.LastPaintGeneration
Summary
  Indicates the last time this item was painted.
Description
  LastPaintGeneration holds the paint generation value of the last time the item
  was painted.

  The value is updated by a call to UpdateLastPaintGeneration which is called
  whenever the item's rectangles are changed (this usually happens just before
  the item is painted).
See Also
  UpdateLastPaintGeneration
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ListBox
Summary
  Reference to the current list box control.
Description
  ListBox holds a reference to the current list box control or <B>nil</B> if the
  list box is not dropped down.

  ListBox is initialized by DropDown and finalized by CloseUp.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ListMouseUp
Summary
  OnMouseUp handler for the list control.
Description
  ListMouseUp is the OnMouseUp handler for the list box control.

  The base implementation closes the list, applying the selected value if an
  item is available at the mouse position. Descendants can override this method
  to provide additional functionality.
Parameters
  Sender - Reference to the list control.
  Button - The mouse button that is held down.
  Shift - Indicates the shift state at the time the mouse was moved.
  X - X-position of the mouse in the client area of the sender.
  Y - Y-position of the mouse in the client area of the sender.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Level
Summary
  The item level in the view tree.
Description
  Level indicates the (0-based) level at which the item is displayed. This is
  determined by checking how many parent items are shown. Because items could be
  hidden (like root item of the inspector), this is not the same as the actual
  tree level.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.MouseDown
Summary
  Handles mouse clicks on the item.
Description
  MouseDown handles mouse clicks that occur on the item.

  The base implementation handles double clicks to select the next value from
  the value list as well as begin tracking the edit button. Descendants can
  override this method to provide additional functionality.
Parameters
  Button - The mouse button that is held down.
  Shift - Indicates the shift state at the time the button was pressed.
  X - X-position of the mouse in the client area of the sender.
  Y - Y-position of the mouse in the client area of the sender.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.MouseMove
Summary
  Handles mouse movements over the item.
Description
  MouseMove handles mouse movements over the item.

  The base implementation handles tracking the edit button as well as
  transfering control to the dropped down value list. Descendants can override
  this method to provide additional functionality.
Parameters
  Shift - Indicates the shift state at the time the mouse was moved.
  X - X-position of the mouse in the client area of the sender.
  Y - Y-position of the mouse in the client area of the sender.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.MouseUp
Summary
  Handles mouse up events on the item.
Description
  MouseUp handles the mouse up events that occur on the item.

  The base implementation end tracking the edit button, as well as clicking the
  edit button. Descendants can override this method to provide additional
  functionality.
Parameters
  Button - The mouse button that is held down.
  Shift - Indicates the shift state at the time the mouse was moved.
  X - X-position of the mouse in the client area of the sender.
  Y - Y-position of the mouse in the client area of the sender.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Multiline
Summary
  Indicates if the item is multiline.
Description
  Multiline indicates if the item uses a multiline edit.

  Read Multiline to determine if the item uses a multiline edit or set Multiline
  to a new state.
Notes:
  Multiline maps onto the iifMultiline flag in the Flags property.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.NaturalSort
Summary
  Sorts the sub items by the order in which they are added.
Description
  NaturalSort will sort the sub items by their index into the Items array.
  NaturalSort is called by Sort when SortKind = iskNone.
See Also
  SortKind, Items
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.OnGetValueList
<COMBINEWITH TInspectorItemGetValueListEvent>
Summary
  Event to retrieve a value list.
Description
  OnGetValueList is the event that is called when the GetValueList is called.
Parameters
  Sender    - The item requesting the value list.
  Values    - TStrings instance to receive the value list. If you assign objects
              to the values, they will not be freed when the list is freed.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.OnCompare
<COMBINEWITH TInspectorItemSortCompare>
Summary
  Event to compare items for sorting purposes.
Description
  OnCompare is the event that is called during sorting when SortKind =
  iskCustom. The result of the function should positive if Item1 > Item2,
  negative if Item1 < Item2 or 0 if Item1 = Item2.
Parameters
  Item1 - First inspector item to compare.
  Item2 - Second inspector item to compare.
See Also
  SortKind
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Pressed
Summary
  Indicates if the edit button is pressed.
Description
  Pressed is used to by the edit button to track it's pressed state. The
  property is controlled through the mouse handling methods.
See Also
  Tracking
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Parent
Summary
  The item's parent item.
Description
  Parent references the item's parent item. Except for the inspector root, all
  items will have a parent.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.QualifiedNames
Summary
  Indicates if the child items will have qualified names.
Description
  QualifiedNames indicates if the child items' names will include the item's
  name. This flag is usually used on hidden items. The child items will then be
  named as <B><Hidden name>.<child name></B> where <B>hidden name</B> is the
  name of the hidden item and <B>child name</B> is the name of the child item.

  Read QualifiedNames to determine if the child items'names will be qualified or
  set QualifiedNames to a new state.
Notes:
  QualifiedNames maps onto the iifQualifiedNames flag in the Flags property.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Readonly
Summary
  Indicates if item is read only.
Description
  Readonly indicates if the item is read only. When an item is read only, it
  cannot be put in edit mode and therfor not be changed from the inspector.

  Read Readonly to determine if the item is hidden or set Readonly to a new state.
Notes:
  Readonly maps onto the iifReadonly flag in the Flags property.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Rects
Summary
  The item's painting rectangles.
Description
  Rects is an array of painting rectangles.

  When reading, empty rects are returned if the item has not been painted during
  the last paint cycle of the inspector. This is determined by comparing the
  inspector's paint generation value against the item's paint generation value.
  When they are equal, the item has been painted during the last paint cycle.

  Setting a rectangle will update the item's paint generation value to be equal
  to the inspector's paint generation value.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.RowSizing
Summary
  Item's row sizing settings.
Description
  RowSizing holds the row sizing settings. These settings determine if the item
  can be resized or not, and it can be resized, what the minimum height should
  be and what increments are to be used.
See Also
  Height, HeightFactor
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.ScrollInView
Summary
  Scrolls the item into view.
Description
  ScrollInView scrolls the inspector in such a way the item will be visible
  completely. If the item is already visible, ScrollInView does nothing.
  Otherwise it will scroll until the item is completely visible (unless the item
  if to large to be shown completely, in which case it is scrolled in such a way
  that as much of the item is visible).

  ScrollInView is used by the inspector control to scroll the current selected
  item into view if it's in edit mode and the edit is being changed (ie. a key
  is pressed).
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.SelectValue
Summary
  Selects next or previous values.
Description
  SelectValue will advance a number of items in the value list and select that
  value for the item. The Delta parameter determines the number of items to go
  forward or backward. SelectValue will handle the value list cyclic, ie. when
  either the beginning or the end of list has been reached, SelectValue will
  wrap around to the other side of the list.
Parameters
  Delta - Number of items to advance forwards or backwards. When Delta < 0, the
            list is traversed backwards, when Delta > 0 the list is traversed
            forwards.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.SetFocus
Summary
  Moves focus to the item.
Description
  SetFocus moves window focus to this item. If the item is in edit mode and the
  edit control can receive focus, the edit control will receive focus.
  Otherwise, the inspector will receive focus.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Sort
Summary
  Sorts the sub items.
Description
  Sort will sort the sub items. The result depends on the SortKind property.
  If SortKind = iskManual, nothing will happen, otherwise one of the internal
  sorting methods will be called.
See Also
  SortKind, AlphaSort, DataSort, NaturalSort, OnCompare
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.SortKind
Summary
  Indicates how sub items are to be sorted.
Description
  SortKind indicates the sort order for sub items. Read SortKind to determine
  the current order or set SortKind to change the sort order.
See Also
  DisplayIndex, OnCompare, Sort
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.StopTracking
Summary
  End the tracking of mouse events for the edit button.
Description
  StopTracking will end tracking mouse events for the edit button.
See Also
  TrackButton, Tracking, Pressed
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.TrackButton
Summary
  Tracks the mouse events for the edit button.
Description
  TrackButton checks the position of the mouse and updates the Pressed property
  and the visual indication for the edit button accordingly.

  The method will be called for all mouse movements while the Tracking property
  is True.
Parameters
  X - X-position of the mouse
  Y - Y-position of the mouse
See Also
  StopTracking, Tracking, Pressed
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Tracking
Summary
  Indicates if mouse events are meant for the edit button.
Description
  Tracking is used to by the edit button to track if mouse events should be
  processed by the button. The property is controlled through the mouse
  handling methods.
See Also
  Pressed
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Undo
Summary
  Cancels changes made to the editor.
Description
  Undo cancels any changes made to the editor and refetches the value from the
  data layer.
See Also
  Apply
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.UpdateDisplayOrder
Summary
  Moves the item to another position.
Description
  UpdateDisplayOrder moves the item to another place in it's visibility order.
  All items between the old and new index will be moved accordingly.

  UpdateDisplayOrder is called whenever the DisplayIndex property of the item
  is changed.
Parameters
  Item - Item to change the DisplayIndex of.
  NewIndex - New index at which the item is to be displayed.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.UpdateLastPaintGeneration
Summary
  Updates the LastPaintGeneration to inspectors PaintGeneration value.
Description
  UpdateLastPaintGenerations sets the item's LastPaintGeneration value to the
  <LINK TJvCustomInspector.PaintGeneration, Inspector.PaintGeneration> value.
Notes
  Do not call this method directly. It is called whenever one of the display
  rectangles are modified, which usually signals the item is to be repainted.
--------------------------------------------------------------------------------
@@TJvCustomInspectorItem.Visible
Summary
  Indicates if item is visible.
Description
  Visible indicates if the item is visible. When an item is visible, neither the
  item nor it's child items are visible in the inspector.

  Read Visible to determine if the item is visible or set Visible to a new state.
Notes:
  Visible maps onto the iifVisible flag in the Flags property.
--------------------------------------------------------------------------------
@@TJvInspectorBooleanItem
--------------------------------------------------------------------------------
Summary
  Boolean inspector item.
Description
  TJvInspectorBooleanItem is an inspector item that allows boolean values to be
  edited, either through the normal enumeration combo box or with a check box.

  TJvCustomInspectorData registers this item for all boolean types (ie. Boolean,
  BYTEBOOL, WORDBOOL and LONGBOOL).
--------------------------------------------------------------------------------
@@TJvInspectorBooleanItem.ShowAsCheckbox
Summary
  Indicates wether the item is shown and edited using a check box.
Description
  ShowAsCheckbox indicates wether the item is shown and edited using a check
  box. If ShowAsCheckbox is True, the value is displayed and edited using a
  check box, otherwise the standard displaying and editing for enumeration types
  is used (ie. a drop down list).
--------------------------------------------------------------------------------
@@TJvInspectorCharItem
--------------------------------------------------------------------------------
Summary
  Char inspector item.
Description
  TJvInspectorCharItem is an inspector item that allows character values to be
  edited. Values below the space or above the tilde (~) are shown/edited as
  <B>#<I>ordinal value</I></B>. In either case you can enter a character in both
  forms (ie. as a character or as an ordinal value).

  TJvCustomInspectorData registers this item for all character types (ie. Char
  and WideChar).
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem
--------------------------------------------------------------------------------
Summary
  Component inspector item.
Description
  TJvInspectorComponentItem is an inspector item that allows component values to
  be edited. The item is derived from TJvInspectorClassItem and as such allows
  published properties of an assigned component to be viewed. The iifValueList
  flag, however will be fixed to allow components to be picked and the
  icfShowClassName flag will be supressed
  (<LINK TJvInspectorClassItem.ShowClassName, ShowClassName> property will be
  False).

  In addition the item provides properties that control the way the
  component names are added. You can specify to show no owner names, all owner
  names or all but the first owner names. You can also specify the order of the
  components.

  * To specify the assigned component properties should be shown, set the
    CreateClassMembers property to True.
  * To specify that owner names are to be shown, set the ShowOwnerNames property
    to True.
  * To specify that the first owner name should <B>not</B> be shown, set
    NoShowFirstOwnerName to True in addition to setting ShowOwnerNames to True.
  * To specify that the component list should be sorted by owner, set SortOwners
    to True.
  * To specify that the components of the first owner should show first
    regardless of any sorting, set KeepFirstOwnerAsFirst to True.
  * To specify that the component list should be sorted by component name, set
    SortComponents to True.
  * Use AddOwner to add a list of component owners (such as forms and
    data modules) to be scanned for assignable components.
  * Optionally in addition to or instead of the above AddOwner, assign an
    <LINK TJvCustomInspectorItem.OnGetValueList, OnGetValueList> event handler to
    provide additionally selectable components.

  TJvCustomInspectorData registers this item for the TComponent type.
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.AddOwner
Summary
  Adds a component owner to the owners list.
Description
  AddOwner adds the specified component as a new component owner.

  Component owners are components who's Component list are scanned for
  assignable components to this item. The drop down list will be filled with a
  list of sub components of these owners that are assignment compatible with the
  class this item represents.

  If the specified owner already is in the list, AddOwner does nothing.
Parameters
  AOwner - The component to add to the Owners list
See Also
  Owners, DeleteOwner
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.DeleteOwner
Summary
  Removes a component owner from the owners list.
Description
  DeleteOwner removes the specified component or the component at the specified
  index from the owners list.

  Component owners are components who's Component list are scanned for
  assignable components to this item. The drop down list will be filled with a
  list of sub components of these owners that are assignment compatible with the
  class this item represents.

  If the specified owner does not exist, DeleteOwner does nothing. If the
  specified index is out of range, an EListError exception will be raised.
Parameters
  AOwner - The component to add to the Owners list
  Index - Index into the Owners list of the owner to be removed.
See Also
  Owners, DeleteOwner
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.ItemComponentFlags
Summary
  Component item flags.
Description
  ItemComponentFlags are the flags specific to the component inspector item.
  Read ItemComponentFlags to determine the current flags or set it to a new
  value.
See Also
  KeepFirstOwnerAsFirst, NoShowFirstOwnerName, ShowOwnerNames, SortComponents,
  SortOwners
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.KeepFirstOwnerAsFirst
Summary
  Indicates wether the components of the first owner should appear before other
  owner components.
Description
  KeepFirstOwnerAsFirst indicates wether the components of the first owner
  should appear before the components of the other owners, regardless of any
  sorting option.
See Also
  ItemComponentFlags, Owners, SortComponents, SortOwners
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.NoShowFirstOwnerName
Summary
  Indicates wether the first owner's name is to be shown in the drop down list.
Description
  NoShowFirstOwnerName indicates whether the first owner's name is to be
  prefixed in the drop down list of assignable components.

  When set to True, the name of the first owner is not shown, regardless of the
  state of the ShowOwnerNames property. When set to False, the name of the first
  owner will be shown if ShowOwnerNames is also set to True.

  NoShowFirstOwnerName maps to the icfNoShowFirstOwnerName in the
  ItemComponentFlags property.
See Also
  ItemComponentFlags, ShowOwnerNames
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.OwnerCount
Summary
  Number of component owners.
Description
  OwnerCount holds the number of component owners in the Owners list.

  Read OwnerCount to find out how many component owners are in the Owners list.
See Also
  Owners
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.Owners
Summary
  List of component owners.
Description
  Owners is a 0-based array of component owners.

  Component owners are components who's Component list are scanned for
  assignable components to this item. The drop down list will be filled with a
  list of sub components of these owners that are assignment compatible with the
  class this item represents.

  Read Owners to find out which component owners are available to this item or
  change a specific owner by setting it to a new one.
See Also
  OwnerCount, AddOwner, DeleteOwner
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.ShowOwnerNames
Summary
  Indicates wether the owner names are to be shown in the drop down list.
Description
  ShowOwnerNames indicates whether the owner names are to be prefixed in the
  drop down list of assignable components.

  When set to True, the name of the owners are shown. If NoShowFirstOwnerName is
  also set to True, the name of the first owner will not be shown.

  ShowOwnerNames maps to the icfShowOwnerNames in the ItemComponentFlags
  property.
See Also
  ItemComponentFlags, NoShowFirstOwnerName
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.SortComponents
Summary
  Indicates wether components are sorted alphabetically.
Description
  SortComponents indicates wether or not the components of each owner are sorted
  alphabetically.

  Sorting owners can be controlled separately through the SortOwners property.
See Also
  ItemComponentFlags, Owners, SortOwners
--------------------------------------------------------------------------------
@@TJvInspectorComponentItem.SortOwners
Summary
  Indicates wether owners are grouped alphabetically.
Description
  SortOwners indicates wether or not the owner list is sorted alphabetically
  before searching for components.

  Sorting components can be controlled separately through the SortComponents
  property. In addition, if KeepFirstOwnerAsFirst is set to True, the first
  owner of the list (Owners[0]) will always be the first in the list.
See Also
  ItemComponentFlags, KeepFirstOwnerAsFirst, Owners, SortComponents
--------------------------------------------------------------------------------
@@TJvInspectorCompoundItem
--------------------------------------------------------------------------------
Summary
  Compound row inspector item.
Description
  TJvInspectorCompoundItem is an inspector item that allows some of it's child
  items to be shown as sub columns of itself.
See Also
  TJvCustomInspectorItem.IsCompoundColumn
--------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.AddColumn
Summary
  Adds the specified child to column list.
Description
  AddColumn will add the specified child in the Items list to the Columns list.
  This will remove the specified item from the Items list (a column item can't
  be shown as a child item as well). The column is intialized to a width of 0
  (see Width and WidthSet for more information).

  AddColumn comes in two overloaded versions: one to add an Item instance and
  one to add the item at an index in the Items property.
Parameters
  Item - Item to add as a column. Item is checked to be a child of the compound
          item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  DeleteColumn, InsertColumn
--------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.DeleteColumn
Summary
  Deletes an item from the column list.
Description
  DeleteColumn will remove an item from the column list. The item will be moved
  back to the Items list.

  DeleteColumn comes in three overloaded versions: one to delete a column
  instance, one to delete the column at an index and one to delete an item
  instance.
Parameters
  Column - Column to delete.
  Index - Column index to delete.
  Item - Item to delete from the column list.
--------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.IndexOfColumn
Summary
  Locates a specific column.
Description
  IndexOfColumn searches for a column and returns the index. If the requested
  column is not found, -1 will be returned, otherwise it's a 0-based index into
  the Columns list.

  IndexOfColumn comes in two overloaded versions: one to locate a column
  instance and one to locate an item instance.
Parameters
  Col - Column instance to locate.
  Item - Item instance to locate.
--------------------------------------------------------------------------------
@@TJvInspectorCompoundItem.InsertColumn
Summary
  Inserts the specified child to column list at a specified index.
Description
  InsertColumn will insert the specified child in the Items list to the Columns
  list at the specified index. This will remove the specified item from the
  Items list (a column item can't be shown as a child item as well). The column
  is intialized to a width of 0 (see Width and WidthSet for more information).

  InsertColumn comes in two overloaded versions: one to insert an Item instance
  and one to insert the item at an index in the Items property.
Parameters
  Index - Index at which the item is to be inserted into the column list. This
           is a 0-based index. The item will be inserted at the index, moving
           all items at or above the index to the right. If Index = ColumnCount,
           the item will be added to the column list.
  Item - Item to add as a column. Item is checked to be a child of the compound
          item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  AddColumn, DeleteColumn, TJvInspectorCustomCompoundItem.ColumnCount,
  TJvInspectorCustomCompoundItem.Columns
--------------------------------------------------------------------------------
@@TJvInspectorClassItem
--------------------------------------------------------------------------------
Summary
  Class inspector item.
Description
  TJvInspectorClassItem is an inspector item that allows class values to be
  edited. The item provides two properties that control the way the value can be
  edited. You can specify that instance members are to be created as child items
  and/or if the value is assignable.

  * To specify the item is assignable, specify the iifValueList in the Flags
    property and assign a handler to the
    <LINK TJvCustomInspectorItem.OnGetValueList, OnGetValueList> event.
  * To specify the assigned classes properties should be shown, set the
    CreateClassMembers property to True.

  TJvCustomInspectorData registers this item for the class type.
--------------------------------------------------------------------------------
@@TJvInspectorClassItem.CreateMemberItems
Summary
  Flag to control wether or not class properties are created as child item.
Description
  CreateMemberItems control wether or not the class properties are created as
  child items. If CreateMemberItems is True, properties for the class are
  created as child items, otherwise the child items are not created.

  CreateMemberItems maps to the icfCreateMemberItems in the ItemClassFlags
  property.
See also
  ItemClassFlags
--------------------------------------------------------------------------------
@@TJvInspectorClassItem.CreateMembers
Summary
  Creates the class properties as child items.
Description
  CreateMembers will create all published properties of the class it represents
  as child items. CreateMembers will be called from
  <LINK TJvCustomInspectorItem.InvalidateMetaData, InvalidateMetaData> if the
  CreateMemberItems property is set to True.
See Also
  CreateMemberItems, DeleteMembers, TJvCustomInspectorItem.InvalidateMetaData
--------------------------------------------------------------------------------
@@TJvInspectorClassItem.DeleteMembers
Summary
  Deletes the child items that represent properties of the class.
Description
  DeleteMembers will delete all sub items that are published properties of the
  class it represents. DeleteMembers will be called from CreateMembers to
  refresh the member list.
See Also
  CreateMembers
--------------------------------------------------------------------------------
@@TJvInspectorClassItem.ItemClassFlags
Summary
  Class item flags.
Description
  ItemClassFlags are the flags specific to the class inspector item. Read
  ItemClassFlags to determine the current flags or set it to a new value.
See Also
  CreateMembers, ShowClassName
--------------------------------------------------------------------------------
@@TJvInspectorClassItem.ShowClassName
Summary
  Flag to control wether or not the class name is shown as a value.
Description
  ShowClassName controls wether the class name is shown as a value or the
  instance value is shown. If ShowClassName is True, the class' name is shown
  in parenthesis as the item's value.

  If ShowClassName is False, the value of the instance is shown. If no instance
  is assigned, an empty string is used, otherwise the name of the TComponent is
  shown if the instance is a TComponent or the specified value name in the value
  list is used.

  ShowClassName maps to the icfShowClassName in the ItemClassFlags property.
See also
  ItemClassFlags
--------------------------------------------------------------------------------
@@TJvInspectorCustomCategoryItem
--------------------------------------------------------------------------------
Summary
  Inspector category item.
Description
  TJvInspectorCustomCategoryItem is an inspector item that represents a
  category. A category is a data-less item that allows you to group several
  items that are related to each other.
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem
--------------------------------------------------------------------------------
Summary
  Compound row inspector item.
Description
  TJvInspectorCustomCompoundItem is an inspector item that allows some of it's child
  items to be shown as sub columns of itself. It's primarly intended as a base class
  for multicolumn items. 
  
  Use a TJvInspectorCompoundItem to define a multicolumn item you can manage yourself.
  
  TJvInspectorDateTimeItem also descends from TJvInspectorCustomCompoundItem but you have
  no control over the columns.
  
  DisplayName is reimplemented by TJvInspectorCustomCompoundItem to take the
  SingleName and SingleNameUseFirstCol properties into account when retrieving/setting
  the DisplayName.
See Also
  TJvCustomInspectorItem.IsCompoundColumn
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.AddColumnPrim
Summary
  Adds the specified child to column list.
Description
  AddColumnPrim will add the specified child in the Items list to the Columns list.
  This will remove the specified item from the Items list (a column item can't
  be shown as a child item as well). The column is intialized to a width of 0
  (see Width and WidthSet for more information).

  AddColumnPrim comes in two overloaded versions: one to add an Item instance and
  one to add the item at an index in the Items property.
  
  This method primarily intended as an internal method to add columns. Some descendants
  will surface this behaviour through publicly declared methods, others don't but
  add the columns automatically (such as TJvInspectorDateTimeItem).
Parameters
  Item - Item to add as a column. Item is checked to be a child of the compound
          item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  DeleteColumnPrim, InsertColumnPrim
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.ColumnCount
Summary
  Indicates the number of columns.
Description
  ColumnCount retrieves the number of columns that are in the column list. Read
  ColumnCount to find out how many columns the compound item has.
See Also
  Columns
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.Columns
Summary
  List of columns.
Description
  Columns is a 0-based array of columns the compound item has. Use Columns to
  retrieve an instance of a specific column.
See Also
  ColumnCount
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.CompoundItemFlags
Summary
  Determines flags specific for compound items.
Description
  CompoundItemFlags determines the options specific for the compound item. Each flag
  is also represented by a separate property.
See Also
  SingleName, SingleNameUseFirstCol
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.DeleteColumnPrim
Summary
  Deletes an item from the column list.
Description
  DeleteColumnPrim will remove an item from the column list. The item will be moved
  back to the Items list.

  DeleteColumnPrim comes in three overloaded versions: one to delete a column
  instance, one to delete the column at an index and one to delete an item
  instance.

  This method primarily intended as an internal method to delete columns. Some descendants
  will surface this behaviour through publicly declared methods, others don't but
  delete the columns automatically (such as TJvInspectorDateTimeItem).
Parameters
  Column - Column to delete.
  Index - Column index to delete.
  Item - Item to delete from the column list.
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.DivideRect
Summary
  Divides the specified rectangle over the columns.
Description
  Dividerect divides the specified rectangle over the columns (taking into
  account the columns Width property) and set's the associated item's rectangle
  accordingly.

  If DivideRect divides the iprValue rectangle, the Painter will be requested to
  calculate the edit based rectangles.
Parameters
  RectKind - The rectangle kind to set.
  Rect - The rectangle to divide.
See Also
  TJvInspectorCompoundColumn.Width, TJvCustomInspector.Painter,
  TJvInspectorPainter.CalcEditBasedRects
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.IndexOfColumnPrim
Summary
  Locates a specific column.
Description
  IndexOfColumnPrim searches for a column and returns the index. If the requested
  column is not found, -1 will be returned, otherwise it's a 0-based index into
  the Columns list.

  IndexOfColumnPrim comes in two overloaded versions: one to locate a column
  instance and one to locate an item instance.

  This method primarily intended as an internal method to locate columns. Some descendants
  will surface this behaviour through publicly declared methods, others don't (such as TJvInspectorDateTimeItem).
Parameters
  Col - Column instance to locate.
  Item - Item instance to locate.
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.InsertColumnPrim
Summary
  Inserts the specified child to column list at a specified index.
Description
  InsertColumnPrim will insert the specified child in the Items list to the Columns
  list at the specified index. This will remove the specified item from the
  Items list (a column item can't be shown as a child item as well). The column
  is intialized to a width of 0 (see Width and WidthSet for more information).

  InsertColumnPrim comes in two overloaded versions: one to insert an Item instance
  and one to insert the item at an index in the Items property.

  This method primarily intended as an internal method to insert columns. Some descendants
  will surface this behaviour through publicly declared methods, others don't but
  insert the columns automatically (such as TJvInspectorDateTimeItem).
Parameters
  Index - Index at which the item is to be inserted into the column list. This
           is a 0-based index. The item will be inserted at the index, moving
           all items at or above the index to the right. If Index = ColumnCount,
           the item will be added to the column list.
  Item - Item to add as a column. Item is checked to be a child of the compound
          item.
  ItemIndex - Index into the Items item list of the item to add.
See Also
  AddColumnPrim, DeleteColumnPrim, ColumnCount, Columns
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.RecalcColumnWidths
Summary
  Update column widths
Description
  RecalcColumnWidths will recalculate all column widths such that the total
  width will be 100. If the SetColumn property is set to a column, that column
  is guarenteed to be the width it was set to.

  RecalcColumnWidths will loop over all colums and adjust there widths if
  needed. If a columns width would make the total >100, it is resized to a
  smaller value. If a columns width was set to 0, it will be added to a list
  of columns to be set after the main loop.

  After the main loop has ended and the total width < 100, a second loop will
  start to loop over all item for which the width was set to 0. The remaining
  space will be equally divided over the columns.
Parameters
  SetColumn - Column which has to be set to the width that is specified. This
                column is guarenteed to be set to that width, unless it's
                width is 0, which means it will be set to whatever width
                remains after the main loop.
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SelectedColumn
Summary
  Currently selected (focused) column.
Description
  SelectedColumn indicates which column currently has the input focus. Read
  SelectedColumn to determine which column has focus or set it to a column that
  is to recieve input focus.
See Also
  SelectedColumnIndex
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SelectedColumnIndex
Summary
  Index of currently selected (focused) column.
Description
  SelectedColumnIndex indicates which column currently has the input focus. Read
  SelectedColumnIndex to determine which column has focus or set it to a column
  that is to recieve input focus.
See Also
  SelectedColumn
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SingleName
Summary
  Determines if the compound item uses a single name to represent the different
  columns.
Description
  SingleName determines if the compound item uses a single name to represent the
  different columns.
  
  Set SingleName to True if you want only 1 name displayed, regardless of the
  number of columns.
  
  Set SingleName to False if you want separate names displayed for each column.
  The displayed names are then determined by the DisplayName of the items associated
  with the columns. <B>Note:</B> when setting SingleName to False, SingleNameUseFirstCol will
  also be set to False.
  
  SingleName maps to the icifSingleName in the CompoundItemFlags property.
--------------------------------------------------------------------------------
@@TJvInspectorCustomCompoundItem.SingleNameUseFirstCol
Summary
  Determines if the single name shown is that of the first column.
Description
  SingleNameUseFirstCol determines if the name displayed in SingleName mode, is the
  DisplayName of the item associated with the first column.
  
  Set SingleNameUseFirstCol to True to let the item associated with the first column
  provide the name to show. <B>Note:</B> setting SingleNameUseFirstCol to True
  will also set SingleName to True.
  
  Set SingleNameUseFirstCol to False to keep the DisplayName of the compound item
  separated from any column in SingleName mode.

  SingleNameUseFirstCol maps to the icifSingleNameUseFirstCol in the CompoundItemFlags property.
--------------------------------------------------------------------------------
@@TJvInspectorDateItem
--------------------------------------------------------------------------------
Summary
  TDate inspector item.
Description
  TJvInspectorDateItem is an inspector item that allows TDate values to be
  edited through a simple editor.

  TJvCustomInspectorData registers this item for TDate types.
--------------------------------------------------------------------------------
@@TJvInspectorDateItem.Format
Summary
  Determines the format for the date.
Description
  Format determines the display/edit format of the date string. The format string should only
  contain the d, dd, m, mm, yy, yyyy or date separator characters. Other settings are not allowed.
--------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem
--------------------------------------------------------------------------------
Summary
  TDateTime inspector item.
Description
  TJvInspectorDateTimItem is a compound inspector item that allows TDateTime values to be edited
  through two simple editors. The two columns will consist of a TJvInspectorDateItem and a
  TJvInspectorTimeItem. This item will allow you to set the various settings of the two editors.
  There's no reference to the two editors used available in the public interface.

  TJvCustomInspectorData registers this item for TDateTime types.
--------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem.DateFormat
Summary
  Determines the format for the date editor.
Description
  DateFormat determines the format of the date editor. DateFormat is a direct reference to the
  <LINK TJvInspectorDateItem.Format, Format> property of the \TJvInspectorDateItem.
See Also
  TJvInspectorDateItem.Format
--------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem.TimeShowAMPM
Summary
  Determines if the time editor shows AM/PM.
Description
  TimeShowAMPM determines if the time editor will show AM/PM or use the 24-hour notation.
  TimeShowAMPM is a direct reference to the <LINK TJvInspectorTimeItem.ShowAMPM, ShowAMPM> property
  of the \TJvInspectorTimeItem.
See Also
  TJvInspectorTimeItem.ShowAMPM
--------------------------------------------------------------------------------
@@TJvInspectorDateTimeItem.TimeShowSeconds
Summary
  Determines if the time editor shows seconds.
Description
  TimeShowSeconds determines if the time editor will show seconds. TimeShowSeconds is a direct
  reference to the <LINK TJvInspectorTimeItem.ShowSeconds, ShowSeconds> property of the
  \TJvInspectorTimeItem.
See Also
  TJvInspectorTimeItem.ShowSeconds
--------------------------------------------------------------------------------
@@TJvInspectorEnumItem
--------------------------------------------------------------------------------
Summary
  Enumeration inspector item.
Description
  TJvInspectorEnumItem is an inspector item that allows enumeration values to be
  edited through a combo box.

  TJvCustomInspectorData registers this item for all enumeration types.
--------------------------------------------------------------------------------
@@TJvInspectorFloatItem
--------------------------------------------------------------------------------
Summary
  Float inspector item.
Description
  TJvInspectorFloatItem is an inspector item that allows floating point values
  to be edited.

  TJvCustomInspectorData registers this item for all float types (ie. Single,
  Double, Extended, Comp and Currency).
--------------------------------------------------------------------------------
@@TJvInspectorFontItem
--------------------------------------------------------------------------------
Summary
  TFont inspector item.
Description
  TJvInspectorFontItem is the class inspector item specific for the TFont class.
  The item assures that the Flags always includes the iifEditButton flag and the
  the Edit method shows the TFontDialog and updates the TFont when OK was
  pressed.

  TJvCustomInspectorData registers this item for the TFont class type.
--------------------------------------------------------------------------------
@@TJvInspectorFontNameItem
--------------------------------------------------------------------------------
Summary
  TFont.Name inspector item.
Description
  TJvInspectorFontNameItem is the string inspector item specific for the
  TFont.Name property. The item assures that the Flags always includes the
  iifValueList and iifOwnerDrawListVariable flags. The value list will consist
  of all registered screen fonts which will be drawn in the font they represent.

  TJvInspectorPropData registers this item for the Name property of the TFont
  class.
--------------------------------------------------------------------------------
@@TJvInspectorInt64Item
--------------------------------------------------------------------------------
Summary
  Int64 inspector item.
Description
  TJvInspectorInt64Item is the inspector item for Int64 values.

  TJvCustomInspectorData registers this item for the Int64 type.
--------------------------------------------------------------------------------
@@TJvInspectorIntegerItem
--------------------------------------------------------------------------------
Summary
  Integer inspector item.
Description
  TJvInspectorIntegerItem is the inspector item for Integer values.

  TJvCustomInspectorData registers this item for all Integer types (ie. Byte,
  Shortint, Word, Smallint, Longword/Cardinal and Integer).
--------------------------------------------------------------------------------
@@TJvInspectorSetItem
--------------------------------------------------------------------------------
Summary
  Set inspector item.
Description
  TJvInspectorSetItem is an inspector item that allows set values to be edited.
  This can be done either by typing the set value as a string and/or by changing
  the Boolean value of the members.

  TJvInspectorSetItem provides extra flags to control the exact behaviour
  (editing the string value and/or creating member items).

  TJvCustomInspectorData registers this item for all set types.
--------------------------------------------------------------------------------
@@TJvInspectorSetItem.CreateMemberItems
Summary
  Controls the creation of items for set members.
Description
  CreateMemberItems determines if child items are created for the individual
  set members. When CreateMemberItems is set to True a Boolean sub item is
  generated for each member of the set.

  CreateMemberItems maps to the isfCreateMemberItems in the ItemSetFlags
  property.
See Also
  EditString, ItemSetFlags
--------------------------------------------------------------------------------
@@TJvInspectorSetItem.CreateMembers
Summary
  Creates the set members as child items.
Description
  CreateMembers will create all set members of the set it represents as child
  items. CreateMembers will be called from InvalidateMetaData if the
  CreateMemberItems property is set to True.
See Also
  CreateMemberItems, DeleteMembers, TJvCustomInspectorItem.InvalidateMetaData
--------------------------------------------------------------------------------
@@TJvInspectorSetItem.DeleteMembers
Summary
  Deletes the child items that represent set members.
Description
  DeleteMembers will delete all sub items that are members of a set.
  DeleteMembers will be called from CreateMembers to refresh the member list.
See Also
  CreateMembers
--------------------------------------------------------------------------------
@@TJvInspectorSetItem.EditString
Summary
  Controls wether the string value can be edited.
Description
  EditString determines if the item can be edited by typing it's value as a
  string. When set to True, the string value can be edited directly, otherwise
  the string value can not be edited.

  If EditString is True, a set value can be specified by using individual
  members seperated by commas, using member ranges using ".." or a combination.
  The brackets are optional, but if you specify one you need to specify both.

  EditString maps to the isfEditString in the ItemSetFlags property.
See Also
  CreateMemberItems, ItemSetFlags
--------------------------------------------------------------------------------
@@TJvInspectorSetItem.ItemSetFlags
Summary
  Set item flags.
Description
  ItemSetFlags are the flags specific to the set inspector item. The flags
  determine if the string value can be edited and/or is sub items are created
  for the individual items.
See Also
  CreateMemberItems, EditString
--------------------------------------------------------------------------------
@@TJvInspectorStringItem
--------------------------------------------------------------------------------
Summary
  String inspector item.
Description
  TJvInspectorStringItem is an inspector item that allows string values to be
  edited.

  TJvCustomInspectorData registers this item for all string types (ie.
  ShortString, AnsiString (=long strings) and WideString).
--------------------------------------------------------------------------------
@@TJvInspectorTimeItem
--------------------------------------------------------------------------------
Summary
  TTime inspector item.
Description
  TJvInspectorTimeItem is an inspector item that allows TTime values to be
  edited through a simple editor.

  TJvCustomInspectorData registers this item for TTime types.
--------------------------------------------------------------------------------
@@TJvInspectorTimeItem.ShowAMPM
Summary
  Determines if the editor shows AM/PM.
Description
  ShowAMPM determines if the editor will show AM/PM or use the 24-hour notation.
  
  Set ShowAMPM to True to allow the editor to display a 12-hour clock and append the AM or PM
  suffix.
  
  Set ShowAMPM to False to allow the editor to display a 24-hour clock.
--------------------------------------------------------------------------------
@@TJvInspectorTimeItem.ShowSeconds
Summary
  Determines if the editor shows seconds.
Description
  ShowSeconds determines if the editor will show seconds.
  
  Set ShowSeconds to True to allow the editor to display the seconds.
  
  Set ShowSeconds to False to hide the seconds from the editor.
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
## Item registration
--------------------------------------------------------------------------------
@@TJvInspectorRegister
Summary
  Inspector item registration database.
Description
  TJvInspectorRegister is the item registration database. It provides a list of
  registration items which can searched for a match based on a data instance.

  Each data layer can have it's own registration database (but is not required
  to). Whenever a data instance gets created the following steps will occur:

  * Calls the inspectors' AfterDataCreate event
  * Locates the first available registration database. Because all data layers
    ultimately inherit from TJvCustomInspectorData, a database will always be
    found.
  * The registration database is searched for a match. The search is started
    with the last added item. If either no match or no perfect match has been
    found, the search is continued in the registration database of one of it's
    parent classes, until no parent registration database is found or until a
    perfect match is located. In the end the best match result is returned.
  * The inspectors' BeforeItemCreate event is called
  * If a valid item class has been found, the item is created and the
    AfterItemCreate event is called. In addition, the registration items'
    ApplyDefaults method is called for the newly created item.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.Add
Summary
  Adds a registration item to the database.
Description
  Add adds a registration item to the registration database.
Parameters
  RegItem - Registration item to add.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.Compare
Summary
  Compares two registration items.
Description
  Compare compares two registration items using a data instance to obtain a match
  value. If Item1 is a better match, Item1 match value will be returned (always
  positive), otherwise Item2 match value will be returned as a negative value.
  In other words: A positive result: Item1 is the winner, a negative result:
  Item2 is the winner.
Parameters
  ADataObj - Data layer instance use for comparison
  Item1 -    First item to be compared.
  Item2 -    Second item to be be compared.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.Count
Summary
  Number of items in the database
Description
  Count indicates the number of registration items in the database.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.Create
Summary
  Instantiates a registration database.
Description
  Create instantiates a new registration database for a specific data class.
Parameters
  ADataClass - The data class for which the registration database is
               instantiated.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.DataClass
Summary
  Data class the database is for
Description
  DataClass indicates for which data layer class the registration database is.
  This is used in FindMatch to search for other registration databases up the
  data layer hierarchie.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.Delete
Summary
  Removes a registration item from the database.
Description
  Delete removes a registration item from the registration database.
Parameters
  RegItem - Registration item to remove.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.Destroy
Summary
  Disposes of the registration database.
Description
  Destroy clears the registration database and then destroys it.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.FindMatch
Summary
  Finds a match for the given data instance
Description
  FindMatch tries to find a match for the given data instance. It will start in
  it's own database from the last added item back to the first added item. If no
  perfect match is found, it will try to locate a registration database in one
  of the parent data classes and will delagate the search to that database if
  found. The result will be either <B>nil</B> if no match was found or the
  registration item that matched best.
Parameters
  ADataObj - Data layer instance to find a match for.
--------------------------------------------------------------------------------
@@TJvInspectorRegister.Items
Summary
  Reference to the registration items in the database.
Description
  Items is the array of items in the registration database.
--------------------------------------------------------------------------------
## Registration items: base class
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem
Summary
  Base registration item.
Description
  TJvCustomInspectorRegItem is the abstract base registration item. You should
  never add an instance of this class to the registration database but rather
  one of the descendant types.
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.ApplyDefaults
Summary
  Applies defaults to an inspector item
Description
  AppliesTo assigns default values to an inspector item. ApplyDefaults is called
  by the data layers' CreateChild method after the inspector item is created.
Parameters
  Item - Inspector item to assign the defaults to.
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.Compare
Summary
  Compares the item with another
Description
  Compare compares the item with the specified item. The registration item uses
  two compare methods, Compare and CompareTo, which work in a similar way as
  Assign and AssignTo: if Compare doesn't know how to compare the two items,
  It swaps the items and calls CompareTo.

  The Compare method in TJvCustomInspectorRegItem will call the specified items'
  CompareTo method with itself as a parameter. The result of this call will be
  negated (because the order of the items was swapped) and returned.
Parameters
  Item - Registration item to compare with
  ADataObj - Data layer instance use for comparison
Returns
  If the specified item is a better match than this item, the negated match value
  is returned, otherwise the match value of this item is returned. If the items
  could not be compared, not the match value will be returned but the match
  percentages using the same rules as for the match value (ie. a negative number
  means the specified item is a better match, a positive number means this item
  is the better match).
See Also
  CompareTo
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.CompareTo
Summary
  Compares the item to another
Description
  CompareTo compares the item to the specified item. The registration item uses
  two compare methods, Compare and CompareTo, which work in a similar way as
  Assign and AssignTo: if Compare doesn't know how to compare the two items,
  It swaps the items and calls CompareTo.

  The CompareTo method in TJvCustomInspectorRegItem will return the match
  percentage of the one that matched highest.
Parameters
  Item - Registration item to compare to
  ADataObj - Data layer instance use for comparison
Returns
  If the specified Item is a better match than this item, the negated match
  percentage of that item is returned, otherwise the match percentage of this
  item is returned.
See Also
  Compare
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it
  should use if this item matches a data instance.
Parameters
  AItemClass - Inspector item class to assign to the registration item.
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.IsMatch
Summary
  Determines if the item matches for the given data instance.
Description
  IsMatch checks if the given item is a match for the given data layer. It
  returns the result of the expression MatchValue(ADataObj) <> 0.
Parameters
  ADataObj - Data layer instance use for comparison
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.ItemClass
Summary
  Inspector item class to use on a match
Description
  ItemClass holds the inspector item class to use if this item is a match for a
  data instance. This value is used in the CreateChild method of a data object.
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.MatchValue
Summary
  Determines the match value for the given data instance.
Description
  MatchValue determines if and how good the registration item matches for the
  given data instance. MatchValue in TJvCustomInspectorRegItem is an abstract
  method and should be overriden in descendant classes to provide a meaningfull
  value.
Parameters
  ADataObj - Data layer instance use for comparison
--------------------------------------------------------------------------------
@@TJvCustomInspectorRegItem.MatchPercent
Summary
  Determines the match percentage for the given data instance.
Description
  MatchPercent determines the percentage of matching  the registration item to
  the given data instance. MatchPercent in TJvCustomInspectorRegItem is an
  abstract method and should be overriden in descendant classes to provide a
  meaningfull value (this usually involves in translating the MatchValue to a
  percentage).
Parameters
  ADataObj - Data layer instance use for comparison
--------------------------------------------------------------------------------
## Registration items: type info based
--------------------------------------------------------------------------------
@@TJvInspectorTypeInfoRegItem
Summary
  Registration item based on type info
Description
  TJvInspectorTypeInfoRegItem is a registration item that bases its matching
  value on the type info it represents and the type info in the data object.

  The match value is determined as follows:
  <table>
  Situation                                   Value
  ---------                                   -----
  Equal RTTI pointers                         100
  Different RTTI pointers, class type,        50
    objects class inherits from the given
    class.
  Different RTTI, no class type or not        0
  inheriting from class
  </table>
  Thus, if the registration item represents the type info for TComponent and
  the data instance points to TWinControl, the MatchValue will be 50 (ie. not
  a perfect match).

  The match percentage will be equal to the match value in all cases.
--------------------------------------------------------------------------------
@@TJvInspectorTypeInfoRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it
  should use if this item matches a data instance.
Parameters
  AItemClass - Inspector item class to assign to the registration item.
  ATypeInfo - The RTTI pointer this item should represent.
--------------------------------------------------------------------------------
@@TJvInspectorTypeInfoRegItem.TypeInfo
Summary
  The type info this registration item represents
Description
  TypeInfo indicates the RTTI pointer this registration item is used for. Read
  TypeInfo to determine which RTTI pointer is matched or set it to another
  RTTI pointer.
--------------------------------------------------------------------------------
## Registration items: type kind based
--------------------------------------------------------------------------------
@@TJvInspectorTypeKindRegItem
Summary
  Registration item based on type kinds
Description
  TJvInspectorTypeKindRegItem is a registration item that bases its matching
  value on the kind of type it represents and the type info in the data object.

  The match value is determined as follows:
  <table>
  Situation                                   Value
  ---------                                   -----
  Equal type kinds                            100
  Not equal type kinds                        0
  </table>
  Since TypKind is generic, the match percentage will be either 0 or 50%.
--------------------------------------------------------------------------------
@@TJvInspectorTypeKindRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it
  should use if this item matches a data instance.
Parameters
  AItemClass - Inspector item class to assign to the registration item.
  ATypeKind - The type of RTTI this item should represent.
--------------------------------------------------------------------------------
@@TJvInspectorTypeKindRegItem.TypeKind
Summary
  The type kind this registration item represents
Description
  TypeKind indicates what sort of type info this registration item is used for.
  Read TypeKind to determine which type of RTTI is matched or set it to another
  RTTI type.
--------------------------------------------------------------------------------
## Registration items: TCaption types
--------------------------------------------------------------------------------
@@TJvInspectorTCaptionRegItem
Summary
  Registration item for the TCaption type.
Description
  TJvInspectorTCaptionRegItem is the registration item that specifically matches
  TCaption types. For these types, ApplyDefaults will set the item's
  iifMultiline flag.
--------------------------------------------------------------------------------
## Registration items: property data layer
--------------------------------------------------------------------------------
@@TJvInspectorPropRegItem
Summary
  Registration item for the property data layer
Description
  TJvInspectorPropRegItem is a registration item that bases its matching
  value on the kind of type it represents and the type info in the data object.

  The match value is determined by adding one or more values as follows:
  <table>
    Situation                     Value
    ---------                     -----
    <B>ClassType known<B>
    class type equal              add 32
    class type inherits           add 16
    class does not match          return 0
    <B>\Name known</B>
    \Name exact match             add  8
    \Name matches by mask         add  4
    \Name does not match          return 0
    <B>Type info known</B>
    Type info exact match         add  2
    Type info typekind matches    add  1
    Type info does not match      return 0
  </table>
  The percentage will be calculated based on these rules:
  <table>
  Situation                       Value
  ---------                       -----
  Initial                         100
  ClassType unknown               decrease with 10
  ClassType known but inherits    divide by 2
  \Name unknown                   decrease with 5
  \Name matches by mask           divide by 2
  Type info unknown               decrease by 10
  Type info typekind matches      divide by 2
  </table>
  When the match value = 0, the percentage will ofcourse also be 0.
--------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it
  should use if this item matches a data instance.
Parameters
  AItemClass - Inspector item class to assign to the registration item.
  AObjectClass - The class the property belongs to
  AName - The name of the property.
  ATypeInfo - The type info of the property.
--------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.Name
Summary
  The property name.
Description
  Name holds the property name that's used while matching. If Name is empty, it
  will not be considered in the match value.
--------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.ObjectClass
Summary
  The object's class
Description
  ObjectClass holds the class the instance for the property should be. If
  ObjectClass is <B>nil</B>, it will not be considered in the match value.
--------------------------------------------------------------------------------
@@TJvInspectorPropRegItem.TypeInfo
Summary
  The property's type info.
Description
  TypeInfo holds the type info that's used while matching. If TypeInfo is
  <B>nil</B>, it will not be considered in the match value.
--------------------------------------------------------------------------------
## Registration items: database field mapping
--------------------------------------------------------------------------------
@@TJvInspectorTFieldTypeRegItem
Summary
  Registration item for mapping TFieldTypes to RTTI.
Description
  TJvInspectorTFieldTypeRegItem is a registration item that bases its matching
  value on the TFieldType it represents.

  The match value is determined by adding one or more values as follows:
  <table>
    Situation                     Value
    ---------                     -----
    <B>\FieldType specified</B>
    no match:                     return 0
    match:                        add 16
    <B>\FieldName specified</B>
    no match:                     return 0
    matches by mask:              add 4
    exact match:                  add 8
    <B>\FieldTable specified</B>
    no match:                     return 0
    matches by mask:              add 1
    exact match:                  add 2
  </table>
  The percentage will be either 0 or 100, indicating wether or not to continue
  the search.
--------------------------------------------------------------------------------
@@TJvInspectorTFieldTypeRegItem.Create
Summary
  Instantiates a registration item
Description
  Create instantiates a registration item and assigns it the inspector item it
  should use if this item matches a data instance.
Parameters
  AFieldName - Name of the field to match.
  AFieldTable - Name of the table to match.
  AFieldType - The TFieldType to match.
  ATypeInfo - The type info of the property.
--------------------------------------------------------------------------------
@@TJvInspectorTFieldTypeRegItem.FieldName
Summary
  Name of the field.
Description
  FieldName is the name of the field to match. If FieldName is an empty string,
  it is not used for matching purposes.
--------------------------------------------------------------------------------
@@TJvInspectorTFieldTypeRegItem.FieldTable
Summary
  Name of the table.
Description
  FieldTable is the name of the table to match. If FieldTable is an empt
  string, it is not used for matching purposes.
--------------------------------------------------------------------------------
@@TJvInspectorTFieldTypeRegItem.FieldType
Summary
  Type of the field.
Description
  FieldType is the type of the field to match. If FieldType is set to ftUnknown,
  it is not used for matching purposes.
--------------------------------------------------------------------------------
@@TJvInspectorTFieldTypeRegItem.TypeInfo
Summary
  The type info to use.
Description
  TypeInfo holds the type info that should be used when the item matches the
  field.
--------------------------------------------------------------------------------
