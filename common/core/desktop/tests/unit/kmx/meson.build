# Copyright:    Â© 2018 SIL International.
# Description:  Cross platform build script to compile libkmnkbp API unit tests.
# Create Date:  19 Oct 2018
# Authors:      Marc Durdin, Tim Eves (TSE)
# History:      19  Oct 2018 - TSE - Added test for context API functions.
#

if compiler.get_id() == 'emscripten'
  tests_flags = ['--embed-file', join_paths(meson.current_source_dir(),'@/')]
  source_path = '/'
  test_path = '/'
else
  tests_flags = []
  source_path = meson.current_source_dir()
  test_path = meson.current_build_dir()
endif

kmx = executable('kmx', 'kmx.cpp',
    cpp_args: defns,
    include_directories: [inc, libsrc],
    link_args: links + tests_flags,
    dependencies: [rust_mock_processor],
    objects: lib.extract_all_objects())

tests = [
  '000 - null keyboard',
  '001 - basic input UnicodeI',
  '002 - basic input Unicode',
  '003 - nul',
  '004 - basic input (shift 2)',
  '005 - nul with initial context',
  '006 - vkey input (shift ctrl)',
  '007 - vkey input (ctrl alt)',
  '008 - vkey input (ctrl alt 2)',
  '012 - ralt',
  '013 - deadkeys',
  '014 - groups and virtual keys',
  '015 - ralt 2',
  '017 - space mnemonic kbd',
  '018 - nul testing',
  '019 - multiple deadkeys',
  '020 - deadkeys and backspace',

  '021 - options',
  '022 - options with preset',
  '023 - options with save',
  '024 - options with save and preset',
  '025 - options with reset',

  '026 - system stores',
  '027 - system stores 2',

  '028 - smp',
  '029 - beep',

  '030 - multiple groups',
  '031 - caps lock',
  '032 - caps control',
  '033 - caps always off',
  '034 - options double set reset',
  '035 - options double set staged',
  '036 - options - double reset staged',
  '037 - options - double reset',
  '038 - punctkeys',
  '039 - generic ctrlalt',
  '040 - long context',
  '041 - long context and deadkeys',
  '042 - long context and split deadkeys',
  '043 - output and keystroke',

  '044 - if and context',
  '045 - deadkey and context',
  '046 - deadkey and contextex',
  '047 - caps always off initially on',
  '048 - modifier keys keep context'
]

if build_machine.system() == 'windows'
  kmcomp = find_program('kmcomp.exe', required: false)
  kmcomp_cmd = [kmcomp]
  copy_cmd = [find_program('cmd.exe', required: true), '/c', 'copy']
else
  kmcomp = find_program('kmcomp', required: false)
  kmcomp_cmd = [kmcomp]
  if not kmcomp.found()
    wine = find_program('wine', required: false)
    kmcomp = find_program('kmcomp.exe', required: false)
    kmcomp_cmd = [wine, kmcomp]
    if not wine.found()
      kmcomp = disabler()
    endif
  endif
  copy_cmd = [find_program('cp', required: true)]
endif

if compiler.get_id() == 'emscripten'
  # The .kmx files are linked in to the unit test,
  # so kmcomp is too late here
  kmcomp = disabler()
endif

test_keyboards = ''
foreach kbd : tests
  if test_keyboards.startswith('{')
    test_keyboards += ''',
  '''
  endif
  test_keyboards +=  '''{
    "name": "''' + kbd + '''",
    "id": "''' + kbd + '''",
    "version": "0.0",
    "languages": [
      {
        "name": "Undetermined",
        "id": "und"
      }
    ]
  }'''
  configure_file(
    command: copy_cmd + ['@INPUT@', '@OUTPUT@'],
    input: kbd + '.kmn',
    output: kbd + '.kmn'
  )
  if not kmcomp.found()
    configure_file(
      command: copy_cmd + ['@INPUT@', '@OUTPUT@'],
      input: kbd + '.kmx',
      output: kbd + '.kmx'
    )
  endif
endforeach

cfg = configuration_data()
cfg.set('keyboards', test_keyboards)
configure_file(
  configuration: cfg,
  input: 'kmp.json.in',
  output: 'kmp.json'
)

if kmcomp.found()
  foreach kbd : tests
    kbd_src = files(join_paths(source_path, kbd) + '.kmn')
    kbd_obj = join_paths(test_path, kbd) + '.kmx'
    kbd_log = custom_target(kbd + '.kmx'.underscorify(),
      output: kbd + '.log',
      input: kbd_src,
      command: kmcomp_cmd + ['-s', '-d', '@INPUT@', kbd_obj, '@OUTPUT@']
    )

    test(kbd, kmx, depends: kbd_log, args: [kbd_src, kbd_obj])
  endforeach
else
  foreach kbd : tests
    kbd_src = join_paths(source_path, kbd) + '.kmn'
    kbd_obj = join_paths(test_path, kbd) + '.kmx'

    test(kbd, kmx, args: [kbd_src, kbd_obj])
  endforeach
endif
