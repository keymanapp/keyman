##Package: System
##Status: Completed,Checked
----------------------------------------------------------------------------------------------------
@@JvWndProcHook.pas
Summary
    Contains the TJvWindowHook component.
Author
  Peter Thörnqvist
  Remko Bonte
----------------------------------------------------------------------------------------------------
@@UnRegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder
<TITLE UnRegisterWndProcHook function>
Summary
  Removes a registered hook.
Description
  Call UnRegisterWndProcHook to unhook a control. The hook must previously been registered by a call
  to
  RegisterWndProcHook.
  
  TJvWindowHook calls this method when it wants to stop hooking the control. An internal list is
  maintained to prevent "broken links" when a hook is removed.
Parameters
  AControl - Specifies the hooked control.
  AHandle  - Specifies the hooked handle.
  Hook     - Specifies the control hook procedure.
  Order    - Specifies the kind of hook. It should be the same value as used by the call to
              RegisterWndProcHook.
See Also
  RegisterWndProcHook

----------------------------------------------------------------------------------------------------
@@TJvWindowHook.UnHookControl
Summary
  Unhooks the control.
Description
  Call UnHookControl to set the Active property for the hook component to false. When Active is
  false, no AfterMessage and BeforeMessage will be triggered. If no other hook components have placed
  a hook on the control, then the control will be unhooked.
See Also
  Active, Control

----------------------------------------------------------------------------------------------------
@@TJvWindowHook.HookControl
Summary
  Hooks the control.
Description
  Call HookControl to set the Active property for the hook component to true. When Active is true,
  AfterMessage and BeforeMessage will be triggered when the hooked control receives a message.
See Also
  Active, Control

----------------------------------------------------------------------------------------------------
@@TJvWindowHook.Control
Summary
  Specifies the control to hook.
Description
  Use property Control to specify which control must be hooked.
See Also
  Active

----------------------------------------------------------------------------------------------------
@@TJvWindowHook.BeforeMessage
Summary
  Occurs before the hooked control handles a received message.
Description
  Use BeforeMessage to respond to messages send to the hooked control. The BeforeMessage event is
  fired <I>before</I> the hooked control has handled the message.
  
  Use parameter Handled to specify whether the hooked control may respond to this message. Setting
  Handled to true will prevent the hooked control or other hooks placed on the control to respond to
  this message.
  
  This event is only triggered when Active is set to true.
  Note
  Be careful with setting parameter Handled to true. For example, unconditionally returning true will
  crash your application.
See Also
  Active, AfterMessage, Control

----------------------------------------------------------------------------------------------------
@@TJvWindowHook.AfterMessage
Summary
  Occurs after the hooked control has handled a received message.
Description
  Use AfterMessage to respond to messages send to the hooked control. The AfterMessage event is fired
  <I>after</I> the hooked control has handled the message.
  
  Use parameter Handled to specify whether the message is handled. Setting Handled to true will
  prevent other hooks to respond to this message.
  
  This event is only triggered when Active is set to true.
See Also
  Active, BeforeMessage, Control

----------------------------------------------------------------------------------------------------
@@TJvWindowHook.Active
Summary
  Indicates whether or not the control is hooked.
Description
  Use Active to determine or set whether the control specified by Control is hooked. When Active is
  false, no AfterMessage and BeforeMessage events will be triggered. When Active is true, the control
  specified by Control is hooked. Before the hooked control receives a message a BeforeMessage event
  with that message is fired. After the hooked control has handled that message an AfterMessage event
  will be fired.
  
  At design time, set Active to true to make the control hooked when the application starts running
  (the default value is false). At run-time, use the HookControl or UnHookControl method to hook the
  control or remove the hook.
See Also
  Control, HookControl, UnHookControl

----------------------------------------------------------------------------------------------------
@@TJvHookOrder.hoAfterMsg
Represents a hook method that allows to handle a message <I>after</I> the hooked control has handled that message.

----------------------------------------------------------------------------------------------------
@@TJvWindowHook
<TITLEIMG TJvWindowHook>
#JVCLInfo
<GROUP JVCL.System>
<FLAG Component>
Summary
  Enables you to receive messages send to a certain control.
Description
  Use TJvWindowHook to receive and respond to messages send to a certain control.
  
  Set Control to specify the control to hook and set Active to true to place a hook on that control.
  \Write BeforeMessage and/or AfterMessage event handlers to respond to messages before or after they
  are handled by the hooked control. Note that if you do not write a BeforeMessage and AfterMessage
  handler that the control won't be hooked.
  
  TJvWindowHook places and removes a hook on a control by a call to RegisterWndProcHook and
  UnRegisterWndProcHook, resp. An internal list is maintained to prevent "broken links" when a hook
  is removed.

----------------------------------------------------------------------------------------------------
@@TJvHookOrder.hoBeforeMsg
Represents a hook method that allows to handle a message <I>before</I> the hooked control handles that message.

----------------------------------------------------------------------------------------------------
@@TJvHookOrder
<TITLE TJvHookOrder type>
Summary
  Represents different kinds of hook methods.
Description
  The TJvHookOrder type is used to represent different kinds of hook methods.

----------------------------------------------------------------------------------------------------
@@TJvHookMessageEvent
<TITLE TJvHookMessageEvent type>
Summary
  Type for event handlers that let an application process messages before or after the hooked control
  has handled it.
Description
  Use TJvHookMessageEvent to respond to messages send to the hooked control.
  
  Use parameter Handled to specify whether the message is handled. Setting Handled to true will
  prevent other hooks or the hooked control - if it has not received the message yet - to respond to
  this message.
Parameters
  Sender  - The hook component that has send this message.
  Msg     - Represents the Windows message that is about to be send to or just has been send to the  
           hooked control.
  Handled - Set Handled to true to specify that the message is handled, and that no other hooks, or  
           the hooked control itself, may respond to this message.

----------------------------------------------------------------------------------------------------
@@TJvControlHook
<TITLE TJvControlHook type>
Summary
  The type for a control hook procedure.
Description
  TJvControlHook is the type for a control hook procedure that acts like a window procedure of a
  control. Like most window procedures, TJvControlHook takes a message record as an argument.
  
  The control hook should return true if it processes the message, and false if it does not. If the
  hook procedure is registered with parameter Order set to hoBeforeMsg, then returning true will
  prevent the hooked control to respond to the message.
  Note
  Be careful with setting the result to true. For example, always returning true with a hook
  procedure that is registered with parameter Order set to hoBeforeMsg, will crash your application.
Parameters
  Msg - Represents the Windows message send to the hooked control.
See Also
  RegisterWndProcHook, UnRegisterWndProcHook

----------------------------------------------------------------------------------------------------
@@ReleaseObj
<TITLE ReleaseObj procedure>
Summary
  Destroys the object and frees its associated memory.
Description
  Call ReleaseObj to destroy an object and free its associated memory.
  
  ReleaseObj does not destroy the object until all messages in the message queue are processed.
  Note
  ReleaseObj returns immediately to the caller. It does not wait for the object to be freed before
  returning.
Parameters
  AObject - Object that should be destroyed.

----------------------------------------------------------------------------------------------------
@@RegisterWndProcHook@THandle@TJvControlHook@TJvHookOrder
<TITLE RegisterWndProcHook function> <COMBINE RegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder>

----------------------------------------------------------------------------------------------------
@@RegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder
<TITLE RegisterWndProcHook function>
Summary
  Registers a hook.
Description
  Call RegisterWndProcHook to hook a control. Hooking a control allows you to respond to messages
  send to that control.
  
  Use Order to specify whether you want to receive messages send to the hooked control, <I>before</I>
  or <I>after</I> the control handles them. By setting Order to hoBeforeMsg you can prevent the
  control to handle specific messages.
  
  TJvWindowHook calls this method when it wants to start hooking the control. An internal list is
  maintained to prevent "broken links" when a hook is removed.
  
  Call UnRegisterWndProcHook to unregister the hook.
Parameters
  AControl - Specifies the control to hook.
  AHandle  - Specifies the handle to hook.
  Hook     - Specifies the control hook procedure.
  Order    - Specifies whether to receive messages before or after the control handles them.
See Also
  UnRegisterWndProcHook

----------------------------------------------------------------------------------------------------
@@UnRegisterWndProcHook@THandle@TJvControlHook@TJvHookOrder
<TITLE UnRegisterWndProcHook function> <COMBINE UnRegisterWndProcHook@TControl@TJvControlHook@TJvHookOrder>

