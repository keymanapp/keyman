@@JVCL.HWG.Struct.Topics
<GROUP JVCL.HWG.Struct>
<TITLE Basic topic structure>
<TOPICORDER 200>
  Topics are generally structured in the following manner:
    
  * Topic ID *
  
  The topic ID consists of the (qualified) symbol, preceded by the topic marker (<B>@@</B>). Because
  Doc-O-Matic is case sensitive you should specify the symbol in the same casing as it is in the
  source. Members of records and classes have to be qualified with their record/class name. Note
  that enumerations are considered as a structure, where each individual value is considered a
  member.
  
  \Examples:
    
<CODE>
<I>Declaration:</I>
  <B>type</B>
    TMyRec = <B>record</B>
      Element1: <B>string</B>;
      Element2: integer;
    <B>end</B>;
    
    TMyClass = <B>class</B>
      <B>constructor</B> Create;
      <B>procedure</B> X;
      <B>property</B> Y: Integer <B>read</B> GetY <B>write</B> SetY;
    <B>end</B>;
    
    TMyEnum = (enValue1, enValue2);
    
  <B>procedure</B> MyProc;
    
<I>Topic markers:</I>
\@@TMyRec
\@@TMyRec.Element1
\@@TMyRec.Element2
\@@TMyClass
\@@TMyClass.Create
\@@TMyClass.X
\@@TMyClass.Y
\@@TMyEnum
\@@TMyEnum.enValue1
\@@TMyEnum.enValue2
\@@MyProc
</CODE>

  * JVCL help flags *
  
  To aid in the automatic overview topic generation, you can specify certain properties used solely
  by our overview generation tool. A list of possible flags can be found here. Note that not all
  flags can be used for all symbols.
  
  * Functional reference grouping *
  
  To place the components/classes/routines in the functional reference tree you should add a 
  <B>\<GROUP></B> tag. This may only be done for the components on the palette, end user classes
  and public routines.
  
  The reference tree is defined by a special file (generic\JVCL.Groups.tree).
  
  <INCLUDE BasicDescribeSummary.dtx>