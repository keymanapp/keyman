@@JVCL.HWG.Basics.HowClass
<GROUP JVCL.HWG.Basics>
<TITLE Describing classes>
<TOPICORDER 300>
  Generally speaking, a class falls into one of three categories:
    
  1. <LINK JVCL.HWG.Basics.HowClass.Helper, Helper class>. This is usually an auxilliary class for
     some property of a component (e.g. TJvSearchAttributes in JvSearchFiles is a helper class for
     TJvSearchFiles.DirParams.Attributes)
  2. <LINK JVCL.HWG.Basics.HowClass.Base, Base class>. This is usually a protected base component
     (e.g. TJvCustomInspector is the base class for TJvInspector)
  3. <LINK JVCL.HWG.Basics.HowClass.EndUser, End user class>. This is the class containing the main
     functionality.
  
  <B>Note:</B> In some circumstances a base class can also be an end user class or a helper class.
----------------------------------------------------------------------------------------------------
@@JVCL.HWG.Basics.HowClass.Helper
<GROUP JVCL.HWG.Basics.HowClass>
<TITLE Describing helper classes>
<TOPICORDER 100>
  
  * Helper classes should not be added to a functional reference group. *
  Since the helper classes are never needed by an end user, they are not supposed to be found in
  the functional reference tree (they will be added to the Symbol Reference automatically though).
  * Always start with the root class of a class hierarchy. *
  If multiple helper classes inherit from each other, start with the root class and its members,
  followed by all direct descendants and their members, then descendants and members from those
  descendants, etc. downto the lowest level of the hierarchy.
  <INCLUDE BasicDescribeSummary.dtx> \Examples:
  * Helper class to specify the various search options.
  * Internally used class to keep track of changes and notify controls.
  <INCLUDE BasicDescribeDescription.dtx>
  * <I>class name</I> is a helper class.......
  * <I>class name</I> is an internally used class.......
----------------------------------------------------------------------------------------------------
@@JVCL.HWG.Basics.HowClass.Base
<GROUP JVCL.HWG.Basics.HowClass>
<TITLE Describing base classes>
<TOPICORDER 200>
  
  * Base classes are generally not in a functional reference group. *
  Base classes are rarely placed in a functional reference tree. Only if the base class is the
  only class documented it could be added to the functional reference tree, but only if the class is
  an end user class as well (i.e. generally useful for an end user to perform some task).
  * Always start with the root class of a class hierarchy. *
  If multiple classes inherit from each other, start with the root class and its members, followed
  by all direct descendants and their members, then descendants and members from those descendants,
  etc. downto the lowest level of the hierarchy.
  <INCLUDE BasicDescribeSummary.dtx> \Examples:
  * Base inspector item.
  * Base registration class.
  <INCLUDE BasicDescribeDescription.dtx>
  * <I>class name</I> is a base class.......
  In addition the description should end with the following (or similar) text:

  * You should not create an instance of this class. Use one of the descendants instead.
  * You should not create an instance of this class. Use one of the returned instances by the
    <I>function name</I> function.
  * You should not create an instance of this class. Use one of the returned instances by the
    <I>function1 name</I>, <I>function2 name</I> or <I>function3 name</I> functions.
----------------------------------------------------------------------------------------------------
@@JVCL.HWG.Basics.HowClass.EndUser
<GROUP JVCL.HWG.Basics.HowClass>
<TITLE Describing end user classes>
<TOPICORDER 300>
  
  * End user classes are generally in a functional reference group. *
  End user classes are usually placed in the functional reference tree. An exception would be if the
  end user class is not a standalone class.
  * Always start with the root class of a class hierarchy. *
  If multiple classes inherit from each other, start with the root class and its members, followed
  by all direct descendants and their members, then descendants and members from those descendants,
  etc. downto the lowest level of the hierarchy.
  <INCLUDE BasicDescribeSummary.dtx> \Examples:
  * Enables you to draw on the screen..
  <INCLUDE BasicDescribeDescription.dtx>
  * Use <I>class name</I> to.......
  * <I>class name</I> allows you to.......
----------------------------------------------------------------------------------------------------
