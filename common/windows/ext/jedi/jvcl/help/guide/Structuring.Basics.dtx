@@JVCL.HWG.Struct.Files
<GROUP JVCL.HWG.Struct>
<TITLE Basic topic file structure>
<TOPICORDER 100>
  In general each topic file corresponds to a Delphi unit. The only exception would be for very
  large units, but even then it's still better to keep a single topic file for each unit.
  
  Topic files follow very simple formatting rules:
    
    * Wrap at or just before 100 characters.
    * The contents of each section should be indented by two spaces.
    * Don't use TAB characters.
    * Separate topics with a line of 100 dashes (-).
    
  As for the general structure of the topic file:

    * Unit symbol *
    
    The unit symbol is required for all units. This symbol uses a fixed way of describing, as is
    explained <LINK JVCL.HWG.Basics.HowUnit, here>.
        
    * Main component/class/routines *
    
    Next you should describe the main component/class/routines of the unit. After each
    class/component description, you should immediately continue with the members. Members,
    regardless of visibility and kind (property, method or event) are always documented in
    alphabetical order, except for the constructors/destructors. Constructors and destructors
    are always documented as the first members (constructor first, destructor second).
    
    More information on how to document components and classes can be found here and information
    on topic structuring can be found here.
    
    More information on how to document routines can be found here and information on topic 
    structuring can be found here.
    
    * Classes *
    
    Describe all (remaining) classes in the unit. After each description, you should immediately
    continue with the members. Members, regardless of visibility and kind (property, method or
    event) are always documented in alphabetical order, except for the constructors/destructors.
    Constructors and destructors are always documented as the first members (constructor first,
    destructor second).
    
    More information on how to document components and classes can be found here and information
    on topic structuring can be found here.
    
    More information on how to document routines can be found here and information on topic 
    structuring can be found here.
    
    * Types *

    All type should be described in alphabetical order. Exceptions to this rule are
    enumeration/set combinations and pointer-to-type/type combinations (eg. PRec = ^TRec). These
    combinations always follow each other (first describe the enumeration/base type; followed by a
    topic for the set/pointer-to-type topic).
      
    Example1: enumeration/set combination

<CODE>
<I>Declaration:</I>

<B>type</B>
  TEnum = (enValue1, enValue2);
  TSet = <B>set of</B> TEnum;
  
<I>Topic file:</I>

\@@TEnum
\Summary
  Example enumeration
\Description
  Enumeration to explain proper way of describing enumeration/set combinations
\@@TEnum.enValue1
  Description of first enumeration value
\@@TEnum.enValue2
  Description of second enumeration value
----------------------------------------------------------------------------------------------------
\@@TSet
\<COMBINEWITH TEnum>
----------------------------------------------------------------------------------------------------
</CODE>

    * Constants and variables *
    
    Constants and variables are described in alphabetical order.
    
    * Helper routines *
    
    Helper routines are described in alphabetical order.
