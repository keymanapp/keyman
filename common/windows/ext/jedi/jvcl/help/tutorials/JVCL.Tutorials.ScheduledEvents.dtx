####################################################################################################
## JvScheduledEvents tutorials                                                                    ##
####################################################################################################
@@JVCL.Tutorials.ScheduledEvents
<GROUP JVCL.Tutorials>
<TITLE Scheduled events tutorials>
  This chapter contains a number of tutorials. Most tutorials just expand on the basic tutorial.

  The following tutorials are available:

  <TABLE>
    Tutorial                                                        Description
    --------                                                        -----------
    <LINK JVCL.Tutorials.ScheduledEvents.001, ScheduledEvents 001>  Basic scheduled events tutorial. The tutorial will create a simple application that generates two recurring events, adding the information to a RichEdit control.
    <LINK JVCL.Tutorials.ScheduledEvents.002, ScheduledEvents 002>  This tutorial will show how you can add and manage scheduled from code.
  </TABLE>
----------------------------------------------------------------------------------------------------
@@JVCL.Tutorials.ScheduledEvents.001
<GROUP JVCL.Tutorials.ScheduledEvents>
<TITLE Tutorials: ScheduledEvents 001: Basic tutorial>
  This tutorial will create a simple application that generates two recurring events, adding the
  information to a RichEdit control.

  To start the tutorial you should create a new application. Name the form <B>frmTestSched</B> save
  the unit as <B>TestSchedMainForm</B> and the project as <B>TestSched</B>.

  Drop a <B>\TRichEdit</B> on the form and set the <B>Align</B> property to <B>alClient</B>. \Rename
  the component to <B>reLog</B>.

  Next, drop a \TJvScheduledEvents component on the form. \Rename it to <B>seTester</B>. \Now open the
  events editor by either right-clicking the component and choose Events editor or doubleclicking
  the Events property or by clicking the ellipsis button next to the Events property. In all cases
  you'll end up with an editor much like the one for \TActionList.

  Once you're in the Events editor you can press <B>\Insert</B> to add a new event. The Object
  Inspector will show the properties of this new scheduled event. We leave the default name of
  Event1. There are not many properties and there's only 1 event. The most important property is
  the <B>Schedule</B> property as it will determine when the handler will be triggered.

  Activate the schedule editor by either doubleclicking the Schedule property or clicking the
  ellipsis button to the right of the property. The schedule editor will popup. The left side
  is the editing area where you'll set the schedule. To the right of the screen is the testing
  area that allows you to check if the specified schedule will do what you want it to do.

  On the left side of the editor you'll see the start date and time (currently set to the date
  and time this scheduled event was created), with below that the schedule type and a large empty
  area. The empty area will be populated with additional settings when you set the schedule type
  to something else than One-shot. The part to the right of the schedule type options will show
  the settings appropiate to that specific recurring type, while the part below it will show the
  setting to specify the daily frequency (when will events be generated) and the range of the
  recurring schedule (when will the schedule end).

  Our first event will be a recurring job, firing every day and every 15 seconds of that day.
  First we set the schedule type to <B>Daily</B>. Immediately the right side will show the
  settings for a daily job. We have two options: <B>Every weekday</B> (runs every monday to friday)
  and <B>Every <I>x</I> day(s)</B> (runs every <I>x</I> day(s), where 1 means every day, 2 will
  skip 1 day, etcetera). We want the job to run every day, so we select the second option. We'll
  keep the default value of <B>1</B> in the edit box.

  In the area below (<B>Daily frequency</B>) we have again two options: <B>Occurs once at</B> (the
  event will be fired only once on the requested day(s) at the specified time) and <B>Occurs every
  <I>interval</I> between <I>start time</I> and <I>end time</I></B> (the event will be fired between
  the specified times with the specified interval). We want the job to run every 15 seconds so we
  select the second option. Type <B>15</B> in the edit box and select <B>Seconds</B> from the drop
  down box. Leave the start time set to <B>00:00:00</B> and the end time set to <B>23:59:59</B>.

  \Now it's time to test the schedule. Press the <B>Run</B> button in the testing area. The box below
  will fill with the dates and times the scheduled event would fire. The button will change to
  <B>Stop</B> to allow you to end the generating process and investigate the list more closely. Just
  press the <B>Stop</B> button when you feel you have enough trigger times to assert the schedule is
  correct. The list contains the following information (from left to right):
  <TABLE>
    Item                        Description
    ----                        -----------
    Trigger counter             Contains the event number. Every event generated (or missed
                                  depending if the <B>Count missed events</B> is specified).
    (Day count)                 Contains the number of days on which events are generated (or
                                  missed if the <B>Count missed events</B> is specified).
    \Date@\Time                 The date and time at which the event will be generated.
  </TABLE>

  The test will start with events from the current date and time (at the moment you pressed the
  <B>Run</B> button) and missed events are counted (which is why the first number will not be 1,
  unless you changed the starting date and time to a date and time in the future). Unchecking
  the <B>Start with current date</B> will start the testing process from the start date and time
  given to the left (the first number in the list will be 1). Leaving the <B>Start with current
  date</B> checked and unchecking the <B>Count missed events</B> will start the testing process from
  the current date and time but will not count any events that should have occured before that time
  (the first number in the list will always be 1).

  \Now that we have verified the schedule, we can press OK to apply the schedule. You'll be back at
  the Object Inspector, showing the properties of the scheduled event. Head over to the events page
  and doubleclick the <B>OnExecute</B> event to generate a new handler. Implement the handler like
  this:
<CODE>
<B>procedure</B> TfrmTestSched.seTesterEvents0Execute(
  Sender: \TJvEventCollectionItem; const IsSnoozeEvent: \Boolean);
<B>var</B>
  OldCol: \TColor;
<B>begin</B>
  OldCol := reLog.SelAttributes.Color;
  reLog.SelAttributes.Color := clRed;
  reLog.Lines.Add('[Event1 has fired!]');
  reLog.SelAttributes.Color := OldCol;
<B>end</B>;
</CODE>
  This will add the text <B>[Event1 has fired!]</B> in red.

  \Now we'll add the second event. This event will again fire each day, but this time every 750
  milliseconds. If you can still see the Events editor, select it. If you can't see it, press
  <B>Alt+0</B> or go to <B>View|Window List...</B> and select the <B>Editing seTester.Events</B>
  window.

  In the events editor, press <B>\Insert</B> to add the second event. Edit the schedule as described
  for the first event. This time you should set the daily frequency interval to 750 milliseconds.
  When you're done with the schedule, head over to the events page and doubleclick the
  <B>OnExecute</B> event to generate a new handler. Implement the handler like this:
<CODE>
<B>procedure</B> TfrmTestSched.seTesterEvents1Execute(
  Sender: \TJvEventCollectionItem; const IsSnoozeEvent: \Boolean);
<B>var</B>
  OldCol: \TColor;
<B>begin</B>
  OldCol := reLog.SelAttributes.Color;
  reLog.SelAttributes.Color := clGreen;
  reLog.Lines.Add('[Event2 has fired!]');
  reLog.SelAttributes.Color := OldCol;
<B>end</B>;
</CODE>
  This will add the text <B>[Event2 has fired!]</B> in green.

  Compile and run the application. Every .75 seconds the text <B>[Event2 has fired!]</B> will be
  added to the rich edit and every 15 seconds the text <B>[Event1 has fired!]</B> will be added.
  While the application run you are free to resize the form or even type in some text. The messages
  will be added at the appropiate times.
----------------------------------------------------------------------------------------------------
@@JVCL.Tutorials.ScheduledEvents.002
<GROUP JVCL.Tutorials.ScheduledEvents>
<TITLE Tutorials: ScheduledEvents 002: Adding and managing schedules from code>
  This tutorial will show how you can add and manage schedules from code. For this tutorial we are
  going to extend the application created by the
  <LINK JVCL.Tutorials.ScheduledEvents.001, basic tutorial>.

  Select the main form and create an OnShow event for it. In this event we will add a new schedule
  in code. The schedule will be a recurring schedule on a weekly basis, ocurring every monday,
  wednesday and friday, every 15 minutes between 9:00 am and 5:00 pm.

  First we declare a local variable to hold the new scheduled event (the full implementation is
  repeated at the end of the tutorial):
<CODE>
<B>procedure</B> TfrmTestSched.FormShow(Sender: \TObject);
<B>var</B>
  SE: \TJvEventCollectionItem;
<B>begin</B>
<B>end</B>;
</CODE>
  Adding new events is done by calling Add on the Events property of the component:
<CODE>
  SE := seTester.Events.Add;
</CODE>
  The SE variable will now hold the new scheduled event. It will be in the uninitialized state
  until the Start method is called. We will first setup the schedule.

  The first thing to do is specify the schedule type:
<CODE>
  SE.Schedule.RecurringType := srkWeekly;
</CODE>
  We've now set the schedule to a weekly recurring job. \Now we will specify the days on which the
  event should be triggered:
<CODE>
  (SE.Schedule <B>as</B> \IJclWeeklySchedule).DaysOfWeek := [swdMonday, swdWednesday, swdFriday];
</CODE>
  The schedule will now fire every monday, wednesday and friday but only at midnight. To correct
  this, we change the properties of the daily frequency:
<CODE>
  <B>with</B> (SE.Schedule <B>as</B> \IJclScheduleDayFrequency) <B>do</B>
  <B>begin</B>
    Start := 9 * 60 * 60 * 1000; // 9:00 am expressed in milliseconds
    End := 17 * 60 * 60 * 1000; // 5:00 pm expressed in milliseconds
    Interval := 15 * 60 * 1000; // 15 minutes expressed in milliseconds
  <B>end</B>;
</CODE>
  The schedule is now completed. Next we assign a event handler to the OnExecute event. First we
  copy the handler of one of the scheduled events from the base tutorial and rename it to
  <B>seTesterEvents2Execute</B> (don't forget to copy both the declaration as well as the
  implementation. The implementations should be changed to:
<CODE>
<B>procedure</B> TfrmTestSched.seTesterEvents2Execute(
  Sender: \TJvEventCollectionItem; const IsSnoozeEvent: \Boolean);
<B>var</B>
  OldCol: \TColor;
<B>begin</B>
  OldCol := reLog.SelAttributes.Color;
  reLog.SelAttributes.Color := clNavy;
  reLog.Lines.Add('[Event3 has fired!]');
  reLog.SelAttributes.Color := OldCol;
<B>end</B>;
</CODE>
  This will add the text <B>[Event3 has fired!]</B> in navy blue. \Now assign the handler to event
  in the OnShow event of the form and activate the scheduled event:
<CODE>
  SE.OnExecute := seTesterEvents2Execute;
  SE.Start;
</CODE>
  The complete OnShow event implementation is thus as follows:
<CODE>
<B>procedure</B> TfrmTestSched.FormShow(Sender: \TObject);
<B>var</B>
  SE: \TJvEventCollectionItem;
<B>begin</B>
  SE := seTester.Events.Add;
  (SE.Schedule <B>as</B> \IJclWeeklySchedule).DaysOfWeek := [swdMonday, swdWednesday, swdFriday];
  <B>with</B> (SE.Schedule <B>as</B> \IJclScheduleDayFrequency) <B>do</B>
  <B>begin</B>
    Start := 9 * 60 * 60 * 1000; // 9:00 am expressed in milliseconds
    End := 17 * 60 * 60 * 1000; // 5:00 pm expressed in milliseconds
    Interval := 15 * 60 * 1000; // 15 minutes expressed in milliseconds
  <B>end</B>;
  SE.OnExecute := seTesterEvents2Execute;
  SE.Start;
<B>end</B>;
</CODE>
  If you compile and run this application, the usual messages about the two schedules created in
  the base tutorial should appear at their normal intervals. In addition, if this application is run
  on monday, wednesday or friday between 9:00 am and 5:00 pm, an additional message will appear
  every 15 minutes. On all other days or times outside of the schedule, this message will not
  appear.
