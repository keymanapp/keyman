####################################################################################################
## JvPlugin tutorials                                                                             ##
####################################################################################################
@@JVCL.Tutorials.Plugins
<TITLE Plugin tutorials>
  This chapter contains a number of tutorials. Most tutorials just expand on the basic tutorial. For
  more background information you should read the chapter regarding writing plugins and plugin
  enabled applications in the JEDI-VCL online help (you'll find it in the Additional Information
  section of the help).

  The tutorials are divided into two groups: plugin writing and writing host applications.

  * Plugin writing tutorials *
  <TABLE>
    Tutorial                                          Description
    --------                                          -----------
    <LINK JVCL.Tutorials.Plugins.Plg001, Plugin 001>  Basic plugin tutorial. The tutorial will create a simple plugin with one command that shows a message when activated.
  </TABLE>

  * Host writing tutorials *
  <TABLE>
    Tutorial                                                      Description
    --------                                                      -----------
    <LINK JVCL.Tutorials.Plugins.Host001, Host application 001>   Basic host tutorial. The tutorial will create a simple host application that allows all package plugins in it's executables folder to be loaded, adding it's commands to the tools menu.
  </TABLE>
----------------------------------------------------------------------------------------------------
@@JVCL.Tutorials.Plugins.Plg001
<GROUP JVCL.Tutorials.Plugins>
<TITLE Tutorials: Plugin 001: Basic plugin tutorial>
  This tutoral will create a simple plugin with one command in it (a simple 'Hello world!') example.

  We start this tutorial by creating a new plugin project. Go to \File|\New..., select the
  <B>Projects</B> tab, select the <B>JEDI Plugin Wizard</B> and press OK. In the dialog that
  appears, type in the name of the plugin, in this case we'll enter "Tutorial1". Below the edit box
  are two options: <B>Package plugin</B> and <B>DLL plugin</B> where package plugin is selected by
  default. We'll leave this setting for now.

  Pressing OK will create a new project <B>PlgTutorial1.dpk</B> and a unit called
  <B>PluginTutorial1.pas</B>. The unit contains a data module named <B>Tutorial1</B>. When you
  select that module, the object inspector will show some additional properties and events.

  First thing to do is to specify the ID of the plugin for easy identification by the host
  application. Set PluginID property to <B>JEDI.Tutorial1</B>. By including the <B>JEDI.</B> part,
  we make sure that this tutorial is unique in the host application, even if another company has
  written a plugin with the same name.

  To make the plugin selection interface in the host application more usefull, we can now assign
  proper values to the following properties:
  <TABLE>
    Property            Value
    --------            -----
    Author              Your name, your companies name or both e.g. <B>John Doe</B>
    Copyright           The copyright notice for your plugin, e.g. <B>Copyright © 2003 Project JEDI</B>.
    Description         A short description of the plugin, e.g. <B>My first plugin</B>.
    PluginVersion       The version of your plugin, e.g. <B>1.0</B> or <B>1.0 RC1</B>.
  </TABLE>

  Our tutorial plugin will provide one command that will just show a message box with the text
  'Hello world!' (programmers are so creative when they write tutorials and examples ;) ).

  To create the command we'll doubleclick on the Commands property to show a familiar editor. Press
  <B>\Insert</B> to create a new command. The object inspector will now show the properties and
  events for our command. The <B.Name</B> property will be set to '<B>Command1</B>' by default.
  We'll set the <B>Caption</B> property to '<B>Test1</B>'.

  Next, doubleclick on the <B>OnExecute</B> event to generate a new event. In this event we'll
  show our most important message. The code will look like this:

<CODE>
<B>procedure</B> TTutorial1.Tutorial1Commands0Execute(Sender: \TObject);
<B>begin</B>
  \ShowMessage('Hello world!');
<B>end;</B>
</CODE>

  Compile the package. A message will popup saying that the JVCL runtime package should be added to
  the requires node. If the host application specifies it uses the JVCL runtime package, you should
  add it, otherwise you can ignore the message and the warning that follows. See also the discussion
  about DLL vs. packages plugins in the JEDI-VCL online help (you'll find it in the Additional
  Information section of the help). If you plan on using the the test host as described in the
  <LINK JVCL.Tutorials.Plugins.Host001, basic host application tutorial>, you can safely add the
  JVCL runtime package (this will automatically recompile the plugin).

  At this point your first plugin is ready. Make sure the plugin .bpl file is placed in the same
  folder as your test host, and run the test host. A suitable test host can be build by following
  the <LINK JVCL.Tutorials.Plugins.Host001, basic host application tutorial>. If all is well,
  you should now see a new menu item in your test host and when you click on it, you'll see our
  message.
----------------------------------------------------------------------------------------------------
@@JVCL.Tutorials.Plugins.Host001
<GROUP JVCL.Tutorials.Plugins>
<TITLE Tutorials: Plugin hosts 001: Basic host application>
  This tutorial will create a simple application that accepts plugins found in it's executable's
  folder. The tutorial is the basis for most of the other tutorials. Every component dropped on
  the form will keep it's default name, unless stated otherwise.

  We start this tutorial by creating a new application. Drop a \TMainMenu on the form. The menu
  should have a <B>\File</B> and a <B>Tools</B> menu. The file menu will have a two sub items:
  <B>Load plugins</B> and <B>\Exit</B>. The tools menu will be left empty. It will be filled with
  the commands provided by the loaded plugins.

  Next we drop a \TJvPluginManager component on the form. We assume package plugins will be used, so
  we set the PluginKind property to <B>plgPackage</B>. You'll notice the Extension property changes
  to <B>bpl</B> automatically. We leave PluginFolder blank, which will make LoadPlugins load all
  packages found in the executable's folder.

  Head over to the events of the \TJvPluginManager and double click on the OnNewCommand event to
  generate a new handler. The handler will have the following implementation:
<CODE>
<B>procedure</B> TForm1.JvPluginManager1NewCommand(Sender: \TObject; ACaption, AHint,
  AData: \string; ABitmap: \TBitmap; AEvent: \TNotifyEvent);
<B>var</B>
  MI: \TMenuItem;
<B>begin</B>
  MI := \TMenuItem.\Create(Self);
  <B>try</B>
    MI.Caption := ACaption;
    MI.Hint := AHint;
    MI.Bitmap := ABitmap;
    MI.OnClick := AEvent;
    Tools1.Add(MI);
  <B>except</B>
    MI.Free; // error occured, cleanup menu item
    <B>raise</B>;
  <B>end</B>;
<B>end</B>;
</CODE>
  The code in this handler will add a new menu item to the tools menu for each command found in each
  loaded plugin.

  Next we will implement the <B>Load plugins</B> menu item's OnClick event. The handler will get the
  following code:
<CODE>
<B>procedure</B> TForm1.Loadplugins1Click(Sender: \TObject);
<B>begin</B>
  JvPluginManager1.LoadPlugins;
<B>end</B>;
</CODE>
  This will load all plugins in the executables folder.

  Implement the <B>\Exit</B> menu item's OnClick event. The handler should just call the \Close
  method of the form.

  We'd prefer the test hosts to use all runtime packages so we will set the <B>Build with runtime
  package</B> option (go to <B>Project|Options</B> and select the <B>Package</B> tab), making sure
  the JVCL runtime package is listed in the edit below it (if it's not there, just add
  <B>;JVCL200R?0</B>, replacing the <B>?</B> with your Delphi version). The reason we do this is to
  make the plugin writers job a little easier (if we wouldn't add the JVCL package to the host, the
  plugin writer would get a warning every time the plugin is compiled).

  At this point the basic host application is ready. Make sure you have package plugin(s) in the
  folder where this executable is written to, run the application and go to <B>\File|Load
  plugins</B>. All plugins in the folder will be loaded. Go over to the <B>Tools</B> menu and all
  commands of all loaded plugins should be there. <B>Note</B> if the <B>Tools</B> menu remains
  empty, make sure the plugins are package plugins and their .bpl files are in the same folder as
  the one where the host application's executable was generated. If the menu still remains empty,
  check that the plugins have commands available (not all plugins need to provide commands).

  To create a plugin for our test host, you can follow the
  <LINK JVCL.Tutorials.Plugins.Plg001, basic plugin writing tutorial>.
