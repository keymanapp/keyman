##Package: Core
##Status: Completed (II)
----------------------------------------------------------------------------------------------------
@@JvDataProviderIntf.pas
Summary
    Contains the interface declarations of the DataProvider mechanism.
Author
  Marcel Bestebroer
  Remko Bonte
  Peter Thörnqvist
----------------------------------------------------------------------------------------------------
@@IJvDataProvider.SelectedConsumer
Summary
  Returns the last selected (currently active) consumer.
Description
  SelectedConsumer returns the currently active consumer. If no consumer is active it will return nil.
See Also
  IJvDataProvider.ReleaseConsumer, IJvDataProvider.SelectConsumer, IJvDataProvider.SelectedContext

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.SelectContext
Summary
  Selects a new context.
Description
  SelectContext selects a new context as the active context. The current context is pushed onto a
  stack. Use ReleaseContext to return to it. When the provider is created no context is selected.
Parameters
  Context - Reference to the context to select as the active context.
See Also
  IJvDataProvider.ReleaseContext, IJvDataProvider.SelectConsumer, IJvDataProvider.SelectedContext

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.SelectConsumer
Summary
  Selects a new consumer.
Description
  SelectConsumer selects a new consumer as the active consumer. The current consumer is pushed onto a
  stack. Use ReleaseConsumer to return to it. When the provider is created no consumer is selected.
Parameters
  Consumer - Reference to the consumer to select as the active consumer.
See Also
  IJvDataProvider.ReleaseConsumer, IJvDataProvider.SelectContext, IJvDataProvider.SelectedConsumer

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.ReleaseContext
Summary
  Deselects the current context, reselecting any previous selected context.
Description
  ReleaseContext deselects the currently active context, reactivating the context that was active
  before it.
See Also
  IJvDataProvider.ReleaseConsumer, IJvDataProvider.SelectContext, IJvDataProvider.SelectedContext

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.ReleaseConsumer
Summary
  Deselects the current consumer, reselecting any previous selected consumer.
Description
  ReleaseConsumer deselects the currently active consumer, reactivating the consumer that was active
  before it.
See Also
  IJvDataProvider.ReleaseContext, IJvDataProvider.SelectConsumer, IJvDataProvider.SelectedConsumer

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.RegisterChangeNotify
Summary
  Register a change notification callback interface.
Description
  RegisterChangeNotify is used to register an IJvDataProviderNotify interface. The methods of this
  interface are called in response to changes at the provider. Usually the IJvDataProviderNotify
  interface is handled by the consumer to update its control as needed.
Parameters
  ANotify - Notification interface to register. If the specified reference is already registered,    
         nothing will happen.
See Also
  IJvDataProvider.UnregisterChangeNotify, IJvDataProviderNotify

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.GetNotifierCount
Summary
  Retrieve the number of registered notifiers.
Description
  GetNotifierCount returns the number of notifiers registered for this provider.
See Also
  IJvDataProvider.GetNotifier, IJvDataProvider.RegisterChangeNotify,
  IJvDataProvider.UnregisterChangeNotify

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.GetNotifier
Summary
  Retrieves a reference to a registered notifier.
Description
  GetNotifier retrieves a reference to the notifier indicated by its index.
Parameters
  Index - Zero-based index of the notifier to retrieve. Allowable values range from 0 to
           GetNotifierCount-1 inclusive.
See Also
  IJvDataProvider.GetNotifierCount, IJvDataProvider.RegisterChangeNotify,
  IJvDataProvider.UnregisterChangeNotify

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.GetItems
Summary
  Retrieves the list of root items.
Description
  GetItems retrieves the IJvDataItems instance containing the list of root items. Each Data Provider
  has to have an IJvDataItems instance so you can safely assume that GetItems will never return a nil
  reference.
  
  Note that it's common for the IJvDataProvider instance to support the IJvDataItems interface as
  well.
  This means that if dpvMe contains a reference to IJvDataProvider that:
  <CODE>
  dpvMe.QueryInterface(IJvDataItems, disRoot) </CODE>
  
  will be the same as:
  <CODE>
  disRoot := dpvMe.GetItems </CODE>
See Also
  IJvDataItems

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.GetImplementer
Summary
  Reference to the implementing object.
Description
  GetImplementer returns a reference to the TObject instance implementing the IJvDataProvider
  interface. This method should be used with care, as you can never be sure which object implements
  the interface. Callers should never assume a specific object unless it is enforced in the
  implementation of the caller.

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.ContextDestroying
Summary
  Called when a context is about to be destroyed.
Description
  ContextDestroying is called whenever a context is about to be destroyed. It's generally used to
  notify all items a specific context (and all of its child contexts) will be no longer available so
  context specific data for these items can be destroyed. Usually this will be done by redirecting
  the call to the root items list (GetItems). In addition ContextDestroying will clean up the
  selected context stack and nilling any reference to the context and/or any of its child contexts
  (they are not removed from the stack as a ReleaseContext may follow later).
Parameters
  Context - Context about to be destroyed.

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.ConsumerDestroying
Summary
  Called when a consumer is about to be destroyed.
Description
  ConsumerDestroying is called whenever a consumer that used this provider is about to be destroyed.
  It's generally used to cleanup the selected consumer stack and making any reference to that
  consumer nil (it will not remove the references from the stack, as it might be possible a
  ReleaseConsumer call will follow it later).
Parameters
  Consumer - Consumer about to be destroyed.

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.ConsumerClasses
Summary
  Retrieves a list of consumer service extension classes needed by the provider.
Description
  ConsumerClasses will retrieve a list of consumer service extension classes the provider needs to be
  used properly.
  
  The list may be depending on the currently selected consumer and/or context, e.g. a consumer that
  can only handle a single item at a time will require a consumer service extension that allows the
  application developer to select the item to use.

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.AllowProviderDesigner
Summary
  Specifies if the provider allows its tree to be designed at design time.
Description
  AllowProviderDesigner signals if the provider allows its tree to be designed at design time. It's
  used by the component editor to enable/disable the 'Tree designer...' menu item.
See Also
  IJvDataProvider.AllowContextManager

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.Changed
Summary
  Will notify all registered notifiers a change has occurred.
Description
  Call Changed to notify all registered change notifiers (IvDataProviderNotify instances registered
  by a call to RegisterChangeNotify) a change has occurred.
Parameters
  ChangeReason - Reason why the change notification is used.
  Source       - Reference to an interface instance linked to the change. See the description of
                  TDataProviderChangeReason to see the expected interface instances in each case.
See Also
  IJvDataProvider.Changing, IJvDataProvider.RegisterChangeNotify, IJvDataProviderNotify

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.Changing
Summary
  Will notify all registered notifiers a change is about to occur.
Description
  Call Changing to notify all registered change notifiers (IvDataProviderNotify instances registered
  by a call to RegisterChangeNotify) a change is about to occur.
Parameters
  ChangeReason - Reason why the change notification is used.
  Source       - Reference to an interface instance linked to the change. See the description of
                  TDataProviderChangeReason to see the expected interface instances in each case.
See Also
  IJvDataProvider.Changed, IJvDataProvider.RegisterChangeNotify, IJvDataProviderNotify

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.AllowContextManager
Summary
  Specifies if the provider allows its contexts to be managed at design time.
Description
  AllowContextManager signals if the provider allows its context tree to be designed at design time.
  It's used by the component editor to enable/disable the 'Context manager...' menu item.
See Also
  IJvDataProvider.AllowProviderDesigner

----------------------------------------------------------------------------------------------------
@@IJvDataProvider
Summary
  Data Provider server interface.
Description
  IJvDataProvider is the main Data Provider interface. A component that is to function as a Data
  Provider should always support this interface. The interface provides methods that:
  
  * allows registration/unregistration of change notifications
  * allows retrieval of the root items list.
  * allows change notification (both before and after changing)
  * selection of current consumer/context
  * various administrative tasks (destruction of consumer, specification of consumer service  
  extensions, allow provider designer and/or context manager).
  
  Although any component could function as a Data Provider, it's often wise to use the JVCL provided
  base classes (in the JvDataProvider unit) to write new Data Providers as these classes deal with
  most of the basics of the Data Provider mechanism so you can focus on writing the actual provider.

----------------------------------------------------------------------------------------------------
@@IJvDataItemText.Text
Summary
  Specifies the caption of the data item.
Description
  Caption specifies the caption for the data item. The caption might be fixed by the object (i.e. it
  can't be changed by assigning a new value to Caption) and might be depending on the current
  context, consumer setting and/or consumer attributes.
See Also
  IJvDataItemText.Editable, IJvDataItemText.GetText, IJvDataItemText.SetText

----------------------------------------------------------------------------------------------------
@@IJvDataItemText.SetText
Summary
  Sets a new text for the data item or column.
Description
  SetText sets a new text for the data item or column. It's the write access method for the Text
  property.
Parameters
  Value - New text for the data item.
See Also
  IJvDataItemText.Text, IJvDataItemText.GetText

----------------------------------------------------------------------------------------------------
@@IJvDataItemText.Editable
Summary
  Specifies if the text of the item or column is editable.
Description
  Editable specifies if the text of the item or column is editable in the user interface (e.g. an
  edit control). If the text should be editable from the user interface the method returns True,
  otherwise
  False is returned.
  
  Note that the return value of Editable does not necessarily mean the text can or can't be changed.
  It only enables/disables the editing from the user interface, but consumers may ignore this method
  if they wish.

----------------------------------------------------------------------------------------------------
@@IJvDataItemText.GetText
Summary
  Retrieves the text of the data item or column.
Description
  GetText retrieves the text of the data item or column. It's the read access method for the Text
  property.
See Also
  IJvDataItemText.Text, IJvDataItemText.SetText

----------------------------------------------------------------------------------------------------
@@IJvDataItemText
Summary
  Data Item support interface for retrieving the item's textual representation.
Description
  IJvDataItemText is a supporting interface for IJvDataItem and IJvDataItemColumn that adds the
  capability of linking a text with an item or a column.
  
  Almost every provider supports the IJvDataItemText interface for its items and columns. Besides
  access to the text, the interface also keeps track of the editability of the text from the user
  interface.
See Also
  IJvDataItem, IJvDataItemColumn

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.set_Visible
Summary
  Sets the visible state.
Description
  Set_Visible sets the visible state of the item. Set_Visible is the Visible property's write method.
Parameters
  Value - New state.
See Also
  IJvDataItemStates.Get_Visible, IJvDataItemStates.Visible

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.Visible
Summary
  Specifies if the item is visible.
Description
  Visible specifies if the item is visible. Read Visible to read the setting or set it to a new value.
  
  If Visible is set to disIndetermined or disNotUsed, the setting is considered True in most cases
  (depends on the caller).
  
  The consumer service <LINK IJvDataConsumerViewList, view list extension> will consider this state
  to determine if the item is to be added to the tree.
See Also
  IJvDataConsumerViewList

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.set_Checked
Summary
  Sets the checked state.
Description
  Set_Checked sets the checked state of the item. Set_Checked is the Checked property's write method.
Parameters
  Value - New state.
See Also
  IJvDataItemStates.Checked, IJvDataItemStates.Get_Checked

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.set_Enabled
Summary
  Sets the enabled state.
Description
  Set_Enabled sets the enabled state of the item. Set_Enabled is the Enabled property's write method.
Parameters
  Value - New state.
See Also
  IJvDataItemStates.Enabled, IJvDataItemStates.Get_Enabled

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.get_Enabled
Summary
  Retrieves the enabled state.
Description
  Get_Enabled retrieves the enabled state of the item. Get_Enabled is the Enabled property's read
  method.
See Also
  IJvDataItemStates.Enabled, IJvDataItemStates.Set_Enabled

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.get_Visible
Summary
  Retrieves the visible state.
Description
  Get_Visible retrieves the visible state of the item. Get_Visible is the Visible property's read
  method.
See Also
  IJvDataItemStates.Set_Visible, IJvDataItemStates.Visible

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.get_Checked
Summary
  Retrieves the checked state.
Description
  Get_Checked retrieves the checked state of the item. Get_Checked is the Checked property's read
  method.
See Also
  IJvDataItemStates.Checked, IJvDataItemStates.Set_Checked

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.Enabled
Summary
  Specifies if the item is enabled.
Description
  Enabled specifies if the item is enabled. Read Enabled to read the setting or set it to a new value.
  
  If Enabled is set to disFalse the item should be rendered in a disabled state. If an action is
  linked to the item (through the IJvDataItemBasicAction interface), it should not be executed.
  
  For any other setting of Enabled, the caller determines the actual setting of Enabled (usually
  interpreted as True).
See Also
  IJvDataItemBasicAction

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates.Checked
Summary
  Specifies if the item is checked.
Description
  Checked specifies if the item is checked. Read Checked to read the setting or set it to a new value.
  
  If Checked is set to disIndetermined the item's checkbox should be rendered in a gray state.
  
  If Checked is set to disNotUsed the caller determines the checked state (usually interpreted as
  False).

----------------------------------------------------------------------------------------------------
@@IJvDataItemStates
Summary
  Data Item support interface for keeping item states at the provider side.
Description
  IJvDataItemStates is a supporting interface for IJvDataItem that adds the capability of keeping the
  Enabled, Checked and Visible states for an item at the provider side.
  
  When a provider or consumer support interface needs one of the aforementioned states, it will first
  request the state from the consumer (if it supports the IJvDataConsumerItemState interface). If
  this interface is not supported or if the returned state equals disNotUsed, the state is requested
  from the IJvDataItemStates interface of the item.
  
  Each of the states can be one of "False", "True", "Indetermined" or "Not used". The consumer is
  responsible of setting the appropriate rendering options based on these settings but is not
  required to handle them. In addition a consumer may override the setting of the item at its
  discretion.
See Also
  IJvDataConsumerItemState, IJvDataItem

----------------------------------------------------------------------------------------------------
@@IJvDataItemsRenderer.MeasureItemByIndex
Summary
  Measure an item given its index.
Description
  MeasureItemByIndex measures the item specified by the Index parameter. Depending on the
  implementation the method might first check if the item to measure supports the IJvDataItemRenderer
  interface; if it does, the measuring is handled by that interface instead.
  
  The caller is responsible for initializing the canvas to the brush, pen and font color.
Parameters
  ACanvas - Canvas to measure on. On entry to this method it is assumed the canvas brush, pen and
  font            are initialized to the proper values.
  Index   - Index into the items array of the item to measure.
See Also
  IJvDataItemsRenderer.AvgItemSize, IJvDataItemsRenderer.DrawItemByIndex,
  IJvDataItemsRenderer.MeasureItem

----------------------------------------------------------------------------------------------------
@@IJvDataItemsRenderer.MeasureItem
Summary
  Measure an item.
Description
  MeasureItem measures the item specified by the Item parameter. Depending on the implementation the
  method might first check if the item to measure supports the IJvDataItemRenderer interface; if it
  does, the measuring is handled by that interface instead.
  
  The caller is responsible for initializing the canvas to the brush, pen and font color.
Parameters
  ACanvas - Canvas to measure on. On entry to this method it is assumed the canvas brush, pen and
  font            are initialized to the proper values.
  Item    - The Data Item to measure.
See Also
  IJvDataItemsRenderer.AvgItemSize, IJvDataItemsRenderer.DrawItem,
  IJvDataItemsRenderer.MeasureItemByIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemsRenderer.DrawItemByIndex
Summary
  Draw an item given its index.
Description
  DrawItemByIndex draws the item specified by the Index parameter. Depending on the implementation
  the method might first check if the item to draw supports the IJvDataItemRenderer interface; if it
  does, the drawing is handled by that interface instead.
  
  The caller is responsible for initializing the canvas to the brush, pen and font color and
  providing an appropriate rectangle (including any indentation for sub items).
Parameters
  ACanvas - Canvas to render to. On entry to this method it is assumed the canvas brush, pen and font
             are initialized to the proper values.
  ARect   - Rectangle in which to draw the item in. On entry it is assumed to be initialized properly
             (including any indentation for sub items). On exit this will be set to the textual part
  of
             the item.
  Index   - Index into the items array of the item to render.
  State   - Draw states to consider during drawing. This might be needed to determine which image
  list            and/or image index to use.
See Also
  IJvDataItemsRenderer.DrawItem, IJvDataItemsRenderer.MeasureItemByIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemsRenderer.DrawItem
Summary
  Draw an item.
Description
  DrawItem draws the item specified by the Item parameter. Depending on the implementation the method
  might first check if the item to draw supports the IJvDataItemRenderer interface; if it does, the
  drawing is handled by that interface instead.
  
  The caller is responsible for initializing the canvas to the brush, pen and font color and
  providing an appropriate rectangle (including any indentation for sub items).
Parameters
  ACanvas - Canvas to render to. On entry to this method it is assumed the canvas brush, pen and font
             are initialized to the proper values.
  ARect   - Rectangle in which to draw the item in. On entry it is assumed to be initialized properly
             (including any indentation for sub items). On exit this will be set to the textual part
  of
             the item.
  Item    - The Data Item to render.
  State   - Draw states to consider during drawing. This might be needed to determine which image
  list            and/or image index to use.
See Also
  IJvDataItemsRenderer.DrawItemByIndex, IJvDataItemsRenderer.MeasureItem

----------------------------------------------------------------------------------------------------
@@IJvDataItemsRenderer.AvgItemSize
Summary
  Determines the average item size.
Description
  AvgItemSize determines the average size of the items in the list. It depends on the implementation
  how this value is determined (either by iterating over the items and calculate the real average or
  by assuming data depending on current font, etc).
  
  The value returned should be considered a rough indication, not an exact value. It's possible that
  either the width, height or both are educated guesses based on the current select font.
  
  The caller is responsible for initializing the canvas to the brush, pen and font color.
Parameters
  ACanvas - Canvas to measure on. On entry to this method it is assumed the canvas brush, pen and
  font            are initialized to the proper values.
See Also
  IJvDataItemsRenderer.MeasureItem, IJvDataItemsRenderer.MeasureItemByIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemsRenderer
Summary
  Support interface for IJvDataItems that handles rendering and measuring of its items and their sub
  items.
Description
  IJvDataItemsRenderer is an optional supporting interface for IJvDataItems that can handle the
  rendering and measuring of the items in the list.
  
  The interface provides methods to:
  
  * Draw an item given its index.
  * Measure an item given its index.
  * Draw the specified IJvDataItem instance.
  * Measure the specified IJvDataItem instance.
  * Determine the average item size.
  
  Some implementations of this interface will first check if the item to render or measure supports
  the
  IJvDataItemRenderer interface; if it does, it will redirect the operation to that implementation
  instead of handling it itself.
  
  Consumers generally handle rendering/measuring in the following way:
  
  * Check if the item supports the IJvDataItemRenderer interface. If it does use it to perform the  
  rendering/measuring.
  * Check for the closest IJvDataItemsRenderer interface (the direct owning IJvDataItems list or any
  of   the lists in its parent chain). If it finds one use it to perform the rendering/measuring.
  * Handle the rendering at the consumer side. This means all items are considered equal and usually 
   only IJvDataItemText and optionally IJvDataItemImage (and the corresponding IJvDataItemsImages) are
    used. The entire rendering/measuring is then consumer (control) dependent and the provider tree
  may
    no longer look uniform in different consumers/clients.
See Also
  IJvDataItemRenderer, IJvDataItems

----------------------------------------------------------------------------------------------------
@@IJvDataItemsManagement.New
Summary
  Create and add a new item to the list.
Description
  New creates and adds a new Data Item to the list of items. What type of item is created depends on
  the implementation but usually is a generic type the item list is intended for.
See Also
  IJvDataItemsManagement.Add

----------------------------------------------------------------------------------------------------
@@IJvDataItemsManagement.Remove
Summary
  Delete an item given its reference.
Description
  Remove deletes the item specified by the Item parameter. Upon entry the parameter will be nilled
  (to dereference the item). This will avoid Access Violations when the caller's reference to the
  item goes out of scope and reference counting is performed.
  
  If the item list is a static list (i.e. IJvDataItems.IsDynamic returns False) there is still a
  chance the item being deleted is still referenced outside the provider. Using that reference might
  then lead to Access Violations.
  
  If the item list is a dynamic list (i.e. IJvDataItems.IsDynamic returns True) the deletion will
  normally be performed (i.e. the reference is removed from the list) but the item might still be
  referenced and usable after this fact. This will lead to the strange situation of
  IJvDataItem.GetItems referring to the IJvDataItems interface, but the list no longer contains that
  item.
Parameters
  Item - Reference to the item to delete.
See Also
  IJvDataItemsManagement.Add, IJvDataItemsManagement.Delete

----------------------------------------------------------------------------------------------------
@@IJvDataItemsManagement.Add
Summary
  Add an item to the list.
Description
  Add adds the specified Data Item to the list of items.
Parameters
  Item - The item to add.
See Also
  IJvDataItemsManagement.Delete, IJvDataItemsManagement.New, IJvDataItemsManagement.Remove

----------------------------------------------------------------------------------------------------
@@IJvDataItemsManagement.Clear
Summary
  Empties the list of items.
Description
  Clear empties the list of items.
See Also
  IJvDataItemsManagement.Delete, IJvDataItemsManagement.Remove

----------------------------------------------------------------------------------------------------
@@IJvDataItemsManagement.Delete
Summary
  Delete an item given an index.
Description
  Delete deletes the item specified by the Index parameter.
  
  If the item list is a static list (i.e. IJvDataItems.IsDynamic returns False) there is a chance the
  item being deleted is still referenced outside the provider. Using that reference might then lead to
  Access Violations.
  
  If the item list is a dynamic list (i.e. IJvDataItems.IsDynamic returns True) the deletion will
  normally be performed (i.e. the reference is removed from the list) but the item might still be
  referenced and usable after this fact. This will lead to the strange situation of
  IJvDataItem.GetItems referring to the IJvDataItems interface, but the list no longer contains that
  item.
Parameters
  Index - Index of the item to delete.
See Also
  IJvDataItemsManagement.Add, IJvDataItemsManagement.Remove

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.SetImages
Summary
  Specifies the image list for normal items.
Description
  SetImages specifies the image list to use for normal items. It's the Images property write method.
Parameters
  Value - Image list to use for normal items.
See Also
  IJvDataItemsImages.GetImages, IJvDataItemsImages.Images

----------------------------------------------------------------------------------------------------
@@IJvDataItemsManagement
Summary
  Support interface for IJvDataItems that handles item management.
Description
  IJvDataItemsManagement is an optional supporting interface for IJvDataItems that manages the item
  list.
  
  The interface provides methods to:
  
  * Add a specific item to the list.
  * Create and add a new item to the list.
  * Empty the list of items.
  * Delete an item given its index or given the item instance.
  
  This interface is needed if the provider tree designer should be able to add/delete items to/from
  the list.
See Also
  IJvDataItems, IJvDataItemsDesigner

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.Images
Summary
  Get or set the image list to use for normal items.
Description
  Images contains a list of bitmaps that can be rendered with an item. Read Images to retrieve the
  list of bitmaps currently used or set Images to a new list of bitmaps to use.
  
  Normally an item's state, as well as drawing state determine which image list will be used (this
  one,
  DisabledImages or HotImages). If one of the other two image lists is not assigned but should have
  been used in the drawing process, this list will be used instead.
See Also
  IJvDataItemsImages.DisabledImages, IJvDataItemsImages.GetImages, IJvDataItemsImages.HotImages,
  IJvDataItemsImages.SetImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.SetDisabledImages
Summary
  Specifies the image list for disabled items.
Description
  SetDisabledImages specifies the image list to use for disabled items. It's the DisabledImages
  property write method.
Parameters
  Value - Image list to use for disabled items.
See Also
  IJvDataItemsImages.DisabledImages, IJvDataItemsImages.GetDisabledImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.SetHotImages
Summary
  Specifies the image list for "hot" items.
Description
  SetDisabledImages specifies the image list to use for "hot" items. It's the HotImages property
  write method.
Parameters
  Value - Image list to use for "hot" items.
See Also
  IJvDataItemsImages.GetHotImages, IJvDataItemsImages.HotImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.GetImages
Summary
  Retrieves the image list for normal items.
Description
  GetImages retrieves the image list for normal items. It's the Images property read method.
See Also
  IJvDataItemsImages.Images, IJvDataItemsImages.SetImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.HotImages
Summary
  \Get or set the image list to use for "hot" items.
Description
  HotImages contains a list of bitmaps that can be rendered with an item if that item is "hot" (e.g.
  the mouse is hovering over it). Read HotImages to retrieve the list of bitmaps currently used or set
  HotImages to a new list of bitmaps to use.
  
  If an item is "hot" but HotImages is not assigned, the rendering code will normally use the normal
  image list (specified by Images).
See Also
  IJvDataItemsImages.DisabledImages, IJvDataItemsImages.GetHotImages, IJvDataItemsImages.Images,
  IJvDataItemsImages.SetHotImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.GetDisabledImages
Summary
  Retrieves the image list for disabled items.
Description
  GetDisabledImages retrieves the image list for disabled items. It's the DisabledImages property
  read method.
See Also
  IJvDataItemsImages.DisabledImages, IJvDataItemsImages.SetDisabledImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.GetHotImages
Summary
  Retrieves the image list for "hot" items.
Description
  GetDisabledImages retrieves the image list for "hot" items. It's the HotImages property read method.
See Also
  IJvDataItemsImages.HotImages, IJvDataItemsImages.SetHotImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages.DisabledImages
Summary
  \Get or set the image list to use for disabled items.
Description
  DisabledImages contains a list of bitmaps that can be rendered with an item if that item or the
  control it's rendered in is in a disabled state. Read DisabledImages to retrieve the list of
  bitmaps currently used or set DisabledImages to a new list of bitmaps to use.
  
  If an item or the control is disabled but DisabledImages is not assigned, the rendering code will
  normally use the normal image list (specified by Images) and render that bitmap in a
  greyed-out/disabled state.
See Also
  IJvDataItemsImages.GetDisabledImages, IJvDataItemsImages.HotImages, IJvDataItemsImages.Images,
  IJvDataItemsImages.SetDisabledImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemsDesigner.NewByKind
Summary
  Creates a specific type of Data Item.
Description
  NewByKind will create a new Data Item instance with properties and supporting interface depending
  on the kind specified.
  
  Which item type is created depends solely on the implementation of the interface.
Parameters
  Kind - Index of the item type to create. This is a 0-based value. If the specified index is invalid
          the function either returns nil or generates an exception (depending on the implementation).
See Also
  IJvDataItemsDesigner.GetCount

----------------------------------------------------------------------------------------------------
@@IJvDataItemsImages
Summary
  Support interface for IJvDataItems to specify image lists for the items.
Description
  IJvDataItemsImages is an optional supporting interface for IJvDataItems that allows to specify
  which image list is to be used for an item.
  
  The support interface is used whenever a Data Item supports IJvDataItemImage. Depending on the
  implementation of the rendering code, the IJvDataItemsImages must be supported in the direct list
  owner of an item or can be supported anywhere up the item tree.
  
  The interface provides three different image lists:
  
  * an image list for disabled state.
  * an image list for "hot" items.
  * a normal image list.
  
  The normal image list must be set. If an item is disabled but there's no disabled image list, the
  normal image will used but drawn in a grayed-out/disabled state.
  
  If an item is "hot" (e.g. the mouse hovers over it) but there's no "hot" image list, the normal
  image list will be used.
See Also
  IJvDataItemImage, IJvDataItems

----------------------------------------------------------------------------------------------------
@@IJvDataItemsDesigner.GetKind
Summary
  Retrieve the menu caption for an item kind.
Description
  GetKind will retrieve a caption (usable for the designer menu) for a given item kind. The first
  item kind has an index of 0, so the valid range of Index is 0..GetCount-1.
  
  If an invalid index is specified, the function returns False (Caption is undefined in this case).
Parameters
  Index   - Index of the item kind for which to retrieve the caption. Index is a 0-based value. If
  the            specified index is invalid the function will return nil.
  Caption - If the function returns True, this parameter will return the caption for the menu item to
             generate.
See Also
  IJvDataItemsDesigner.GetCount

----------------------------------------------------------------------------------------------------
@@IJvDataItemsDesigner.GetCount
Summary
  Returns the number of item kinds.
Description
  GetCount returns the number of item kinds this designer can generate.
See Also
  IJvDataItemsDesigner.GetKind, IJvDataItemsDesigner.NewByKind

----------------------------------------------------------------------------------------------------
@@IJvDataItems.Provider
Summary
  Reference to the data provider instance.
Description
  Provider is a reference to the data provider instance.
See Also
  IJvDataItems.GetProvider, IJvDataItems.Parent

----------------------------------------------------------------------------------------------------
@@IJvDataItemsDesigner
Summary
  Support interface for IJvDataItems that handles item design at the item list level.
Description
  IJvDataItemsDesigner is an optional supporting interface for IJvDataItems that is used solely by the
  Data Provider Tree Designer. It generates a list of item types that can be added. Upon selection
  from the menu the requested item is created by the NewByKind method and is then added to the list
  by using
  the IJvDataItemsManagement.Add method.
  
  IJvDataItemsDesigner is only usable if IJvDataItemsManagement is also supported by IJvDataItems. If
  this is not the case, the new items can't be added to the list which makes it quite useless.
See Also
  IJvDataItemDesigner, IJvDataItems, IJvDataItemsManagement

----------------------------------------------------------------------------------------------------
@@IJvDataItems.Items
Summary
  Array of list items.
Description
  Items is the array of IJvDataItem instances. The first item in the array has an Index value of 0.
  The index ranges from 0 .. Count-1.
Parameters
  Index - 0-based index of the item to retrieve.
See Also
  IJvDataItems.Count, IJvDataItems.GetItem

----------------------------------------------------------------------------------------------------
@@IJvDataItems.Parent
Summary
  Reference to the parent item.
Description
  Parent is a reference to the parent item or nil if this list is the root list (i.e. implemented at
  the IJvDataProvider level.
See Also
  IJvDataItems.GetParent, IJvDataItems.Provider

----------------------------------------------------------------------------------------------------
@@IJvDataItems.GetProvider
Summary
  Reference to the data provider instance.
Description
  GetProvider is a reference to the provider owning this list.
See Also
  IJvDataItems.GetParent, IJvDataItems.Provider, IJvDataProvider

----------------------------------------------------------------------------------------------------
@@IJvDataItems.IsDynamic
Summary
  Determines if the items are dynamic.
Description
  IsDynamic determines if the items list creates an IJvDataItem when it's requested and should
  therefor be disposed of once the last reference goes out of scope.
  
  The implementation object of IJvDataItem should reimplement IUnknown._AddRef and IUnknown._Release
  to ignore reference counting if this method returns False.

----------------------------------------------------------------------------------------------------
@@IJvDataItems.GetParent
Summary
  Reference to the parent item.
Description
  GetParent is a reference to the parent item for this list or nil if this is the root list (i.e.
  implemented at the IJvDataProvider level).
See Also
  IJvDataItem, IJvDataItems.GetProvider, IJvDataItems.Parent, IJvDataProvider,
  IJvDataProvider.GetItems

----------------------------------------------------------------------------------------------------
@@IJvDataItems.GetItemByIndexPath
Summary
  Retrieve an item from the list given its index path.
Description
  GetItemByIndexPath retrieves a Data Item from the list given its index path. If the specified item
  could not be found the method returns nil.
  
  Each integer in the array is considered to be an index into a list of items. The first integer
  refers to the IJvDataItems instance on which this method is called. If more index values follow,
  the item is queried for an IJvDataItems interface. If one is not found the end result will be nil,
  otherwise the next index is applied to the new found item list.
  
  This process will be repeated until the entire path has been completed, or a specified index fell
  out of the range for the list on which to apply it (in which case nil will be returned.
Parameters
  IndexPath - array of item index values considered to be the path to the item to retrieve.
See Also
  IJvDataItem.GetIndex, IJvDataItems.GetItem, IJvDataItems.GetItemByID

----------------------------------------------------------------------------------------------------
@@IJvDataItems.GetItemByID
Summary
  Retrieve an item from the list given its ID (or ID path).
Description
  GetItemByID retrieves a Data Item from the list given its ID or ID-path. Each item will be in
  tiated with an ID value which should be unique throughout the tree - although this is not enforced
  - and this method allows to retrieve an item given that ID.
  
  The path is always considered relative to this list. If the ID string starts with a backslash (or
  forward slash; both are allowed), the path is considered from the root of the provider
  (GetProvider.GetItems).
  
  Each '..' is considered as '1 level up the tree'.
  
  As soon as a term in the path can't be retrieved the entire result will be nil. This can happen
  when to many '..' terms appear or one of the ID's in the path can't be found.
Parameters
  ID - The ID or ID-path of the item to retrieve.
See Also
  IJvDataItem.GetID, IJvDataItems.GetItem, IJvDataItems.GetItemByIndexPath

----------------------------------------------------------------------------------------------------
@@IJvDataItems.GetItem
Summary
  Retrieve an item from the list.
Description
  GetItem retrieves a Data Item from the list given its index. The first item in the list has an
  Index value of 0.
Parameters
  Index - 0-based index of the item to retrieve. The possible values range from 0 .. Count-1.
See Also
  IJvDataItems.Items

----------------------------------------------------------------------------------------------------
@@IJvDataItems.GetCount
Summary
  Retrieves the number of items in the list.
Description
  GetCount retrieves the number of items that are in the list.
See Also
  IJvDataItems.Count

----------------------------------------------------------------------------------------------------
@@IJvDataItems.GetImplementer
Summary
  Reference to the implementing object.
Description
  GetImplementer returns a reference to the TObject instance implementing the IJvDataItems interface.
  This method should be used with care, as you can never be sure which object implements the
  interface.
  Callers should never assume a specific object unless it is enforced in the implementation of the
  various objects.

----------------------------------------------------------------------------------------------------
@@IJvDataItems.Count
Summary
  Number of items in the list.
Description
  Count indicates the number of items in the list.
See Also
  IJvDataItems.GetCount, IJvDataItems.Items

----------------------------------------------------------------------------------------------------
@@IJvDataItems.ContextDestroying
Summary
  Called when a context is about to be destroyed.
Description
  ContextDestroying is called whenever a context is about to be destroyed. It's generally used to
  notify all items a specific context (and all of its child contexts) will be no longer available so
  context specific data for these items can be destroyed.
  
  The implementation of this method should simply iterate over its item list and call each
  IJvDataItem instance's <LINK IJvDataItem.ContextDestroying, ContextDestroying> method.
Parameters
  Context - Context about to be destroyed,

----------------------------------------------------------------------------------------------------
@@IJvDataItemRenderer.Measure
Summary
  Measure an item.
Description
  Measure measures the associated item.
  
  The caller is responsible for initializing the canvas to the brush, pen and font color.
Parameters
  ACanvas - Canvas to measure on. On entry to this method it is assumed the canvas brush, pen and
  font            are initialized to the proper values.
See Also
  IJvDataItemRenderer.Draw, IJvDataItemsRenderer.MeasureItem

----------------------------------------------------------------------------------------------------
@@IJvDataItems
Summary
  List of IJvDataItem objects.
Description
  IJvDataItems represents the list of IJvDataItem objects. The interface is supported by
  IJvDataProvider and might be supported for individual IJvDataItem instances if a specific item
  contains sub items.
  
  The IJvDataItems interface provides methods that:
  
  * Allow retrieval of the number of items
  * All retrieval of an item based on its index, its ID (or ID-path) or an index path.
  * Determine the parent item that owns this list.
  * Determine the provider to which the item belongs.
  * Retrieve a reference to the TObject instance that implements this object.
  * Determine if the items are generated dynamically upon requesting them
  * Take action when a context is destroying.
See Also
  IJvDataItem, IJvDataProvider

----------------------------------------------------------------------------------------------------
@@IJvDataItemRenderer.Draw
Summary
  Draw an item.
Description
  Draw renders the associated item.
  
  The caller is responsible for initializing the canvas to the brush, pen and font color and
  providing an appropriate rectangle (including any indentation for sub items).
Parameters
  ACanvas - Canvas to render to. On entry to this method it is assumed the canvas brush, pen and font
             are initialized to the proper values.
  ARect   - Rectangle in which to draw the item in. On entry it is assumed to be initialized properly
             (including any indentation for sub items). On exit this will be set to the textual part
  of
             the item.
  State   - Draw states to consider during drawing. This might be needed to determine which image
  list            and/or image index to use.
See Also
  IJvDataItemRenderer.Measure, IJvDataItemsRenderer.DrawItem

----------------------------------------------------------------------------------------------------
@@IJvDataItemRenderer
Summary
  Data Item support interface that handles rendering and measuring itself.
Description
  IJvDataItemRenderer is a supporting interface for IJvDataItem that adds rendering and measuring
  capabilities to an item.
  
  Consumers generally handle rendering/measuring in the following way:
  
  * Check if the item supports the IJvDataItemRenderer interface. If it does use it to perform the  
  rendering/measuring.
  * Check for the closest IJvDataItemsRenderer interface (the direct owning IJvDataItems list or any
  of   the lists in its parent chain). If it finds one use it to perform the rendering/measuring.
  * Handle the rendering at the consumer side. This means all items are considered equal and usually 
   only IJvDataItemText and optionally IJvDataItemImage (and the corresponding IJvDataItemsImages) are
    used. The entire rendering/measuring is then consumer (control) dependent and the provider tree
  may
    no longer look uniform in different consumers/clients.
See Also
  IJvDataItem, IJvDataItemsRenderer

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.SetImageIndex
Summary
  Sets the index into the image list of the image to render.
Description
  SetImageIndex sets the index into the image list of the image to render. SetImageIndex is the
  ImageIndex property's write method.
Parameters
  Index - New index of the image to use.
See Also
  IJvDataItemImage.ImageIndex, IJvDataItemImage.SetImageIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.SetSelectedIndex
Summary
  Sets the index into the image list of the image to render when the item is selected.
Description
  SetSelectedIndex sets the index into the image list of the image to render when the item is
  selected or has focus. SetSelectedIndex is the SelectedIndex property's write method.
Parameters
  Value - New index of the image to use.
See Also
  IJvDataItemImage.GetSelectedIndex, IJvDataItemImage.SelectedIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.SetAlignment
Summary
  Sets the position of the image
Description
  SetAlignment sets the position of image with respect to the text. SetAlignment is the Alignment
  property's write method.
Parameters
  Value - New image position. See description for the \Alignment property to determine the end result
           of each value.
See Also
  IJvDataItemImage.Alignment, IJvDataItemImage.GetAlignment

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.SelectedIndex
Summary
  Specifies the index into the image list of the image to render when the item is selected.
Description
  SelectedIndex specifies the index into the image list of the image to render when the item is
  selected. Read SelectedIndex to retrieve the currently used image or set SelectedIndex to a new
  index.
  
  When this property is set to -1, the value for ImageIndex is used instead.
See Also
  IJvDataItemImage.ImageIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.GetImageIndex
Summary
  Retrieves the index into the image list of the image to render.
Description
  GetImageIndex retrieves the index into the image list of the image to render. GetImageIndex is the
  ImageIndex property's read method.
See Also
  IJvDataItemImage.ImageIndex, IJvDataItemImage.SetImageIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.GetSelectedIndex
Summary
  Retrieves the index into the image list of the image to render when the item is selected.
Description
  GetSelectedIndex retrieves the index into the image list of the image to render when the item is
  selected or has focus. GetSelectedIndex is the SelectedIndex property's read method.
See Also
  IJvDataItemImage.SelectedIndex, IJvDataItemImage.SetSelectedIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.ImageIndex
Summary
  Specifies the index into the image list of the image to render.
Description
  ImageIndex specifies the index into the image list of the image to render. Read ImageIndex to
  retrieve the currently used image or set ImageIndex to a new index.
  
  Setting this property to -1 will leave the item without any image.
  
  The image specified by this property is only used when the item is not selected unless
  SelectedIndex is not specified, in which case the image specified by ImageIndex is always used.
See Also
  IJvDataItemImage.SelectedIndex

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.GetAlignment
Summary
  Retrieves the position of the image
Description
  GetAlignment retrieves the position of image with respect to the text. GetAlignment is the
  Alignment property's read method.
See Also
  IJvDataItemImage.Alignment, IJvDataItemImage.SetAlignment

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage.Alignment
Summary
  Specifies the position of the image.
Description
  Alignment specifies the position of the image with respect to the text. Read Alignment to retrieve
  the currently used alignment for the image or set Alignment to a new value.
  
  Note that consumers/renderers are not required to use the setting of this property when they render
  the item. Those that do usually follow these 'rules':
  <TABLE>
  Value           Rendering result
  ==============  --------------------------------------------------------------------------
  taLeftJustify   The image is placed to the left of the text, the item is aligned to the
                    left of the control.
  taCenter        The image is placed above the text, the item is centered horizontally in
                    the control.
  taRightJustify  The image is placed to the right of the text, the item is aligned to the
                    right of the control.
  </TABLE>

----------------------------------------------------------------------------------------------------
@@IJvDataItemDesigner.GetVerbCount
Summary
  Returns the number of edit actions available for the item.
Description
  GetVerbCount returns the number of edit actions available for the item.
See Also
  IJvDataItemDesigner.ExecVerb, IJvDataItemDesigner.GetVerb

----------------------------------------------------------------------------------------------------
@@IJvDataItemImage
Summary
  Data Item support interface for adding image support to an item.
Description
  IJvDataItemImage is a supporting interface for IJvDataItem that adds image support to an item. For
  this interface to be useful, some things have to be taken care of:
  
  * The IJvDataItems owner of the item (or any of the IJvDataItems owners in the parent chain) must  
  support the IJvDataItemsImages interface and at least have a valid image list assigned to its <LINK
    IJvDataItemsImages.Images, Images> property.
  * The rendering code must be able to handle images. Rendering may be handled at the item itself  
  (IJvDataItemRenderer supported by this item), by the item list owner of this item of any item in
    the parent chain (IJvDataItemsRenderer supported by an IJvDataItems implementation) or at the
    consumer (client control). The JEDI-VCL provides generic render implementations of which some do
    support image.
  
  The interface provides properties to manage:
  
  * The position of the image in relation to the text
  * Which image to use in normal cases
  * which image to use when the item is selected/has focus.
See Also
  IJvDataItem, IJvDataItemsImages

----------------------------------------------------------------------------------------------------
@@IJvDataItemDesigner.GetVerb
Summary
  Retrieve information on a particular edit action for the item.
Description
  GetVerb retrieves the name and other information for the specified edit action for the item.
Parameters
  Index     - 0-based index in the list of actions.
  Caption   - Will receive the caption to use to represent the action.
  Enabled   - Will receive the enabled state of the action.
  Checked   - Will receive the checked state of the action.
  Visible   - Will receive the visible state of the action.
  RadioItem - Will receive the flag if the item is a radio item.
See Also
  IJvDataItemDesigner.GetVerbCount

----------------------------------------------------------------------------------------------------
@@IJvDataItemDesigner.ExecVerb
Summary
  Executes a particular edit action on the item.
Description
  ExecVerb will execute the specified edit action on an item.
Parameters
  Index - 0-based index in the list of actions.
See Also
  IJvDataItemDesigner.GetVerb, IJvDataItemDesigner.GetVerbCount

----------------------------------------------------------------------------------------------------
@@IJvDataItemColumns
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataItemColumns.GetColumnByID
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  ID                - Description for this parameter
  CreateIfNotExists - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataItemColumns.GetColumnFor
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Header            - Description for this parameter
  CreateIfNotExists - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataItemDesigner
Summary
  Data Item support interface to allow editing of an item in the design time provider editor.
Description
  IJvDataItemDesigner is an IJvDataItem support interface to support editing of an item in the design
  time provider editor.
  
  Items that allow the item to be edited in special ways need to implement this interface.
  Note
  As this feature is currently not implemented there is a possibility this interface will be changed
  in the near future or might be dropped completely. It's highly recommended to not use this
  interface at this time.

----------------------------------------------------------------------------------------------------
@@IJvDataItemColumn.Header
Summary
  Write here a summary (1 line)
Description
  Write here a description
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataItemBasicAction.Execute
Summary
  Performs a task linked to the item.
Description
  Execute performs a task linked to the item. It's usually called by the consumer when an item is
  either selected or double-clicked (depending on the control).
  
  The Sender parameter is usually set to the control that initiated the task.
  
  The return value will be False if nothing happened (i.e. the consumer may trigger an OnClick event
  to give the user the possibility to take action) and set to True when the action was executed (in
  this case the control will usually not trigger an OnClick event; this is solely at the consumers
  discretion though).
Parameters
  Sender - Reference to the control that initiated the action. Note that this may be nil in some     
       cases.

----------------------------------------------------------------------------------------------------
@@IJvDataItemColumn
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataItemBasicAction
Summary
  Data Item support interface for responding to an item being selected/double clicked.
Description
  IJvDataItemBasicAction is a supporting interface for IJvDataItem that adds the capability of
  executing a task if the item is selected or double-clicked by the control.
  
  Some items will have a specific task linked to them, e.g. a control applet provider might have an
  action linked to each item that will execute that control applet. In other cases a provider might
  provide a way to link a user event to each individual item (using a separate interface) which will
  then be called through this interface from the consumer.
  
  The interface provides in a single method that will perform an action linked to the item.
See Also
  IJvDataItem

----------------------------------------------------------------------------------------------------
@@IJvDataItem.Items
Summary
  Reference to the items list owner of this item.
Description
  Items is a reference to the IJvDataItems owner of this item.
  
  Every item belongs to an item list. Which item list might be dependent on which context is
  currently active.
  
  The Items property is also the only way to determine the parent item of this item. This can be done
  with Items.Parent
See Also
  IJvDataItem.GetIndex, IJvDataItem.IsParentOf, IJvDataItems.Parent

----------------------------------------------------------------------------------------------------
@@IJvDataItem.IsParentOf
Summary
  Determines if the item is an ancestor of another item.
Description
  IsParentOf determines if the item is an ancestor of the specified item. If the item specified by
  AnItem has this item as its parent the function will return True.
  
  If this is not the case but DirectParent is set to False, the entire parent chain is scanned. If
  during this iterating process this item is indeed found, the function will return True.
  
  If either DirectParent was set to True or this item is not an ancestor of the specified item the
  function will return False.
Parameters
  AnItem       - The item to check the parent chain of.
  DirectParent - Flag to control if only the direct parent (<LINK Items, Items>.<LINK
                  IJvDataItems.Parent, Parent>) is checked (DirectParent=True), or if the entire
  parent
                  chain is scanned (DirectParent=False).
See Also
  IJvDataItem.Items, IJvDataItems.Parent

----------------------------------------------------------------------------------------------------
@@IJvDataItem.Implementer
Summary
  Reference to the implementing object.
Description
  GetImplementer returns a reference to the TObject instance implementing the IJvDataItem interface.
  This method should be used with care, as you can never be sure which object implements the
  interface.
  Callers should never assume a specific object unless it is enforced in the implementation of the
  various objects.

----------------------------------------------------------------------------------------------------
@@IJvDataItem.IsDeletable
Summary
  Determines if the item may be removed from the list.
Description
  IsDeletable determines if the item is allowed to be removed from the <LINK Items, items list>. If
  the item is allowed to be removed the function will return True, False otherwise.
  
  IsDeletable is used in those cases where the provider generates a number of fixed items that should never be deleted. In most cases IsDeletable will be context-depend
  nt, i.e. the item can't be deleted from the context-less item tree, but is deletable from a
  context-specific tree.

----------------------------------------------------------------------------------------------------
@@IJvDataItem.GetIndex
Summary
  Retrieves the item's index in the owning list.
Description
  GetIndex retrieves the item's index in the owning list (represented by the Items property).
See Also
  IJvDataItem.Items

----------------------------------------------------------------------------------------------------
@@IJvDataItem.GetItems
Summary
  Retrieves the reference to the IJvDataItems owner of this item.
Description
  GetItems retrieves the reference to the IJvDataItems owner of this item. It's the Items property's
  read method.
See Also
  IJvDataItem.GetIndex, IJvDataItem.IsParentOf, IJvDataItem.Items

----------------------------------------------------------------------------------------------------
@@IJvDataItem.GetImplementer
Summary
  Reference to the implementing object.
Description
  GetImplementer returns a reference to the TObject instance implementing the IJvDataItem interface.
  This method should be used with care, as you can never be sure which object implements the
  interface.
  Callers should never assume a specific object unless it is enforced in the implementation of the
  various objects.

----------------------------------------------------------------------------------------------------
@@IJvDataItem.ContextDestroying
Summary
  Called when a context is about to be destroyed.
Description
  ContextDestroying is called whenever a context is about to be destroyed. It's generally used to
  remove context-specific data relating to this context (or child contexts) from the item.
Parameters
  Context - Context about to be destroyed,

----------------------------------------------------------------------------------------------------
@@IJvDataItem.GetID
Summary
  Retrieves the ID value of the Data Item.
Description
  GetID will retrieve the item's (usually unique) ID value. The ID value can be used to search for a
  specific item if it's not known where in the tree that item resided.
  
  Normally the ID will be unique throughout the tree. There can be situations where this is not the
  case. Never assume the ID is unique and always usable to retrieve a specific item.

----------------------------------------------------------------------------------------------------
@@IJvDataItem
Summary
  Single Data Item.
Description
  IJvDataItem is the main interface for a single Data Item. A reference to this interface is returned
  whenever an item is requested from the item list.
  
  IJvDataItem only provides in some basic 'administrative' tasks and information. For Data Items to
  be generally usable they will usually also support and implement IJvDataItemText and optionally
  IJvDataItemImage, IJvDataItemBasicAction.
  
  In addition some implementations may support implementation specific interface (e.g. an item
  representing a color might support an interface that allows access to the TColor value). Which
  interfaces are supported completely depends on what type of item you are dealing with.
  
  A Data Item may also support IJvDataItems (a list of Data Items) which means the item supports sub
  items.

----------------------------------------------------------------------------------------------------
@@IJvDataIDSearch.Find
Summary
  Locate an item.
Description
  Find locates the requested item in the list, optionally scanning sub trees. If a match is found a
  reference to the data item is returned, otherwise False is returned.
Parameters
  ID        - ID of the item to locate.
  Recursive - Flag to specify if sub trees should be scanned as well. When set to True sub trees will
               be scanned as well, otherwise the current list only will be scanned.
See Also
  IJvDataItem.GetID

----------------------------------------------------------------------------------------------------
@@IJvDataIDSearch
Summary
  Find an item using its ID.
Description
  IJvDataIDSearch is a <LINK IJvDataItems, data item list> support interface to locate an item using
  its unique ID.
  
  The interface provides in a single Find method to locate an item in the data tree by comparing the
  requested ID value with each item in the list, optionally scanning sub trees.
  
  This search interface is normally always implemented for a data item list.

----------------------------------------------------------------------------------------------------
@@IJvDataContextsManager.New
Summary
  Creates a new data context and adds it to the list.
Description
  New will create a new data context and add it to the list of contexts. The implementation of this
  method will assure the name of the new context is unique in the list.
  
  A reference to the created and added context is returned.
See Also
  IJvDataContext.Name, IJvDataContextsManager.Add

----------------------------------------------------------------------------------------------------
@@IJvDataContextsManager.Add
Summary
  Adds a context to the list.
Description
  Add will add the specified context to the list of contexts. A check will be performed before adding
  to make sure the name of the context is unique within the list and the context is not already linked
  to another context list. If one of these checks fail an exception will be raised.
  
  A reference to the added context is returned (which may not be the same instance in some cases).
Parameters
  Context - Reference to the data context to add.
See Also
  IJvDataContext.Name, IJvDataContextsManager.Delete, IJvDataContextsManager.New

----------------------------------------------------------------------------------------------------
@@IJvDataContextsManager.Clear
Summary
  Empties the list of contexts.
Description
  Clear will empty the list of contexts. After a call to this method the list of contexts is either
  empty or only contains fixed, non-deletable contexts.
See Also
  IJvDataContext.IsDeletable, IJvDataContextsManager.Delete

----------------------------------------------------------------------------------------------------
@@IJvDataContextsManager.Delete
Summary
  Removes a context from the list.
Description
  Delete removes the specified context from the list, provided the context is deletable. If the
  context is not deletable an exception might be raised (depending on the implementation of this
  method).
Parameters
  Context - Reference to the data context to remove.
See Also
  IJvDataContext.IsDeletable, IJvDataContextsManager.Clear

----------------------------------------------------------------------------------------------------
@@IJvDataContextsManager
Summary
  Support interface for IJvDataContexts that handles context management.
Description
  IJvDataContextsManager is an optional supporting interface for IJvDataContexts that manages the
  context list.
  
  The interface provides methods to:
  
  * Add a specific context to the list.
  * Create and add a new context to the list.
  * Empty the list of contexts.
  * Delete a context given its index or given the context instance.
  
  This interface is needed if the design time provider context manager should be able to add/delete
  contexts to/from the list.

----------------------------------------------------------------------------------------------------
@@IJvDataContextSensitive.RevertToAncestor
Summary
  Reverts the settings back to the ancestor context settings.
Description
  RevertToAncestor reverts the settings back to the settings for the ancestor context or context-less
  state.
  
  It does this by simply removing any settings for the currently active context. If there were no
  settings for the currently active context, nothing will happen.
See Also
  IJvDataContextSensitive.IsEqualToAncestor

----------------------------------------------------------------------------------------------------
@@IJvDataContextSensitive.IsEqualToAncestor
Summary
  Determines if the settings are inherited from the ancestor context.
Description
  IsEqualToAncestor determines if the settings are inherited from an ancestor context or are
  specifically set for the currently active context.
  
  If the settings are set for the currently active context the method will return False, otherwise
  True will be returned.
See Also
  IJvDataContextSensitive.RevertToAncestor

----------------------------------------------------------------------------------------------------
@@IJvDataContexts.Provider
Summary
  Reference to the provider the list belongs to.
Description
  Provider is a reference to the provider the context list belongs to.
See Also
  IJvDataProvider

----------------------------------------------------------------------------------------------------
@@IJvDataContextSensitive
Summary
  Context sensitive data manager.
Description
  IJvDataContextSensitive is a supporting interface for IJvDataItems, IJvDataItem and any other
  IJvDataItem support interface.
  
  It provides in methods that allow settings for a context to be reverted back to the ancestor context (or context-less) settings and to determine if the in
  o is specifically set for the currently active context or taken from an ancestor context or
  context-less state.
See Also
  IJvDataContext, IJvDataItem, IJvDataItemImage, IJvDataItems, IJvDataItemStates, IJvDataItemText

----------------------------------------------------------------------------------------------------
@@IJvDataContexts.GetCount
Summary
  Retrieve the number of contexts the list holds.
Description
  GetCount return the number of contexts currently in this list.
See Also
  IJvDataContexts.GetContext

----------------------------------------------------------------------------------------------------
@@IJvDataContexts.IndexOf
Summary
  Determine the index of a context.
Description
  IndexOf determines the index in this list of the given context. If the specified context does not
  belong to this list -1 will returned.
Parameters
  Ctx - Context to determine the index of.

----------------------------------------------------------------------------------------------------
@@IJvDataContexts.GetContextByName
Summary
  Retrieve the context specified by the name.
Description
  GetContextByName will retrieve the context specified by the given name. The name can be either a
  single name (direct child of this list) or a (relative) path.
  
  If the requested context could not be located the method will return nil.
Parameters
  Name - Name or name path of the context to retrieve.
See Also
  IJvDataContexts.GetContext

----------------------------------------------------------------------------------------------------
@@IJvDataContexts.GetContext
Summary
  Retrieve the context specified by its index.
Description
  GetContext retrieves the context specified by the given index. Depending on the implementation, the
  method either returns nil or raises an exception if an invalid index is given.
Parameters
  Index - 0-based index of the context to retrieve. Values range from 0 to GetCount-1 (both         
  inclusive).
See Also
  IJvDataContexts.GetContextByName, IJvDataContexts.GetCount

----------------------------------------------------------------------------------------------------
@@IJvDataContexts.Ancestor
Summary
  Retrieve a reference to the ancestor context.
Description
  Ancestor retrieves a reference to the ancestor context that owns this list. The context list at the
  root will have no ancestor and nil will be returned instead.
See Also
  IJvDataContext

----------------------------------------------------------------------------------------------------
@@IJvDataContexts
Summary
  List of \IJvDataContext objects.
Description
  IJvDataContexts represents the list of IJvDataContext objects. The interface is supported by
  IJvDataProvider and might be supported for individual IJvDataContext instances if a specific
  context contains sub contexts.
  
  The IJvDataContexts interface provides methods that:
  
  * Allow retrieval of the number of contexts
  * All retrieval of a context based on its index, its name or name path.
  * Determine the ancestor context that owns this list.
  * Determine the provider to which the context list belongs.
  * Retrieve a reference to the TObject instance that implements this object.
See Also
  IJvDataContext, IJvDataContextSensitive, IJvDataContextsManager, IJvDataProvider

----------------------------------------------------------------------------------------------------
@@IJvDataContextManager.SetName
Summary
  Change the name of the context.
Description
  SetName allows to change the name of the context. Implementers of this methods are responsible for
  assuring the uniqueness of the new name within the context list this context belongs to.
Parameters
  Value - New name for the context.
See Also
  IJvDataContext.Name

----------------------------------------------------------------------------------------------------
@@IJvDataContext.Name
Summary
  The name of the context.
Description
  Name represents the name of the context. The name of the context must be unique within the list
  it's added to.
  
  Not all providers may allow changing the context name (or not for all contexts) so the
  IJvDataContext interface does not support changing the name by default. Contexts that may allow
  changing the name will support the IJvDataContextManager interface as well.
See Also
  IJvDataContextManager.SetName

----------------------------------------------------------------------------------------------------
@@IJvDataContextManager
Summary
  \IJvDataContext support interface to change context name.
Description
  IJvDataContextManager is an optional support interface for IJvDataContext objects. It's sole
  purpose is to allow changing the name of the context and has only one method.
  
  Not all providers may allow changing the context name (or not for all contexts) so the
  IJvDataContext interface does not support that feature by default. Contexts that may allow changing
  the name will support this interface as well.
See Also
  IJvDataContext

----------------------------------------------------------------------------------------------------
@@IJvDataContext.IsDeletable
Summary
  Determines if the context can be deleted.
Description
  IsDeletable determines if the context can be deleted. If the context can be deleted True will be
  returned, otherwise False is returned.
  
  Some providers may generate 1 or more fixed contexts that are not to be deleted. These contexts
  will return False for this method. Most other (user generated) contexts are deletable and will
  return True for this method.

----------------------------------------------------------------------------------------------------
@@IJvDataContext.Contexts
Summary
  Reference to the context list.
Description
  Contexts is a reference to the context list this context belongs to.
See Also
  IJvDataContexts

----------------------------------------------------------------------------------------------------
@@IJvDataContext.GetImplementer
Summary
  Retrieves the TObject implementing object.
Description
  GetImplementer retrieves the TObject implementation that implements this interface.

----------------------------------------------------------------------------------------------------
@@IJvDataContext
Summary
  Context object.
Description
  IJvDataContext represents an individual context. Contexts allow providers to represent their
  contents in a different way to different consumers.
  
  Each context can represent a different tree and/or different item properties while using the same
  data. This keeps the memory usage down, since the common information is kept only once.
  
  Consumers can select which context they want to use so multiple consumers with the same context
  will get the exact same representation.
  
  Contexts allow for inheriting the properties (or tree structure) of the parent context if such
  properties is not explicitly set for that context (this is at the discretion of the provider and
  some
  providers will not allow this behavior or even allow contexts at a deeper level than the root).
  This also contributes to reducing memory usage. The IJvDataContextSensitive interface manages the
  inherited state of the properties.
See Also
  IJvDataContexts, IJvDataContextSensitive, IJvDataItem, IJvDataItems, IJvDataProvider

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.SubItemIndex@Integer@Integer
<COMBINE IJvDataConsumerViewList.SubItemIndex@IJvDataItem@Integer>

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ToggleItem
Summary
  Toggles the expanded state of an item.
Description
  ToggleItem expands or collapses the specified item, depending on its current state.
  
  If the specified item is expanded its sub items will be hidden, collapsing the item.
  
  If the specified item is collapsed and has sub items, the sub items will be added, expanding the
  item. Note that upon expanding, the AutoExpandLevel property is taken into account.
Parameters
  Index - 0-based index in the view list of the item to expand or collapse. Allowed values ranges
  from          0 to Count-1
See Also
  IJvDataConsumerViewList.Count, IJvDataConsumerViewList.ItemHasChildren,
  IJvDataConsumerViewList.ItemIsExpanded

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.SubItem@Integer@Integer
<COMBINE IJvDataConsumerViewList.SubItem@IJvDataItem@Integer>

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.SubItemIndex@IJvDataItem@Integer
Summary
  Retrieve the index to a child item of a given item.
Description
  SubItemIndex retrieves a 0-based index in the viewlist to the specified child item of the specified pare
  t item. The two versions of this method allow to specify the parent either as a data item or as a
  0-based index in the view list.
  
  If the parent item could not be found either an exception is raised or -1 is returned (depends on
  the implementer).
  
  If the item has no children or the index is out of range either an exception is raised or -1 is
  returned (depends on the implementer). Most implementers will choose to return -1 in this case, as
  there's no real way to tell the number of child items an item has.
Parameters
  Parent - Either a reference to the parent item or a 0-based index in the view list of the parent   
         item. Allowed values for the index version ranges from 0 to Count-1.
  Index  - 0-based index of the child item to retrieve.
See Also
  IJvDataConsumerViewList.SubItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.SubItem@IJvDataItem@Integer
Summary
  Retrieve a reference to a child item of a given item.
Description
  SubItem retrieves a reference to the specified child item of the specified parent item. The two
  versions of this method allow to specify the parent either as a data item or as a 0-based index in
  the view list.
  
  If the parent item could not be found either an exception is raised or a nil pointer is returned
  (depends on the implementer).
  
  If the item has no children or the index is out of range either an exception is raised or a nil
  pointer is returned (depends on the implementer). Most implementers will choose to return a nil
  pointer in this case, as there's no real way to tell the number of child items an item has.
Parameters
  Parent - Either a reference to the parent item or a 0-based index in the view list of the parent   
         item. Allowed values for the index version ranges from 0 to Count-1.
  Index  - 0-based index of the child item to retrieve.
See Also
  IJvDataConsumerViewList.SubItemIndex

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.set_AutoExpandLevel
Summary
  Sets the level to which the tree will be expanded automatically.
Description
  Set_AutoExpandLevel sets the level to which the tree will be expanded automatically when the view
  is <LINK IJvDataConsumerViewList.RebuildView, rebuild>. Set_AutoExpandLevel is the write method for
  the
  AutoExpandLevel property.
Parameters
  Value - New level to set.
See Also
  IJvDataConsumerViewList.AutoExpandLevel, IJvDataConsumerViewList.Get_AutoExpandLevel

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.set_ExpandOnNewItem
Summary
  Sets the flag to indicate if the view should expand the tree when a new item is added.
Description
  Set_ExpandOnNewItem specifies if the tree should be expanded when a new item is added to a
  collapsed (sub) tree. Set_ExpandOnNewItem is the write method for the ExpandOnNewItem property.
Parameters
  Value - New state to set.
See Also
  IJvDataConsumerViewList.ExpandOnNewItem, IJvDataConsumerViewList.Get_ExpandOnNewItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.set_LevelIndent
Summary
  Sets the indentation to use for each level.
Description
  Set_LevelIndent specifies how much an item is indented in the consumer's graphical representation
  for each level of the tree. Set_LevelIndent is the write method for the LevelIndent property.
Parameters
  Value - New indentation to set.
See Also
  IJvDataConsumerViewList.Get_LevelIndent, IJvDataConsumerViewList.LevelIndent

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.RebuildView
Summary
  Rebuilds the view of the tree for the consumer.
Description
  RebuildView rebuilds the view list from scratch. The resulting tree will be complete refreshed to
  the current provider state.
  
  You'll rarely need to call RebuildView (although that depends largely on the implementation). As
  items are added to or removed from the provider tree the view list is updated automatically.
  Selecting a different provider or context also automatically refreshes the view.
See Also
  IJvDataConsumerViewList.AutoExpandLevel, IJvDataConsumerViewList.ExpandOnNewItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.LevelIndent
Summary
  Indentation to use for each level.
Description
  LevelIndent specifies how much an item is indented in the consumer's graphical representation for
  each level of the tree. What the value actually represents (e.g. pixels, characters, etc) depends
  solely on the consumer. Most consumers will represent the indentation in pixels.
See Also
  IJvDataConsumerViewList.ItemLevel

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemSiblingIndex
Summary
  Determines the index in the view list for the next sibling of an item.
Description
  ItemSiblingIndex determines the index in the view list for the next sibling of the specified item.
  
  If the specified item doesn't have a next sibling the method will return -1, otherwise a 0-based
  index in the view list for the sibling item is returned.
Parameters
  Index - 0-based index in the view list of the item to test. Allowed values ranges from 0 to Count-1
See Also
  IJvDataConsumerViewList.Count, IJvDataConsumerViewList.ItemSibling

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemSibling
Summary
  Retrieves a reference to the next sibling of an item.
Description
  ItemSibling retrieves a reference to the next sibling item of the specified item.
  
  If the specified item doesn't have a next sibling the method will return nil.
Parameters
  Index - 0-based index in the view list of the item to test. Allowed values ranges from 0 to Count-1
See Also
  IJvDataConsumerViewList.Count, IJvDataConsumerViewList.ItemSiblingIndex

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemParentIndex
Summary
  Determines the index in the view list for the parent item of an item.
Description
  ItemParentIndex determines the index in the view list for the parent item of the specified item.
  
  If the specified item is at the root level the method will return nil, otherwise a 0-based index in
  the view list for the parent item is returned.
Parameters
  Index - 0-based index in the view list of the item to test. Allowed values ranges from 0 to Count-1
See Also
  IJvDataConsumerViewList.SubItemIndex

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemParent
Summary
  Retrieves a reference to the parent item of an item.
Description
  ItemParent retrieves a reference to the parent item of the specified item.
  
  If the specified item is at the root level the method will return nil.
Parameters
  Index - 0-based index in the view list of the item to test. Allowed values ranges from 0 to Count-1
See Also
  IJvDataConsumerViewList.SubItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemLevel
Summary
  Determines the tree level of an item.
Description
  ItemLevel determines the level at which the specified item is placed in the tree. The returned
  value is 0-based, where 0 means the item is at the root.
Parameters
  Index - 0-based index in the view list of the item to test. Allowed values ranges from 0 to Count-1
See Also
  IJvDataConsumerViewList.Count, IJvDataConsumerViewList.ItemParent

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemIsExpanded
Summary
  Determines if an item is expanded.
Description
  ItemIsExpanded determines if the specified item is expanded and has child items showing.
  
  If the item is expanded the method returns True, otherwise False is returned.
Parameters
  Index - 0-based index in the view list of the item to test. Allowed values ranges from 0 to Count-1
See Also
  IJvDataConsumerViewList.SubItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemHasChildren
Summary
  Determines if an item has children.
Description
  ItemHasChildren determines if the specified item has any children. This does not mean those child
  items are actually visible in the view list, but it does mean the item can be expanded to show them.
  
  If an item has children the method returns True, otherwise False is returned.
Parameters
  Index - 0-based index in the view list of the item to test. Allowed values ranges from 0 to Count-1
See Also
  IJvDataConsumerViewList.SubItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.IndexOfItem
Summary
  Locates an item and return its index in the view list.
Description
  IndexOfItem will locate the given item in the view list. The value returned is the 0-based index of
  the item in the view list.
  
  If the item is not found the method will return -1.
Parameters
  Item - Reference to the item to locate.
See Also
  IJvDataConsumerViewList.ChildIndexOfItem, IJvDataConsumerViewList.IndexOfID

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.Item
Summary
  Retrieve a reference to a Data Item.
Description
  Item retrieves a reference to the item at the specified index in the view list.
Parameters
  Index - 0-based index in the view list of the item to retrieve. Allowed values range from 0 to
           Count-1 (both inclusive).
See Also
  IJvDataConsumerViewList.Count, IJvDataItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ItemGroupInfo
Summary
  Determine grouping information for an item.
Description
  ItemGroupInfo determines grouping information for an item. The returned array of integers
  represents a bit-wise mapping at each level to determine if there are more siblings at that level.
  
  This information can be used by a user interface consumer to determine at which level a vertical
  line should be drawn.
  
  Bit 0 of the first integer represents the state for the item itself (and thus tells if only the
  upper part of the vertical line is needed or not). Each following bit indicates the state at a
  level higher.
  
  If a bit is set to 0 there are no more siblings at that level and no vertical line (or only the
  upper part in case of bit 0 of the first integer) should be drawn in the user interface.
  
  If a bit is set to 1 there is at least one more siblings at that level and a vertical line should
  be drawn in the user interface.
Parameters
  Index - 0-based index in the view list of the item to retrieve grouping information for. Allowed   
        values range from 0 to Count-1 (both inclusive).
See Also
  IJvDataConsumerViewList.Count, IJvDataConsumerViewList.ItemLevel,
  IJvDataConsumerViewList.ItemSibling

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.IndexOfID
Summary
  Locates an item by ID and return its index in the view list.
Description
  IndexOfID will locate an item given its ID. The value returned is the 0-based index of the item in
  the view list.
  
  If the item is not found the method will return -1.
Parameters
  ID - ID of the item to locate.
See Also
  IJvDataConsumerViewList.ChildIndexOfID, IJvDataConsumerViewList.IndexOfItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.get_LevelIndent
Summary
  Returns the indentation to use for each level.
Description
  Get_LevelIndent returns how much an item is indented in the consumer's graphical representation for
  each level of the tree. Get_LevelIndent is the read method for the LevelIndent property.
See Also
  IJvDataConsumerViewList.LevelIndent, IJvDataConsumerViewList.Set_LevelIndent

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.get_ExpandOnNewItem
Summary
  Returns the flag to indicate if the view should expand the tree when a new item is added.
Description
  Get_ExpandOnNewItem returns if the tree should be expanded when a new item is added to a collapsed
  (sub) tree. Get_ExpandOnNewItem is the read method for the ExpandOnNewItem property.
See Also
  IJvDataConsumerViewList.ExpandOnNewItem, IJvDataConsumerViewList.Set_ExpandOnNewItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.get_AutoExpandLevel
Summary
  Retrieves the level to which the tree will be expanded automatically.
Description
  Get_AutoExpandLevel returns the level to which the tree will be expanded automatically when the
  view is <LINK IJvDataConsumerViewList.RebuildView, rebuild>. Get_AutoExpandLevel is the read method
  for the AutoExpandLevel property.
See Also
  IJvDataConsumerViewList.AutoExpandLevel, IJvDataConsumerViewList.Set_AutoExpandLevel

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ExpandTreeTo
Summary
  Expands the view list so that the specified item is visible.
Description
  ExpandTreeTo will expand the view list to assure the specified item is visible for the consumer.
Parameters
  Item - Item to make visible.
See Also
  IJvDataConsumerViewList.ToggleItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.Count
Summary
  Determine the number of items in the view list.
Description
  Count determines the number of items currently in the view list.
See Also
  IJvDataConsumerViewList.Item

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ExpandOnNewItem
Summary
  Specify if the view should expand the tree when a new item is added.
Description
  ExpandOnNewItem specifies if the tree should be expanded when a new item is added to a collapsed
  (sub) tree.
  
  Set ExpandOnNewItem to True if the sub tree the new item belongs to should be expanded to make the
  new item visible.
  
  Set ExpandOnNewItem to False if adding items should not necessarily make them visible when one of
  its parents is still collapsed.
See Also
  IJvDataConsumerViewList.ExpandTreeTo, IJvDataConsumerViewList.ToggleItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ChildIndexOfItem
Summary
  Locates an item and return its index within its parents list in the view list.
Description
  ChildIndexOfItem will locate the given item in the view list. The value returned is the 0-based
  index of the item in its parents list according to the view list.
  
  If the item is not found the method will return -1.
Parameters
  Item - Reference to the item to locate.
See Also
  IJvDataConsumerViewList.ChildIndexOfID, IJvDataConsumerViewList.IndexOfItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.ChildIndexOfID
Summary
  Locates an item by ID and return its index within its parents list in the view list.
Description
  ChildIndexOfID will locate an item given its ID. The value returned is the 0-based index of the
  item in its parents list according to the view list.
  
  If the item is not found the method will return -1.
Parameters
  ID - ID of the item to locate.
See Also
  IJvDataConsumerViewList.ChildIndexOfItem, IJvDataConsumerViewList.IndexOfID

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList.AutoExpandLevel
Summary
  Specifies to which level the tree will be expanded automatically.
Description
  AutoExpandLevel specifies the level to which the tree will be expanded automatically when the view
  is <LINK IJvDataConsumerViewList.RebuildView, rebuild>.
  
  If this property is set to 0 (zero), no automatic expansion will be taking place. A value of -1
  represents infinite expanding.
See Also
  IJvDataConsumerViewList.ExpandOnNewItem, IJvDataConsumerViewList.ExpandTreeTo,
  IJvDataConsumerViewList.ItemIsExpanded, IJvDataConsumerViewList.RebuildView,
  IJvDataConsumerViewList.ToggleItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerServerNotify.RemoveClient
Summary
  Remove a client.
Description
  RemoveClient will break the link between the server consumer and the specified client consumer.
  
  When the client is removed, the <LINK IJvDataConsumerClientNotify.LinkRemoved, LinkRemoved> method
  of the client is called.
Parameters
  Client - Reference to the client consumer notification interface of the consumer to add.
See Also
  IJvDataConsumerClientNotify.LinkRemoved, IJvDataConsumerServerNotify.AddClient

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerViewList
Summary
  Data consumer support interface to manager the tree of data items in a flat list.
Description
  IJvDataConsumerViewList is a consumer support interface that manages the tree of data items in a
  flat list.
  
  Consumers that can render multiple items but only in a flat list will use this support interface to
  maintain a flat list representation of the tree and allow expand/collapse control of it.
  
  Implementers of this interface will have to handle changes at the provider (specifically the adding
  and removing of items) and update the view list accordingly. Also some changes at the consumer
  (such as context switching) may require updates in the view list or even complete rebuilds.
See Also
  IJvDataConsumer

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerServerNotify.NotifyProviderChanged
Summary
  Called by the client when it has changed provider or other setting that may influence the validity.
Description
  NotifyProviderChanged is called by a client consumer when it has changed to another provider or
  other setting that may influence the validity of the client. This allows the server to check if the
  client can remain linked to the server or not.
  
  Most implementers will first call IsValidClient to determine if the client consumer is still valid
  and if this is not the case will then call RemoveClient to break the link.
Parameters
  Client - Reference to the client consumer notification interface of the consumer that changed      
      provider.
See Also
  IJvDataConsumerServerNotify.IsValidClient, IJvDataConsumerServerNotify.RemoveClient

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerServerNotify.IsValidClient
Summary
  Checks if the client is a valid client to be linked to the server.
Description
  IsValidClient determines if the specified client consumer is a valid client to be linked to the
  server. If the client is valid the method returns True, otherwise False will be returned.
  
  Each server will have different criteria to determine if the client consumer can be linked. In the
  case of a context selection consumer, the server will make sure the client consumer is linked to
  the same provider as the context selection consumer's linked context provider is.
  
  Most implementers use this method in both the AddClient as well as the NotifyProviderChanged
  methods to determine validity of the client consumer.
Parameters
  Client - Reference to the client consumer notification interface of the consumer to check.
See Also
  IJvDataConsumerServerNotify.AddClient, IJvDataConsumerServerNotify.NotifyProviderChanged

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerServerNotify.AddClient
Summary
  Add a client to the list.
Description
  AddClient will attempt to add the specified client to the list of linked clients. Most
  implementations will check if the client is valid and not already linked before adding it.
  
  When the client is added, the <LINK IJvDataConsumerClientNotify.LinkAdded, LinkAdded> method of the
  client is called.
Parameters
  Client - Reference to the client consumer notification interface of the consumer to add.
See Also
  IJvDataConsumerClientNotify.LinkAdded, IJvDataConsumerServerNotify.IsValidClient,
  IJvDataConsumerServerNotify.RemoveClient

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerProvider
Summary
  Data consumer support interface to retrieve the selected provider.
Description
  IJvDataConsumerProvider is a consumer support interface to retrieve the selected provider. This is
  usually used only by the design time editors and not at the providers, since the provider already
  knows the consumer is linked to that provider.
See Also
  IJvDataConsumer

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerProvider.GetProvider
Summary
  The provider the consumer is linked to.
Description
  GetProvider returns a reference to the provider the consumer is linked to.
See Also
  IJvDataProvider

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerServerNotify
Summary
  Data consumer support interface to notify another consumer when the current item changes.
Description
  IJvDataConsumerServerNotify is a consumer support interface that allows other consumers (supporting
  the IJvDataConsumerClientNotify interface) to be linked and notified if the current item of this
  consumer changed.
  
  The implementer of this interface is notified when a client consumer changed its provider. You are
  responsible for checking if the client consumer is still valid and optionally break the link to the
  client if this is no longer the case. In addition you must keep a record of linked clients and
  notify them when the selected item changed or the client is removed (either because the client is
  no longer valid due to a provider change or because the server consumer is destroying).
  
  Linking of consumers can be used (for example) to link a context selection consumer (e.g. a combo
  box
  linked to a context provider) to a client consumer and have the context of that consumer updated
  automatically when the context selection consumer selects a different context. In this scheme,
  IJvDataConsumerServerNotify is used at the context selection consumer.
See Also
  IJvDataConsumer, IJvDataConsumerClientNotify

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerItemState.Visible
Summary
  Determines if the item is visible.
Description
  Visible determines if the item is visible from the consumer perspective.
  
  If Visible is set to disFalse the item is not visible and should not be rendered or otherwise
  usable by the consumer.
  
  If Visible is set to disIndetermined or disNotUsed the state of the item at the provider side
  should be requested (using the optional <LINK IJvDataItemStates.Visible, IJvDataItemStates>
  interface of the item).
  
  The consumer service <LINK IJvDataConsumerViewList, view list extension> will consider this state
  to determine if the item is to be added to the tree.
Parameters
  Item - Item to determine the visible state of.
See Also
  IJvDataConsumerViewList, IJvDataItemStates.Visible

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerItemState.Enabled
Summary
  Determines if the item is enabled.
Description
  Enabled determines if the item is enabled from the consumer perspective.
  
  If Enabled is set to disFalse the item should be rendered in a disabled state. If an action is
  linked to the item (through the IJvDataItemBasicAction interface), it should not be executed.
  
  For any other setting of Enabled the state of the item at the provider side should be requested
  (using the optional <LINK IJvDataItemStates.Enabled, IJvDataItemStates> interface of the item).
Parameters
  Item - Item to determine the enabled state of.
See Also
  IJvDataItemBasicAction, IJvDataItemStates.Enabled

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerItemState.Checked
Summary
  Determines if the item is checked.
Description
  Checked determines if the item is checked from the consumer perspective.
  
  If Checked is set to disIndetermined the item's checkbox should be rendered in a gray state.
  
  If Checked is set to disNotUsed the state of the item at the provider side should be requested
  (using the optional <LINK IJvDataItemStates.Checked, IJvDataItemStates> interface of the item).
Parameters
  Item - Item to determine the checked state of.
See Also
  IJvDataItemStates.Checked

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerItemState
Summary
  Data consumer support interface to determine item states at the consumer side.
Description
  IJvDataConsumerItemState is a consumer support interface to retrieve Enabled, CHecked and/or
  Visible state of an item at the consumers side.
  
  When a provider or consumer support interface needs one of the aforementioned states, it will first
  request the state from the consumer (if it supports the IJvDataConsumerItemState interface). If
  this interface is not supported or if the returned state equals disNotUsed, the state is requested
  from the IJvDataItemStates interface of the item.
  
  Each of the states can be one of "False", "True", "Indetermined" or "Not used". The consumer is
  responsible of setting the appropriate rendering options based on these settings but is not
  required to handle them. In addition a consumer may override the setting of the item at its
  discretion.
See Also
  IJvDataConsumer, IJvDataItem, IJvDataItemStates

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerItemSelect.SetItem
Summary
  Specify a new (root) item.
Description
  SetItem selects a new (root) item for the consumer.
  
  For consumers that only allow a single item to be used, the new item is the item used by the
  consumer (specify nil if no item is to be selected).
  
  For consumers that allow multiple items to be rendered, the new item is the item used as a root
  (specify nil if the entire tree is to be used). The consumer will only use items that are a child
  of the specified item; the item itself is not used.
  
  If the specified item does not belong to the provider linked to the consumer or does not exist
  within the <LINK IJvDataConsumerContext, current active context of the consumer>, and exception
  will be raised.
Parameters
  Value - Item to be used as the active item or root item. Specify nil to use no item or use the     
      entire tree.
See Also
  IJvDataConsumerContext, IJvDataConsumerItemSelect.GetItem, IJvDataItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerItemSelect.GetItem
Summary
  Determine the current (root) item.
Description
  GetItem retrieves a reference to the current (root) item of the consumer.
  
  For consumers that only allow a single item to be used, the retrieved item is the item used by the
  consumer (or nil if no item is currently selected).
  
  For consumers that allow multiple items to be rendered, the retrieved item is the item used as a
  root (or nil if the entire tree is to be used). The consumer will only use items that are a child
  of the specified item; the item itself is not used.
See Also
  IJvDataConsumerItemSelect.SetItem, IJvDataItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerItemSelect
Summary
  Data consumer support interface to determine the displayed (root) item.
Description
  IJvDataConsumerItemSelect is a consumer support interface to retrieve or specify the (root) item of
  the consumer.
  
  Consumers that only allow a single item to be used use this interface to specify which item is used.
  If a nil item is specified, no item will be used by the consumer.
  
  Consumers that allow multiple items to be rendered use this interface to specify which item will be
  used as the root. In this case, nil means that all items are rendered, otherwise only items below
  the specified item.
See Also
  IJvDataConsumer, IJvDataItem

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerContext.SetContext
Summary
  Specify a new context for this consumer.
Description
  SetContext selects a new context for this consumer. If you want to select no context, specify nil
  as a parameter.
  
  If the specified context does not belong to the same provider that is currently linked to the
  consumer, an exception will be raised.
Parameters
  Value - Reference to a new context to select for this consumer. Specify nil to select no context.
See Also
  IJvDataConsumerContext.GetContext, IJvDataContext

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerContext.GetContext
Summary
  Determine the current context for this consumer.
Description
  GetContext retrieves a reference to the current context for this consumer. If no context is
  selected nil will be returned, otherwise it's a reference to one of the contexts of the linked
  provider of this consumer.
See Also
  IJvDataConsumerContext.SetContext, IJvDataContext

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerContext
Summary
  Data consumer support interface to retrieve the selected context.
Description
  IJvDataConsumerContext is a consumer support interface to retrieve or specify the context of the
  consumer.
  
  Various providers use contexts to differentiate between various tree configurations and/or content.
  The IJvDataConsumerContext interface allows you to retrieve the current or specify a new context for
  this consumer.
  
  Providers rarely need to access this interface, since most of the time when a consumer is selected
  as the current one, its context is automatically selected as well. With <LINK
  IJvDataConsumerServerNotify, Server>/<LINK IJvDataConsumerClientNotify, Client> consumers, access
  to the this interface might be useful. The interface is also used by the design time editors.
See Also
  IJvDataConsumer

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerClientNotify.LinkRemoved
Summary
  Called when the server consumer has removed the client from its list of clients.
Description
  LinkRemoved is called when the specified server consumer has removed the client from its list of
  clients. This usually happens when the server consumer selects another provider or is being
  disposed.
  The provided reference to the server consumer should be removed from wherever it was stored during
  the LinkAdded call.
Parameters
  Server - Reference to the server notification interface of the server consumer.
See Also
  IJvDataConsumerClientNotify.LinkAdded

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerClientNotify.LinkAdded
Summary
  Called when the server consumer has added the client to its list of clients.
Description
  LinkAdded is called when the specified server consumer has added the client to its list of clients.
  The provided reference to the server consumer should be stored so you can use it later to notify
  the server consumer if a different provider is being selected or to manually remove the link (i.e.
  when the consumer is being disposed).
Parameters
  Server - Reference to the server notification interface of the server consumer.
See Also
  IJvDataConsumerClientNotify.LinkRemoved

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerClientNotify.ItemSelected
Summary
  Called when the server consumer selects another item.
Description
  ItemSelected is called when the indicated server consumer has selected another item.
Parameters
  Server - Reference to the server notification interface of the server consumer.
  Value  - Reference to the item currently selected at the server consumer.

----------------------------------------------------------------------------------------------------
@@IJvDataConsumerClientNotify
Summary
  Data consumer support interface to be notified when another consumer changes item.
Description
  IJvDataConsumerClientNotify is a consumer support interface to be notified when another consumer
  changes item.
  
  The implementer of this interface is notified when an item gets selected at another consumer (the
  server) and when a link to it is added to or removed from a server.
  
  The IJvDataConsumerClientNotify always communicates with the IJvDataConsumerServerNotify of the
  server consumer to request itself being added to or removed from the server or to notify the server
  when the provider is changed (the server will then determine if the client is still allowed and
  optionally breaks the link if this is not the case).
  
  Linking of consumers can be used (for example) to link a context selection consumer (e.g. a combo
  box
  linked to a context provider) to a client consumer and have the context of that consumer updated
  automatically when the context selection consumer selects a different context. In this scheme,
  IJvDataConsumerClientNotify is used at the client consumer.
See Also
  IJvDataConsumer, IJvDataConsumerServerNotify

----------------------------------------------------------------------------------------------------
@@IJvDataConsumer.VCLComponent
Summary
  Retrieves a reference to the VCL component.
Description
  VCLComponent retrieves a reference to the VCL component that functions as a consumer.

----------------------------------------------------------------------------------------------------
@@IJvDataConsumer.AttributeApplies
Summary
  Determines if an attribute applies to the consumer.
Description
  AttributeApplies determines if the specified attribute applies to the consumer. The method is
  primarily used by the <LINK IJvDataProvider, data provider>'s <LINK IJvDataProvider.ConsumerClasses,
  ConsumerClasses> method to build the list of consumer extensions.
  
  If an attribute applies the function should return True, otherwise False should be returned.
Parameters
  Attr - Attribute to check.

----------------------------------------------------------------------------------------------------
@@IJvDataConsumer
Summary
  Provider client interface.
Description
  IJvDataConsumer is the main provider client interface. It is implemented by all components and
  controls that are able to obtain their information from a Data Provider.
  
  The interface only provides two "administrative" methods: retrieve the VCL component the consumer
  interface belongs to and determine which Data Provider Attributes apply to this consumer.
  
  Consumer may support additional interfaces (commonly referred to as "Consumer Extensions") to
  support other settings.
  
  Data Providers are generally not concerned about the consumer that is using them. The only notable
  exception is the <LINK IJvDataProvider.ConsumerClasses, ConsumerClasses> method; this method will
  use the AttributeApplies method to determine which extensions are needed.
  
  Other cases when Data Providers are interested in the consumer are those providers that allow
  additional settings for each individual consumer (usually by providing a Provider specific Consumer
  Extension).
See Also
  IJvDataProvider

----------------------------------------------------------------------------------------------------
@@EJVCLDataProvider
Summary
  Exception class for errors relating to the IJvDataProvider interface.
Description
  EJVCLDataProvider is the exception class used for errors relating to the IJvDataProvider interface.

----------------------------------------------------------------------------------------------------
@@EJVCLDataItems
Summary
  Exception class for errors relating to the IJvDataItem or IJvDataItems interfaces.
Description
  EJVCLDataItems is the exception class used for errors relating to the IJvDataItem or IJvDataItems
  interfaces.

----------------------------------------------------------------------------------------------------
@@EJVCLDataContexts
Summary
  Exception class for errors relating to the IJvDataContext or IJvDataContexts interfaces.
Description
  EJVCLDataContexts is the exception class used for errors relating to the IJvDataContext or
  IJvDataContexts interfaces.

----------------------------------------------------------------------------------------------------
@@EJVCLDataConsumer
Summary
  Exception class for errors relating to the IJvDataConsumer interface.
Description
  EJVCLDataConsumer is the exception class used for errors relating to the IJvDataConsumer interface
  or its support interfaces.

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.SelectedContext
Summary
  Returns the last selected (currently active) context.
Description
  SelectedContext returns the currently active context. If no context is active it will return nil.
See Also
  IJvDataProvider.ReleaseContext, IJvDataProvider.SelectContext, IJvDataProvider.SelectedConsumer

----------------------------------------------------------------------------------------------------
@@IJvDataProvider.UnregisterChangeNotify
Summary
  Unregister a change notification callback interface.
Description
  UnregisterChangeNotify is used to unregister an IJvDataProviderNotify interface.
Parameters
  ANotify - Notification interface to unregister. If the specified reference is not registered,      
       nothing will happen.
See Also
  IJvDataProvider.RegisterChangeNotify, IJvDataProviderNotify

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumn
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumn.Caption
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumn.GetCaption
Summary
  Write here a summary (1 line)
Description
  Write here a description
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumn.GetID
Summary
  Write here a summary (1 line)
Description
  Write here a description
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumn.SetCaption
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Value - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumns
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumns.Columns
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumns.Count
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumns.GetColumn
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Index - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumns.GetColumnByID
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  ID - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumns.GetCount
Summary
  Write here a summary (1 line)
Description
  Write here a description
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumnsManager
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumnsManager.Add
Summary
  Write here a summary (1 line)
Description
  Write here a description
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumnsManager.AddID
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  ID - Description for this parameter
Return value
  Describe here what the function returns
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumnsManager.Clear
Summary
  Write here a summary (1 line)
Description
  Write here a description
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumnsManager.Remove
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Column - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderColumnsManager.RemoveAt
Summary
  Write here a summary (1 line)
Description
  Write here a description
Parameters
  Index - Description for this parameter
See Also
  List here other properties, methods (comma seperated)
  Remove the 'See Also' section if there are no references

----------------------------------------------------------------------------------------------------
@@IJvDataProviderNotify
Summary
  Callback interface to respond to changes at the provider.
Description
  IJvDataProviderNotify is a callback interface who's methods are called in response to changes at
  the provider.
  
  An object that wishes to be notified of changes occurring at the provider will register this
  reference at the provider by calling the provider's <LINK IJvDataProvider.RegisterChangeNotify,
  RegisterChangeNotify> method. If the object is no longer interested in changes at a provider (i.e.
  another provider is selected or the object is destroying), the <LINK
  IJvDataProvider.UnregisterChangeNotify, UnregisterChangeNotify> method should be called.
  
  Note that it's perfectly legal to register the same change notification for multiple providers. In
  all cases a registered callback should eventually be unregistered before this object is destroyed.
  The only exception is when a provider is destroying or has been destroyed; in that case the
  callback is implicitly unregistered.
See Also
  IJvDataProvider.RegisterChangeNotify

----------------------------------------------------------------------------------------------------
@@IJvDataProviderNotify.Consumer
Summary
  Reference to the consumer belonging to this callback.
Description
  Consumer returns a reference to the consumer belonging to this callback, or nil if no consumer is
  linked to the callback.
See Also
  IJvDataConsumer

----------------------------------------------------------------------------------------------------
@@IJvDataProviderNotify.DataProviderChanged
Summary
  Called when a change has occurred at the provider.
Description
  DataProviderChanged is called whenever a change has occurred at the provider (i.e. the provider's
  <LINK IJvDataProvider.Changed, Changed> method is called).
Parameters
  ADataProvider - The provider that is issuing the notification.
  AReason       - The reason of the change as passed on to the provider's <LINK
                   IJvDataProvider.Changed, Changed> method.
  Source        - Reference to the object the change is for as passed on to the provider's <LINK
                   IJvDataProvider.Changed, Changed> method.
See Also
  IJvDataProvider.Changed

----------------------------------------------------------------------------------------------------
@@IJvDataProviderNotify.DataProviderChanging
Summary
  Called when a change is about to occur at the provider.
Description
  DataProviderChanging is called whenever a change is about to occur at the provider (i.e. the
  provider's <LINK IJvDataProvider.Changing, Changing> method is called).
Parameters
  ADataProvider - The provider that is issuing the notification.
  AReason       - The reason of the change as passed on to the provider's <LINK
                   IJvDataProvider.Changing, Changing> method.
  Source        - Reference to the object the change is for as passed on to the provider's <LINK
                   IJvDataProvider.Changing, Changing> method.
See Also
  IJvDataProvider.Changing

----------------------------------------------------------------------------------------------------
@@IJvDataTextSearch
Summary
  Find an item using its associated text.
Description
  IJvDataTextSearch is a <LINK IJvDataItems, data item list> support interface to locate an item
  using its associated text (from an item's IJvDataItemText support interface).
  
  The interface provides a single Find method to locate an item in the data tree by comparing the
  requested text value with each item in the list, optionally scanning sub trees.
  
  This search interface is normally implemented for a data item list if any item in the list or sub
  tree will likely support the IJvDataItemText interface.

----------------------------------------------------------------------------------------------------
@@IJvDataTextSearch.Find
Summary
  Locate an item.
Description
  Find locates the requested item in the list, optionally scanning sub trees. If a match is found a
  reference to the data item is returned, otherwise False is returned.
Parameters
  Text      - Text of the item to locate. Depending on the implementation, the comparison may be case
               sensitive.
  Recursive - Flag to specify if sub trees should be scanned as well. When set to True sub trees will
               be scanned as well, otherwise the current list only will be scanned.
See Also
  IJvDataItemText.Text

----------------------------------------------------------------------------------------------------
@@TClassArray
<TITLE TClassArray type>
Summary
  Dynamic TClass array.
Description
  TClassArray is a dynamic array of TClass pointers (class references). It's used primarily for the
  IJvDataProvider.ConsumerClasses method to retrieve a list of consumer services to instantiate.
See Also
  IJvDataProvider.ConsumerClasses

----------------------------------------------------------------------------------------------------
@@TDataItemState
<TITLE TDataItemState type>
Summary
  Type used to specify the state of a Data Item.
Description
  The TDataItemState type ise used to specify a specific state for a Data Item. For each setting
  (Enabled, Visible and Checked) this type specifies if that settings is off, on, indetermined or not
  used.
See Also
  IJvDataItemStates

----------------------------------------------------------------------------------------------------
@@TDataItemState.disFalse
Specifies the setting is False or 'off'.

----------------------------------------------------------------------------------------------------
@@TDataItemState.disTrue
Specifies the setting is True or 'on'.

----------------------------------------------------------------------------------------------------
@@TDataItemState.disIndetermined
Specifies the setting is 'indetermined' (neither False/off nor True/on).

----------------------------------------------------------------------------------------------------
@@TDataItemState.disNotUsed
Specifies the setting is not used by this item.

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason
<TITLE TDataProviderChangeReason type>
Summary
  Type used to specify the change reason.
Description
  The TDataProviderChangeReason type is used to specify the reason why the
  ProviderChanging/ProviderChanged methods are called.
See Also
  IJvDataProvider.Changed, IJvDataProvider.Changing, IJvDataProviderNotify

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrAdd
An item is about to be added or has just been added. The Source parameter will refer to the
IJvDataItems where the item is about to be added to (DataProviderChanging) or refers to the
IJvDataItem that has just been added (DataProviderChanged).

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrDelete
An item is about to be deleted or has just been deleted. The Source parameter will refer to the
IJvDataItem that is about to be deleted (DataProviderChanging) or refers to the IJvDataItems where the item has been just removed from (DataProviderChanging). Note that any sub items are implicitly also deleted, but there will be no additional calls to DataProviderChanging/DataProviderChanged for them.

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrUpdateItem
An item is about to be changed or has just been changed. The Source parameter will refer to the
IJvDataItem that is about to change or has just changed. In general this change reason means that one of the item's properties is changing, which also includes the properties of support interfaces.

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrUpdateItems
An item list is about to be changed or has just been changed. The Source parameter will refer to the
IJvDataItems that is about to change or has just changed. In general this change reason means that either the items list is about to be cleared (or has been cleared) or any of the items list support interface's properties is changing (or has changed).

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrDestroy
The IJvDataProvider is destroying. This reason will only occur in the DataProviderChanging notification.

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrContextAdd
A context is about to be added or has just been added. Source refers to the context the new context is added to (or nil if the context is added at the root) or the context that has just been added.

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrContextDelete
A context is about to be deleted or has just been deleted. Source refers to the context about to be deleted or the context where a context has just been removed from (or nil if a context at the root was deleted).

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrContextUpdate
A context is about to be changed or has just been changed. Source refers to the context changing or changed. It usually signals the context name is changing or has changed.

----------------------------------------------------------------------------------------------------
@@TDataProviderChangeReason.pcrFullRefresh
The consumer should execute a full refresh (changes are made or being made that affect the entire data tree, including tree structure).

----------------------------------------------------------------------------------------------------
@@TJvDataContextID
<TITLE TJvDataContextID type>
Summary
  Type used to link the context selection editor to.
Description
  The TJvDataContextID type is used in the consumer services to allow linking a design time editor to
  the Context property.

----------------------------------------------------------------------------------------------------
@@TJvDataItemID
<TITLE TJvDataItemID type>
Summary
  Type used to link the item selection editor to.
Description
  The TJvDataItemID type is used in the consumer services to allow linking a design time editor to the
  Item property.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState
<TITLE TProviderDrawState type>
Summary
  Type used to specify the draw state for the provider based rendering mechanism.
Description
  The TProviderDrawState type is used to specify the draw state for the provider based rendering
  mechanism. It mostly follows the TOwnerDrawState type but adds a 'hot' state to the values.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState.pdsSelected
The item is currently selected.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState.pdsGrayed
The item is grayed out.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState.pdsDisabled
The item is disabled.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState.pdsChecked
The item is checked.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState.pdsFocused
The item has the focus.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState.pdsDefault
The item is the default item.

----------------------------------------------------------------------------------------------------
@@TProviderDrawState.pdsHot
The item is hot (i.e. the mouse is hovering over it).

----------------------------------------------------------------------------------------------------
@@TProviderDrawStates
<TITLE TProviderDrawStates type> <COMBINE TProviderDrawState>

