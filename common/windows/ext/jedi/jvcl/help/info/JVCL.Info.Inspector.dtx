@@JVCL.Info.Inspector
<GROUP JVCL.Info>
<TITLE Data Inspector overview>
<TOPICORDER 490>
  TJvInspector is a \Data Inspector. A \Data Inspector is much like the Object Inspector you see in
  the Borland products. The Data Inspector, however, is not limited to inspect the published
  properties of a class. It provides you with the possiblity to inspect various data kinds.

  * Inspect virtually any data *
  The abstract data class can be derived to get data from any source you can think of. For instance,
  you can derive a data class to get/set the data by using events. Included in the package are data
  classes to inspect published properties, variables, TDataSources, INI-files and event-based data
  access as well as some internal structures to provide access to individual set members.
  
  In addition, each reference to a data object will only be created once. Additional reference will use
  the same instance. This allows multiple items (even in different inspector controls) reference the same
  data object. For example: you can create a data instance that points to a Delphi variable 'x' (by calling
  TJvInspectorVarData.New(Inspector.Root, 'x', TypeInfo(string), x). This will result in a data instance being
  created to reference the x variable (the New method will return the item that is linked to it). The next time
  you call the New method to reference the x variable, the data instance of the first item will be used and another
  item is assigned to it.

  * Customized painting/editing for various data types. *
  The base item class is capable of just painting the item and edit it's string representation.
  Derived classes could provide different editing and/or displaying methods. Included in the package
  are item classes to display and edit data for the following types:
    *   Strings (either short, long or wide).
    *   Ordinals (all integer derived types. Will use the IntegerConst registration).
    *   Characters (Char or WChar. Non-displayable characters are displayed as #\<ASCII code\>).
    *   Enumerations (uses a drop-down list).
    *   \Classes (Displayes published properties).
    *   Components (can be assigned by scanning a list of owner components, like forms and data
        modules, for suitable components).
    *   Int64 values.
    *   Floats (Single, Double or Extended).
    *   Sets (will allow direct value editing and/or show/edit member items). Opposed to the Object
        Inspector, JvInspector can handle any set, regardles of it's size (ofcourse published set
        properties can be no more 32 bits (4 bytes), but variable sets can be upto 32 bytes).
  In addition the following item's are included:
    *   \TFont item (will show an ellipsis which will show the font dialog when clicked).
    *   \TFont.Name (will show an enumerated list of available fonts. Names are shown in the actual
        font).
    *   Booleans (Boolean, BYTEBOOL, WORDBOOL, LONGBOOL. Will use a checkmark to show/edit the
        value).
    *   TCaption (technically not an item, but the registration of this type will set the auto
        update flag for this string item).
  * Advanced type registration. *
  For each data class a registration list can be created. When the data class needs to create the
  item, it will get the first applicable registration list and looks for a match. After that, it
  will go up the chain of derived data classes to find another registration list and will look for
  other matches. When matches are found, there match values are compared. The highest match value
  wins. When multiple registration items return the same match value, the first one found wins. The
  abstract data class provides a list which is filled on initialization of the unit with type kind
  registration items (default editors).

  * Item categories *
  Each item can be categorized but only in one category. Categories can be nested. An item category
  is derived from the base item class.

  * Support for custom paint styles *
  The control uses Painter components to do the actual painting. For each style a new descendant of
  the base painter component can be created. The current version supports two paint styles: Borland
  style and .NET/Visual Studio style.
  
  * Support for multi value rows *
  JvInspector allows you to add rows with more than one value. The different values are shown as 
  separate columns in a single row. The widths of the columns are specified as percentages of the
  total width. You can also have some or all columns sized equally.
  
  * Support for multi column inspector *
  Besides support for items with multiple columns, you can also divide the control into sizable 
  columns.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Inspector.Item
<TITLE Inspector items>
<GROUP JVCL.Info.Inspector>
  The inspector uses items to allow an end user to view/edit a value. For each type of data (
  Integer, Float, String, etc.) a special item is created.
  
  In addition to these items, specialized items are present as well. There are items that represent
  a category and items that allow multiple values be displayed in a single row.
  
  To connect an item to a specific data type (and optionally to a specific data layer) you should
  use the <LINK JVCL.Info.Inspector.Reg, item registration routines and classes>.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Inspector.Reg
<TITLE Inspector item registration>
<GROUP JVCL.Info.Inspector.Item>
  To be able to select which item is connected to a specific data type (and optionally in
  combination with a specific data layer), the item registration database needs to be filled.
  
  For each data class a registration list can be created. When the data class needs to create the
  item, it will get the first applicable registration list and looks for a match. After that, it
  will go up the chain of derived data classes to find another registration list and will look for
  other matches. When matches are found, their match values are compared. The highest match value
  wins.
  
  When multiple registration items return the same match value, the first one found wins. The
  abstract data class provides a list which is filled on initialization of the unit with type kind
  registration items (default editors).
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Inspector.Data
<TITLE Inspector data layers>
<GROUP JVCL.Info.Inspector>
  The inspector doesn't care about where the data comes from. It provides a base data class that
  allows any item to retrieve and/or set the value.
  
  JVCL includes the following standard data layer classes:
    
  * <LINK TJvInspectorVarData, Variable/heap data>
  * <LINK TJvInspectorPropData, Published properties>
  * <LINK TJvInspectorEventData, Event based data retrieval>
  * <LINK TJvInspectorINIFileData, INI-files>
  * <LINK TJvInspectorDBData, TDataSources/fields>
  
  In addition to these data layers, there are some internally used data layers that allow individual
  items of a set to be edited.
  
  If you want to inspect other data sources you should create a descendant of TJvCustomInspectorData
  or another derivative (e.g. TJvInspectorINIFileData use a base TJvInspectorCustomConfData data
  layer, to handle the basic functionality involved in a structured storage).
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Inspector.Paint
<TITLE Inspector painters>
<GROUP JVCL.Info.Inspector>
  The control uses Painter components to do the actual painting. For each style a new descendant of
  the base painter component can be created. The current version supports two paint styles: Borland
  style and .NET/Visual Studio style.
----------------------------------------------------------------------------------------------------
