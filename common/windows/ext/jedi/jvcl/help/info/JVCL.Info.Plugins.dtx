@@JVCL.Info.Plugins
<GROUP JVCL.Info>
<TITLE Writing plugins and plugin enabled applications>
  In order to allow developers to extend applications a mechanism is needed to be able to
  communicate between the main application and the extensions. These extensions are commonly
  refered to as plugins.

  A good example of an application that has plugin capabilities is WinAMP. Any developer can write
  an extension for WinAMP. WinAMP supports various types of plugins: User Interface plugins, input
  plugins, output plugins, sound processing plugins and more. All an end user needs to do is make
  sure the plugin is an the appropiate folder and WinAMP will load it.

  Extensions commonly provide some additional functionality which will have to be made available in
  the main application (referred to as the host application). This is usually done by adding an
  option to a menu or a button to a toolbar. Some extensions will not provide user selectable
  functionality, but rather provide some form of processing. These plugins will therefor not provide
  additional menu items or buttons, but will be linked into some kind of processing chain.

  The plugin capabilities provided by the JEDI-VCL will service both types of extensions. Each
  plugin may support either commands, message processing or both. A plugin is not limited to a
  single command or a single message.

  This section contains the following topics:
  <TABLE>
    Topic                                                                     Description
    -----                                                                     -----------
    <LINK JVCL.Info.Plugins.Package_vs_DLL, Package vs. DLL plugins>          Discusses the differences between package based plugins and DLL based plugins.
    <LINK JVCL.Info.Plugins.PluginWriting, Writing plugins>                  Discusses the basic steps involved in writing a plugin for an application.
    <LINK JVCL.Info.Plugins.HostWriting, Writing hosts>                      Discusses the basic steps involved in writing a host application.
  </TABLE>
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Plugins.Package_vs_DLL
<GROUP JVCL.Info.Plugins>
<TITLE Package vs. DLL plugins>
  There are two types of plugins you can write: DLL plugins or package plugins. Both have their pros
  and cons. Note that the host application usually determines if plugin should be written as a
  package or a DLL.

  If an host application does not use run time packages, plugins should be written as a DLL.

  If a host application prefers package plugins, it should be build using run time packages, at
  least vcl?? (where ?? represents the Delphi version). Host application that also use the JEDI-VCL
  run time package will require the plugins to use the JEDI-VCL run time package as well (note: the
  JEDI-VCL run time package also requires some other Delphi packages as well as the JCL run time
  package. These package should also be deployed with the host application and both the host
  application as well as the plugin DLL should use the same versions of all packages involved).

  * DLL plugins *
  DLL plugins are considered "old style" plugins, but still have their uses. DLL plugins are not
  required to use run time package. This is convenient if you want to deploy just one file for your
  plugin. It also allows plugin writers to use a different Delphi version than the host developer
  used.

  A down side to using DLL plugins is that you are limited in your possibilities, unless both the
  host application and the plugins are both build using run time package (which also requires the
  host application and the plugin to be written in the same Delphi version). DLL plugins can not
  provide any objects to the host application (the Bitmap for the plugin commands can not be
  transferred to the host application, you can not provide MDI children or data modules).

  * Package plugins *
  Package plugins are the new style plugins. Package plugins should at a minimum require the
  vcl?? package (where ?? corresponds to the Delphi version). Host applications that will support
  package plugins will also need to be build using run time package with a minimum of the vcl??
  package.

  The downside to package plugins is that both host application and plugin should be written using
  the same Delphi version (including the same update pack).

  Besides using the vcl package you could opt to use the JEDI-VCL runtime package as well (for both
  the host application as well as the plugin package you should use the same version of the JEDI-VCL
  package). The only pressing reason to do so would be to save the plugin writers from getting a
  warning each time they compile their plugin and save on resources.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Plugins.PluginWriting
<GROUP JVCL.Info.Plugins>
<TITLE Writing plugins>
  Writing plugins requires some knowledge about the host application. More precisely, you need to
  know if an application allows commands to be added to it's menu and/or toolbar if and which
  messages it can send and if it allows plugins to be configured and how it wants to do this.

  Plugins can also be written to provide additional MDI children, additional forms, data modules
  and probably a lot more. It all more or less depends on what the host application supports.

  In any case, it's vital to study the host applications documentation to be able to write plugins
  the host application can actually cope with.

  To create plugin for an application you generally use the provided JEDI Plugin Wizard, which can
  be accessed by going to \File|\New... in Delphi. Head over to the Projects tab, select the JEDI
  Plugin Wizard icon and press OK.

  A dialog is shown where you can enter the plugin's name and type of plugin.

  The name denotes the name of the project (prefixed with <B>Plg</B> as well as the name of the
  unit (prefixed with <B>Plugin</B>) and the TJvPlugin instance that will be created.

  The plugin type determines if a new DLL project or a new Package project will be created for the
  plugin.

  After pressing OK, a new project will be created, containing a unit with the TJvPlugin instance.

  To complete the plugin you can follow these tasks:
    * Specify the plugin ID. This ID must be unique in the host application, so it is wise to use
      a name that includes your company or your own name. Alternatively, you could assign a GUID
      (<B>G</B>lobal <B>U</B>nique <B>ID</B>entifier), but that would make the ID useless in the
      host application user interface as means of identifying which plugins are loaded. Internally,
      the host application doesn't care what this property contains, as long as it's unique.
    * Optionally specify the author, copyright, description and version of your plugin.
    * Optionally add one or more commands to the Commands collection of the TJvPlugin instance,
      providing a caption and an OnExecute handler and optionally a hint, custom data and/or a
      bitmap for each command.
    * Optionally assign a handler to the OnInitialize event.
    * Optionally assign a handler to the OnConfigure event.
    * Optionally assign a handler to the OnPluginMessage event
  All tasks (except the first) are optional, but a useful plugin requires either an OnPluginMessage
  handler or a least one command to be assigned. You should check the host applications (technical)
  documentation to find out what the host application expects from the plugin.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Plugins.HostWriting
<GROUP JVCL.Info.Plugins>
<TITLE Writing host applications>
  Writing plugin enabled applications, or hosts, requires some thinking ahead. You should determine
  upfront which types of plugins you want to support.

  Are plugins allowed to add commands to your menu or toolbar? If so, how should they specify the
  location? How is the host to determine if the command is actually enabled?

  Should plugins be able to receive generic messages (notifications)? If so, what types of
  notifications should there be and is there any additional data required?

  Can plugins provide MDI children, forms or data modules? Can they provide other functionality? Is
  there a configuration possibility and how to implement it?

  It's best to fully define the possibilities of your plugins before you even start coding or
  changing your application, or you'll soon be lost.

  Writing a host application involves various steps, most of which depend on the type of plugins you
  need and if you need more than one type of plugins. For the most basic (and most common) type of
  host application you should follow these steps:

  * Drop a TJvPluginManager component on your application main form or a data module.
  * Setup those properties of the component that will not change during run time. This is usually
    the PluginKind property only, occasionally you would need to change the Extension property as
    well.
  * If you plan on block certain files from loading, assign an OnBeforeLoad event handler which will
    set AllowLoad to False for these files.
  * Assign an OnNewCommand event handler to register commands provided by the various plugins and
    create menu items and/or toolbar buttons for them.
----------------------------------------------------------------------------------------------------
