----------------------------------------------------------------------------------------------------
@@JVCL.Info.Dialogs
<GROUP JVCL.Info>
<TITLE JvDSADialogs overview>
<TOPICORDER 500>
  <LINK JvDSADialogs.pas, JvDSADialogs> provides routines that allow you to create message dialogs
  with the following possibilities:

  * set different default button, cancel button and/or help button.
  * provide different button captions and results.
  * provide other dialog captions
  * provide a custom icon

  In addition it provides you with procedures to create
  <LINK JVCL.Info.Dialogs.DSA, "don't show again" dialogs> with the same possibilities as the
  standard dialogs. The state and results of these dialogs can be stored anywhere.
  
  It also provides a VCL component (TJvDSADialog) that will allow you to transform any TCustomForm
  descendant to work as a DSA dialog by simply dropping the component on the form, set a few
  properties and provide a check box like control.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Dialogs.DSA
<GROUP JVCL.Info.Dialogs>
<TITLE Don't Show Again (DSA) dialogs>
<TOPICORDER -100>
  In addition to the extensions provided by the MessageDlg and MessageDlgEx functions, JvDSADialogs
  also provide you with "Don't show again" dialogs. Throughout the help, these dialogs will be
  referred to as DSA dialogs.

  All DSA related functions/procedures and classes have DSA in their name for better distinction
  between standard dialogs and DSA dialogs.

  The storage of the "don't show again" state and the result of the dialog are stored in an abstract
  storage device, TDSAStorage.

  JVCL standard provides you with storage in the registry (TDSARegStorage), but you can derive new
  classes from TDSAStorage to provide different storage capabilities.

  Each DSA dialog should be numbered, named and registered. By registering, the DSA system knows how
  to identify the dialog in the storage, as well as which storage it should use (in other words:
  different dialogs can be stored in different storage devices).

  The DSAMessageDlg and DSAMessageDlgEx have one additional parameter to provide the dialog ID. 
  Based on the state of this dialog, it's either displayed to the user, or the last result is
  returned.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Dialogs.DSA.Chk
<GROUP JVCL.Info.Dialogs.DSA>
<TITLE DSA dialogs check mark texts>
<TOPICORDER -2400>
  For each dialog you can specify which text should be displayed next to the check mark. To keep the
  number of strings to store to a minimum, you must register a check mark text to the system, 
  including a numeric ID. This ID is used to specify the check mark text when you register a dialog.
  
  * Registering of the checkmark texts is done using the
    RegisterDSACheckMarkText/UnregisterDSACheckMarkText routines.
  * Retrieving the registered check mark text can be done using the GetDSACheckMarkText routine.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Dialogs.DSA.Reg
<GROUP JVCL.Info.Dialogs.DSA>
<TITLE DSA dialogs registration>
<TOPICORDER -800>
  To be able to use a specific dialog as a DSA dialog, it needs to be registered with the system so
  it can determine/maintain the state of the dialog.

  Because the registration key can be either an integer or a name, depending on the storage, both
  need to be registered, and can only occur once.

  To use a DSA dialog, you'll have to specify the integer ID in the various DSA* methods.
  
  * Registration of dialogs is done using the RegisterDSA/UnregisterDSA routines.
  * Locating a registered dialog can be done using either LocateDSAReg or DSACount/DSAItem routines.
----------------------------------------------------------------------------------------------------
@@JVCL.Info.Dialogs.DSA.Storage
<GROUP JVCL.Info.Dialogs.DSA>
<TITLE DSA dialogs storage devices>
<TOPICORDER -700>
  To allow you to store the state and values for a DSA dialog in any place, a class hierarchy for
  storage devices is available.

  In addition to the standard devices, you can derive a new class from any of the provided classes
  to create a new storage device.
----------------------------------------------------------------------------------------------------
