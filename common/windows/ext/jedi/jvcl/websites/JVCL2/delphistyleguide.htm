<html>

<head>
<meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
<title>Object Pascal Style Guide original by Charles Calvert</title>
<meta name="Microsoft Border" content="b, default">
</head>

<body bgcolor="#EEEEEE"><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><!--msnavigation--><td valign="top">

<font face="Verdana" size="2">
<h1 style="MARGIN-TOP: 0.42cm"><font size="4" face="Verdana"><font style="FONT-SIZE: 20pt" size="5"><font color="#FF0000">Object
Pascal Style Guide</font><br>
</font><font size="2"><i>original by Charles Calvert</i></font></font></h1>
<p><font face="Verdana" size="2">This article documents a standard style for
formatting Delphi code which is to be included in the JEDI Code Library (JCL).
This document is a modified/annotated version of the article originally written
by Charles Calvert (with his permission to do so). The original article can be
obtained from the Borland <a href="http://community.borland.com/soapbox/techvoyage/article/1,1795,10280,00.html">Community
site</a>. As documented elsewhere, it's not necessary for you to format your
code according to the rules of this document before submitting it to Project
JEDI, although that would be great. Instead the reformatting is done by the JCL
unit owners where necessary. We accept feedback in the form of corrections or
suggestions. Send your communications to <a href="mailto:jcl@delphi-jedi.org?subject=StyleGuide">the
JCL team</a> or <a href="mailto:ccalvert@borland.com?subject=StyleGuide">Charlie
Calvert</a>. Note that with a few exceptions this document does not include
coding guideliness, only formatting guideliness. A separate document for coding
guideliness is in the making.</font></p>
<p><font size="2" face="Verdana">This article documents a standard style for
formatting Delphi code. It is based on the conventions developed by the Delphi
team at Borland Software Corporation.</font></p>
<p><font size="2" face="Verdana">Object Pascal is a beautifully designed
language. One of its great virtues is its readability. These standards are
designed to enhance that readability of Object Pascal code. When developers
follow the simple conventions laid out in this guide, they will be promoting
standards that benefit all Delphi developers by using a uniform style that is
easy to read. Efforts to enforce these standards will increase the value of a
developer's source code, particularly during maintenance and debugging cycles.</font></p>
<p><font size="2" face="Verdana">It goes without saying that these are
conventions based primarily on matters of taste. Though we believe in, and
admire the style promoted in these pages, we support them not necessarily
because we believe they are right and others are wrong, but because we believe
in the efficacy of having a standard which most developers follow. The human
mind adapts to standards, and finds ways to quickly recognize familiar patterns,
thereby assimilating meaning quickly and effortlessly. It is the desire to
create a standard that will make reading code as simple as possible for the
largest number of people that is behind this effort. If at first our guidelines
seem strange to you, we ask you to try them for a while, and then we are sure
you will grow used to them over time.</font></p>
<p><font size="2" face="Verdana">Do not post this specification on other web
sites. Instead, simply link to either this version of the document or the
original one on Charlie's website.</font></p>
<h2><font size="2" face="Verdana">Contents</font></h2>
<p><font face="Verdana" size="2">1.0 <a href="#1.0">Introduction</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">1.1 <a href="#1.1">Background</a></font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">1.2 <a href="http://delphi-jedi.org/d%22#1.2&quot;">Acknowledgments</a></font></dd>
</dl>
<p><font face="Verdana" size="2">2.0 <a href="#2.0">Source Files</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">2.1 <a href="#2.1">Source-File Naming</a></font>
  <dd><font face="Verdana" size="2">2.2 <a href="#2.2">Source-File Organization</a></font>
    <dl>
      <dd><font face="Verdana" size="2">2.2.1 <a href="#2.2.2">unit declaration</a></font>
      <dd><font face="Verdana" size="2">2.2.2 <a href="#2.2.3">uses declarations</a></font>
      <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">2.2.3 <a href="#2.2.4">class/interface
        declarations</a></font></dd>
    </dl>
  </dd>
</dl>
<p><font face="Verdana" size="2">3.0 <a href="#3.0">Naming Conventions</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">3.1 <a href="#3.1">Unit Naming</a></font>
  <dd><font face="Verdana" size="2">3.2 <a href="#3.2">Class/Interface Naming</a></font>
  <dd><font face="Verdana" size="2">3.3 <a href="#3.3">Field Naming</a></font>
  <dd><font face="Verdana" size="2">3.4 <a href="#3.4">Method Naming</a></font>
  <dd><font face="Verdana" size="2">3.5 <a href="#3.5">Local Variable Naming</a></font>
  <dd><font face="Verdana" size="2">3.6 <a href="#3.6">Reserved Words</a></font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">3.7 <a href="#3.6">Type
    Declarations</a></font></dd>
</dl>
<p><font face="Verdana" size="2">4.0 <a href="#4.0">White Space Usage</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">4.1 <a href="#4.1">Blank Lines</a></font>
  <dd><font face="Verdana" size="2">4.2 <a href="#4.2">Blank Spaces</a></font>
    <dl>
      <dd><font face="Verdana" size="2">4.2.1 <a href="#4.2.1">A single blank
        space (not tab) should be used</a></font>
      <dd><font face="Verdana" size="2">4.2.2 <a href="#4.2.2">Blanks should <em>not</em>
        be used</a></font></dd>
    </dl>
  <dd><font face="Verdana" size="2">4.3 <a href="#4.3">Indentation</a></font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">4.4 <a href="#4.4">Continuation
    Lines</a></font></dd>
</dl>
<p><font face="Verdana" size="2">5.0 <a href="#5.0">Comments</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">5.1 <a href="#5.1">Block Comments</a></font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">5.2 <a href="#5.2">Single-Line
    Comments</a></font></dd>
</dl>
<p><font face="Verdana" size="2">6.0 <a href="#6.0">Classes</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">6.1 <a href="#6.1">Class Body Organization</a></font>
  <dd><font face="Verdana" size="2">6.2 <a href="#6.2">Method Declarations</a></font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">6.3 <a href="#6.3">Data
    Store Declarations</a></font></dd>
</dl>
<p><font face="Verdana" size="2">7.0 <a href="#7.0">Interfaces</a></font></p>
<dl>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">7.1 <a href="#7.1">Interface
    Body Organization</a></font></dd>
</dl>
<p><font face="Verdana" size="2">8.0 <a href="#8.0">Statements</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">8.1 <a href="#8.1">Simple Statements</a></font>
    <dl>
      <dd><font face="Verdana" size="2">8.1.1 <a href="#8.1.1">Assignment and
        expression statements</a></font>
      <dd><font face="Verdana" size="2">8.1.2 <a href="#8.1.2">Local variable
        declarations</a></font>
      <dd><font face="Verdana" size="2">8.1.3 <a href="#8.1.3">Array
        declarations</a></font></dd>
    </dl>
  <dd><font face="Verdana" size="2">8.2 <a href="#8.2">Compound Statements</a></font>
    <dl>
      <dd><font face="Verdana" size="2">8.2.3 <a href="#8.2.3">if statement</a></font>
      <dd><font face="Verdana" size="2">8.2.4 <a href="#8.2.4">for statement</a></font>
      <dd><font face="Verdana" size="2">8.2.5 <a href="#8.2.5">while statement</a></font>
      <dd><font face="Verdana" size="2">8.2.6 <a href="#8.2.6">repeat until
        statement</a></font>
      <dd><font face="Verdana" size="2">8.2.7 <a href="#8.2.7">case statement</a></font>
      <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">8.2.8 <a href="#8.2.8">try
        statement</a></font></dd>
    </dl>
  </dd>
</dl>
<p><font face="Verdana" size="2">9.0 <a href="#9.0">Miscellanous</a></font></p>
<dl>
  <dd><font face="Verdana" size="2">9.1 <a href="#9.1">Const, Var and Type</a></font>
  <dd><font face="Verdana" size="2">9.2 <a href="#9.2">Conditional compilation</a></font>
  <dd><font face="Verdana" size="2">9.3 <a href="#9.3">Resource strings</a></font>
  <dd><font face="Verdana" size="2">9.4 <a href="#9.4">Exceptions</a></font>
  <dd><font face="Verdana" size="2">9.5 <a href="#9.5">Categories and routine
    separation</a></font>
  <dd><font face="Verdana" size="2">9.6 <a href="#9.6">Assembler</a></font>
  <dd><font face="Verdana" size="2">9.7 <a href="#9.7">Local routines</a></font>
  <dd><font face="Verdana" size="2">9.8 <a href="#9.8">Parameter Declarations</a></font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font face="Verdana" size="2">9.9 <a href="#9.9">Initialization
    of global variables</a></font></dd>
</dl>
<h2><a name="1.0"></a><font size="2" face="Verdana">1.0 Introduction</font></h2>
<p><font size="2" face="Verdana">This document is not an attempt to define a
grammar for the Object Pascal language. For instance, it is illegal to place a
semicolon before an else statement; the compiler simply won't let you do it. As
a result, I do not lay that rule out in this style guide. This document is meant
to define the proper course of action in places where the language gives you a
choice. I usually remain mute on matters that can only be handled one way.</font></p>
<h5><a name="1.1"></a><font size="2" face="Verdana">1.1 Background</font></h5>
<p><font size="2" face="Verdana">The guidelines presented here are based on the
public portions of the Delphi source. The Delphi source should follow these
guidelines precisely. If you find cases where the source varies from these
guidelines, then these guidelines, and not the errant source code, should be
considered your standard. Nevertheless, you should use the source as a
supplement to these guidelines, at least so far as it can help you get a general
feel for how your code should look.</font></p>
<h5><a name="1.2"></a><font size="2" face="Verdana">1.2 Acknowledgments</font></h5>
<p><font face="Verdana" size="2">The format of this document and some of its
language is based on work done to define a style standard for the Java language.
Java has had no influence on the rules for formatting Object Pascal source, but
documents found on the Sun web site formed the basis for this document. In
particular the style and format of this document were heavily influenced by
&quot;A Coding Style Guide for Java WorkShop and Java Studio Programming&quot;
by Achut Reddy. That document can be found at the following URL: <a href="http://www.sun.com/workshop/java/wp-coding">http://www.sun.com/workshop/java/wp-coding</a></font></p>
<p><font size="2" face="Verdana">The Delphi team at Borland software corporation
also contributed heavily to the generation of this document, and indeed, it
would not have been possible to create it without their help.</font></p>
<p><font size="2" face="Verdana">Many of the modifications to this document
we're at least partly based on feedback by Marcel van Brakel and Mike Lischke.
Other people who contributed are Robert Marquardt and Matthias Thoma.</font></p>
<h2><a name="2.0"></a><font size="2" face="Verdana">2.0 Source Files</font></h2>
<p><font size="2" face="Verdana">Object Pascal source is divided up primarily
into units and Delphi Project files, which both follow the same conventions. A
Delphi Project file has a DPR extension. It is the main source file for a
project. Any units used in the project will have a PAS extension. Additional
files, such as batch files, html files, or DLLs, may play a role in a project,
but this paper only treats the formatting of DPR and PAS files.</font></p>
<h5><a name="2.1"></a><font size="2" face="Verdana">2.1 Source-File Naming</font></h5>
<p><font size="2" face="Verdana">Object Pascal supports long file names. If you
are appending several words to create a single name, then it is best to use
capital letters for each word in the name: MyFile.pas. This is known as
InfixCaps, or Camel Caps. Extensions should be in lower case. For historical
reasons, the Delphi source itself often confines itself to 8:3 naming patterns,
but developers no longer need feel constrained by those limits, even if turning
in source that might be used by the Delphi team.</font></p>
<p><font size="2" face="Verdana">If you are translating a C/C++ header file,
then your Pascal header translation will usually have the same name as the file
you are translating, except it should have a PAS extension. For instance,
Windows.h would become Windows.pas. If the rules of Pascal grammar force you to
combine multiple header files into a single unit, then use the name of the base
unit into which you are folding the other files. For instance, if you fold
WinBase.h into Windows.h, then call the resulting file Windows.pas.</font></p>
<p><font size="2" face="Verdana">All JEDI Code Library source-files must be
prefixed with 'Jcl'. Also, since these files are to be ported to Linux be
carefull that you use the same capitalization everywhere a source-file is
referenced (Linux filenames are, as opposed to Win32, case-sensitive).</font></p>
<h5><a name="2.2"></a><font size="2" face="Verdana">2.2 Source-File Organization</font></h5>
<p><font size="2" face="Verdana">All Object Pascal units should contain the
following elements in the following order:</font></p>
<ol>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Copyright/ID
    block comment</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Unit Name</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Include files</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Interface
    section</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Additional
    defines</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Uses clause</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Implementation</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Uses clause</font></p>
  <li>
    <p><font size="2" face="Verdana">A closing end and a period.</font></p>
  </li>
</ol>
<p><font size="2" face="Verdana">At least one blank line should separate each of
these elements.</font></p>
<p><font size="2" face="Verdana">Additional elements can be structured in the
order you find most appropriate, except that the top of the file should always
list the copyright first, the unit name second, then any conditional defines,
compiler directives or include statements, then the uses clause. For the JCL the
following header is used. Replace JclGraphics with the appropriate unit name.
The Last Modified date is kept up to date by the unit owner and should always
match the last modified date in the filesystem.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">{******************************************************************************}</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{ Project JEDI Code Library (JCL)                                              }</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{ The contents of this file are subject to the Mozilla Public License Version  }</font>
<font size="2" face="Courier New">{ 1.0 (the &quot;License&quot;); you may not use this file except in compliance with the }</font>
<font size="2" face="Courier New">{ License. You may obtain a copy of the License at http://www.mozilla.org/MPL/ }</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{ Software distributed under the License is distributed on an &quot;AS IS&quot; basis,   }</font>
<font size="2" face="Courier New">{ WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License for }</font>
<font size="2" face="Courier New">{ the specific language governing rights and limitations under the License.    }</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{ The Original Code is JclGraphics.pas.                                        }</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{ The Initial Developer of the Original Code is documented in the accompanying }</font>
<font size="2" face="Courier New">{ help file JCL.chm. Portions created by these individuals are Copyright (C)   }</font>
<font size="2" face="Courier New">{ 2000 of these individuals.                                                   }</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{ Contains various graphics related classes and subroutines such as a Win32    }</font>
<font size="2" face="Courier New">{ regions encapsulatiion, a very fast TBitmap replacement and various          }</font>
<font size="2" face="Courier New">{ transformation and filtering routines.                                       }</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{ Unit owner:    Wim de Cleen                                                  }</font>
<font size="2" face="Courier New">{ Last modified: June 7, 2000                                                  }</font>
<font size="2" face="Courier New">{                                                                              }</font>
<font size="2" face="Courier New">{******************************************************************************}</font>

<font size="2" face="Courier New">unit Buttons;</font></pre>
<p><font size="2" face="Verdana">Compiler directives are not directly included
in the source files. Instead a global JCL.INC include file is used which defines
all standard directives. Ex.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">{$I JCL.INC}</font>

<font size="2" face="Courier New">interface</font></pre>
<p><font size="2" face="Verdana">If overriding directives are needed they can be
included below this include but this must be avoided. If overriding directives
are needed these must be documented. You should strive to override directives
only a local scope. For example, for a single procedure.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">{$S-,W-,R-}</font>
<font size="2" face="Courier New">{$C PRELOAD}</font>

<font size="2" face="Courier New">interface</font>

<font size="2" face="Courier New">uses</font>
<font size="2" face="Courier New">  Windows, Messages, Classes, Controls, Forms, Graphics, StdCtrls, ExtCtrls, CommCtrl;</font></pre>
<p><font size="2" face="Verdana">It does not matter if you place a type section
before a const section, or if you mix type and const sections up in any order
you choose.</font></p>
<p><font size="2" face="Verdana">The implementation should list the word
implementation first, then the uses clause, then any include statements or other
directives:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">implementation</font>

<font size="2" face="Courier New">uses</font>
<font size="2" face="Courier New">  Consts, SysUtils, ActnList, ImgList;</font>

<font size="2" face="Courier New">{$R BUTTONS.RES}</font></pre>
<h5><a name="2.2.2"></a><font size="2" face="Verdana">2.2.1 Unit declaration</font></h5>
<p><font size="2" face="Verdana">Every source file should contain a unit
declaration. The word unit is a reserved word, so it should be in lower case.
The name of the unit should be in mixed upper and lowercase, and must be the
same as the name used by the operating system's file system. Example:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">unit MyUnit;</font></pre>
<p><font size="2" face="Verdana">This unit would be called MyUnit.pas when an
entry is placed in the file system.</font></p>
<h5><a name="2.2.3"></a><font size="2" face="Verdana">2.2.2 uses declarations</font></h5>
<p><font size="2" face="Verdana">Inside units, a uses declaration should begin
with the word uses, in lowercase. Add the names of the units, following the
capitalization conventions used in the declaration found inside the units:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">uses MyUnit;</font></pre>
<p><font size="2" face="Verdana">Each unit must be separated from its neighbor
by a comma, and the last unit should have a semicolon after it:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">uses</font>
<font size="2" face="Courier New">  Windows, SysUtils, Classes, Graphics, Controls, Forms, TypInfo; </font></pre>
<p><font size="2" face="Verdana">The uses clause is always started on the next
line and units are written down one after another, wrapping at 100 columns.
Furthermore, you should separate the standard Delphi units, JCL units and
Platform dependent units. Finally, it is prefered to list to units in
alpabetical order unless the order is important (this should never be the case
but sometimes is, an example is the Windows unit which - by convention - should
always be listed first). An example follows (comments shouldn't be included):</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">uses</font>
<font size="2" face="Courier New">  {$IFDEF WIN32}</font>
<font size="2" face="Courier New">  Windows, ActiveX,    // Windows units</font>
<font size="2" face="Courier New">  {$ENDIF}</font>
<font size="2" face="Courier New">  {$IFDEF LINUX}</font>
<font size="2" face="Courier New">  ..Linux specific units go here</font>
<font size="2" face="Courier New">  {$ENDIF}</font>
<font size="2" face="Courier New">  Math, SysUtils,      // Standard Delphi platform independent units</font>
<font size="2" face="Courier New">  JclBase, JclStrings; // JCL units</font></pre>
<h5><a name="2.2.4"></a><font size="2" face="Verdana">2.2.3 class/interface
declarations</font></h5>
<p><font size="2" face="Verdana">A class declaration begins with two spaces,
followed by an identifier prefaced by a capital T. Identifiers should begin with
a capital letter, and should have capital letters for each embedded word (InfixCaps).
Never use tab characters in your Object Pascal source. Example:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">TMyClass</font></pre>
<p><font size="2" face="Verdana">Follow the identifier with a space, then an
equals sign, then the word class (all in lower case), furthermore a parenthesis,
the name of the ancestor class, and closing parenthesis. The class keyword and
ancestor should be separated with a space:</font></p>
<p><font size="2" face="Courier New">TMyClass = class (TObject)</font></p>
<p><font size="2" face="Verdana">Scoping directives should be two spaces in from
the margin, and declared in the order shown in this example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  TMyClass = class (TObject)</font>
<font size="2" face="Courier New">  private</font>
<font size="2" face="Courier New">  protected</font>
<font size="2" face="Courier New">  public</font>
<font size="2" face="Courier New">  published</font>
<font size="2" face="Courier New">  end;</font></pre>
<p><font size="2" face="Verdana">Data should always be declared only in the
private section, and its identifier should be prefaced by an F. All type
declarations should be four spaces in from the margin:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  TMyClass = class (TObject)</font>
<font size="2" face="Courier New">  private</font>
<font size="2" face="Courier New">    FMyData: Integer;</font>
<font size="2" face="Courier New">    function GetData: Integer;</font>
<font size="2" face="Courier New">    procedure SetData(Value: Integer);</font>
<font size="2" face="Courier New">  public</font>
<font size="2" face="Courier New">  published</font>
<font size="2" face="Courier New">    property MyData: Integer read GetData write SetData;</font>
<font size="2" face="Courier New">  end;</font></pre>
<p><font face="Verdana" size="2"><a href="#7.0">Interfaces</a> follow the same
rules as class declarations, except you should omit any scoping directives or
private data, and should use the word interface rather than class.</font></p>
<h2><a name="3.0"></a><font size="2" face="Verdana">3.0 Naming Conventions</font></h2>
<p><font size="2" face="Verdana">Except for reserved words and directives, which
are in all lowercase, all Pascal identifiers should use InfixCaps, which means
the first letter should be a capital, and any embedded words in an identifier
should be in caps, as well as any acronym that is embedded:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">MyIdentifier MyFTPClass</font></pre>
<p><font size="2" face="Verdana">The major exception to this rule is in the case
of header translations, which should always follow the conventions used in the
header. For instance, write WM_LBUTTONDOWN, not wm_LButtonDown.</font></p>
<p><font size="2" face="Verdana">Except in header translations, do not use
underscores to separate words. Class names should be nouns or noun phrases.
Interface or class names depend on the salient purpose of the interface.</font></p>
<p><font size="2" face="Verdana">GOOD type names:</font></p>
<dl>
  <dd><font size="2" face="Verdana">AddressForm</font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font size="2" face="Verdana">ArrayIndexOutOfBoundsException</font></dd>
</dl>
<p><font size="2" face="Verdana">BAD type names:</font></p>
<dl>
  <dd><font size="2" face="Verdana">ManageLayout (verb phrase)</font>
  <dd style="MARGIN-BOTTOM: 0.5cm"><font size="2" face="Verdana">delphi_is_new_to_me
    (underscores)</font></dd>
</dl>
<p><font size="2" face="Verdana">It seems to be unavoidable but every now and
then someone suggests using hungarian, or a similar, notation for identifier
naming. Although good arguments can be provided in favor of hungarian notation,
at least as many arguments can be given against it. The JCL will not use
hungarian notation, ever! There, that's out of the way. Identifiers in the JCL
should be named as the examples above, names which describe the purpose of the
identifier not what type they happen to be of.</font></p>
<h5><a name="3.1"></a><font size="2" face="Verdana">3.1 Unit Naming</font></h5>
<p><font face="Verdana" size="2">Use InfixCaps, as described at the beginning of
this section. See also the section on <a href="#2.2.2">unit declarations</a></font></p>
<p><font size="2" face="Verdana">As described earlier, all JCL units should have
the &quot;Jcl&quot; prefix.</font></p>
<h5><a name="3.2"></a><font size="2" face="Verdana">3.2 Class/Interface Naming</font></h5>
<p><font size="2" face="Verdana">Use InfixCaps, as described at the beginning of
this section. Begin each type declaration with a capital T:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">TMyType</font></pre>
<p><font face="Verdana" size="2">See also the section on <a href="#2.2.4">class/interface
declarations.</a></font></p>
<p><font size="2" face="Verdana">All JCL classes are prefixed with 'TJcl' not
just a capital T. Types which are used only internally don't have to include the
'Jcl' prefix although you should be carefull with the naming when they are
declared in the interface section.</font></p>
<h5><a name="3.3"></a><font size="2" face="Verdana">3.3 Field Naming</font></h5>
<p><font size="2" face="Verdana">Use InfixCaps, as described at the beginning of
this section. Begin each type declaration with a capital F, and declare all data
types in the private section, using properties or getters and setters to provide
public access. For example, use the name GetSomething to name a function
returning an internal field value and use SetSomething to name a procedure
setting that value.</font></p>
<p><font size="2" face="Verdana">Do not use all caps for const declarations
except where required in header translations.</font></p>
<p><font size="2" face="Verdana">Delphi is created in California, so we
discourage the use of hungarian notation, except where required in header
translations:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">CORRECT</font>
<font size="2" face="Courier New">  FMyString: string;</font>

<font size="2" face="Courier New">INCORRECT</font>
<font size="2" face="Courier New">  lpstrMyString: string;</font></pre>
<p><font size="2" face="Verdana">The exception to the Hungarian notation rule is
in enumerated types.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  TBitBtnKind = (bkCustom, bkOK, bkCancel, bkHelp,</font>
<font size="2" face="Courier New">    bkYes, bkNo, bkClose, bkAbort, bkRetry,</font>
<font size="2" face="Courier New">    bkIgnore, bkAll);</font></pre>
<p><font size="2" face="Verdana">In this case the letters bk are inserted before
each element of this enumeration. bk stands for ButtonKind.</font></p>
<p><font size="2" face="Verdana">When thinking about naming conventions,
consider that one-character field names should be avoided except for temporary
and looping variables.</font></p>
<p><font size="2" face="Verdana">Looping variables are by convention named I
(capital i) and J. Other commonly used single character identifier names are: S
(string) and R (Result). Single letter variables/field names should always be
capitals but other then the ones mentioned above you should avoid them and use
more meaningful names.</font></p>
<p><font size="2" face="Verdana">Avoid variable l (&quot;el&quot;) because it is
hard to distinguish it from 1 (&quot;one&quot;) on some printers and displays.</font></p>
<h5><a name="3.4"></a><font size="2" face="Verdana">3.4 Method Naming</font></h5>
<p><font size="2" face="Verdana">Method names should use the InfixCaps style.
Start with a capital letter, and capitalize the first letter of any subsequent
word in the name, as well as any letters that are part of an acronym. All other
characters in the name are lower case. Do not use underscores to separate words.
Note that this is identical to the naming convention for non-constant fields;
however it should always be easy to distinguish the two from context. Method
names should be imperative verbs or verb phrases.</font></p>
<p><font size="2" face="Verdana">Examples:</font></p>
<dl>
  <dd><font size="2" face="Verdana"><b><i>Good method names:</i></b></font>
    <dl>
      <dd><font size="2" face="Verdana">ShowStatus</font>
      <dd><font size="2" face="Verdana">DrawCircle</font>
      <dd><font size="2" face="Verdana">AddLayoutComponent</font></dd>
    </dl>
  <dd><font size="2" face="Verdana"><b><i>Bad method names:</i></b></font>
    <dl>
      <dd><font size="2" face="Verdana">MouseButton (noun phrase; doesn't
        describe function)</font>
      <dd><font size="2" face="Verdana">drawCircle (starts with lower-case
        letter)</font>
      <dd><font size="2" face="Verdana">add_layout_component (underscores)</font>
      <dd style="MARGIN-BOTTOM: 0.5cm"><font size="2" face="Verdana">ServerRunning
        (verb phrase, but not imperative)</font></dd>
    </dl>
  </dd>
</dl>
<p><font size="2" face="Verdana">A note about the last example (ServerRunning):
The function of this method is unclear. Does it start the server running
(better: StartServer), or test whether or not it is running (better:
IsServerRunning)?</font></p>
<p><font size="2" face="Verdana">A method to get or set some property of the
class should be called GetProperty or SetProperty respectively, where Property
is the name of the property.</font></p>
<p><font size="2" face="Verdana">Examples:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">GetHeight, SetHeight</font></pre>
<p><font size="2" face="Verdana">A method to test some boolean property of the
class should be called IsVisible, where Visible is the name of the property.</font></p>
<p><font size="2" face="Verdana">Examples:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">IsResizable, IsVisible</font></pre>
<h5><a name="3.5"></a><font size="2" face="Verdana">3.5 Local Variable Naming</font></h5>
<p><font face="Verdana" size="2">Local variables follow the same naming rules as
field names, except you omit the initial F, since this is not a Field of an
object. (see <a href="#3.3">section 3.3</a>).</font></p>
<h5><a name="3.6"></a><font size="2" face="Verdana">3.6 Reserved Words</font></h5>
<p><font size="2" face="Verdana">Reserved words and directives should be all
lowercase. This can be a bit confusing at times. For instance types such as
Integer are just identifiers, and appear with a first cap. Strings, however, are
declared with the reserved word string, which should be all lowercase.</font></p>
<h5><a name="3.7"></a><font size="2" face="Verdana">3.7 Type Declarations</font></h5>
<p><font face="Verdana" size="2">All type declarations should begin with the
letter T, and should follow the same capitalization specification laid out in
the <a href="#3.0">beginning</a> of this section, or in the section on <a href="#2.2.4">class
declarations.</a></font></p>
<h2><a name="4.0"></a><font size="2" face="Verdana">4.0 White Space Usage</font></h2>
<h5><a name="4.1"></a><font size="2" face="Verdana">4.1 Blank Lines</font></h5>
<p><font size="2" face="Verdana">Blank lines can improve readability by grouping
sections of the code that are logically related. A blank line should also be
used in the following places:</font></p>
<ol>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">After the
    copyright block comment, package declaration, and import section.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Between class
    declarations.</font></p>
  <li>
    <p><font size="2" face="Verdana">Between method declarations.</font></p>
  </li>
</ol>
<h5><a name="4.2"></a><font size="2" face="Verdana">4.2 Blank Spaces</font></h5>
<p><font size="2" face="Verdana">Object Pascal is a very clean, easy to read
language. In general, you don't need to add a lot of spaces in your code to
break up lines. The next few sections give you some guidelines to follow when
placing spaces in your code.</font></p>
<h5><a name="4.2.2"></a><font face="Verdana" size="2">4.2.2 Blanks should <em>not</em>
be used:</font></h5>
<ol>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Between a method
    name and its opening parenthesis.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Before or after
    a .(dot) operator.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Between a unary
    operator and its operand.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Between a cast
    and the expression being cast.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">After an opening
    parenthesis or before a closing parenthesis.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">After an opening
    square bracket [ or before a closing square bracket ].</font></p>
  <li>
    <p><font size="2" face="Verdana">Before a semicolon.</font></p>
  </li>
</ol>
<p><font size="2" face="Verdana">Examples of correct usage:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">function TMyClass.MyFunc(var Value: Integer);</font>
<font size="2" face="Courier New">MyPointer := @MyRecord;</font>
<font size="2" face="Courier New">MyClass := TMyClass(MyPointer);</font>
<font size="2" face="Courier New">MyInteger := MyIntegerArray[5];</font></pre>
<p><font size="2" face="Verdana">Examples of incorrect usage:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">function TMyClass.MyFunc( var Value: Integer ) ;</font>
<font size="2" face="Courier New">MyPointer := @ MyRecord;</font>
<font size="2" face="Courier New">MyClass := TMyClass ( MyPointer ) ;</font>
<font size="2" face="Courier New">MyInteger := MyIntegerArray [ 5 ] ;</font></pre>
<h5><a name="4.3"></a><font size="2" face="Verdana">4.3 Indentation</font></h5>
<p><font size="2" face="Verdana">You should always indent two spaces for all
indentation levels. In other words, the first level of indentation is two
spaces, the second level four spaces, the third level 6 spaces, etc. Never use
tab characters.</font></p>
<p><font size="2" face="Verdana">There are few exceptions. The reserved words
unit, uses, type, interface, implementation, initialization and finalization
should always be flush with the margin. The final end statement at the end of a
unit should be flush with the margin. In the project file, the word program, and
the main begin and end block should all be flush with the margin. The code
inside the begin..end block, should be indented at least two spaces.</font></p>
<h5><a name="4.4"></a><font size="2" face="Verdana">4.4 Continuation Lines</font></h5>
<p><font size="2" face="Verdana">Lines should be limited to 100 columns. Lines
longer than 100 columns should be broken into one or more continuation lines, as
needed. All the continuation lines should be aligned and indented from the first
line of the statement, and indented two characters. Always place begin
statements on their own line.</font></p>
<p><font size="2" face="Verdana">Examples:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">// CORRECT</font>

<font size="2" face="Courier New">function CreateWindowEx(dwExStyle: DWORD;</font>
<font size="2" face="Courier New">  lpClassName: PChar; lpWindowName: PChar;</font>
<font size="2" face="Courier New">  dwStyle: DWORD; X, Y, nWidth, nHeight: Integer;</font>
<font size="2" face="Courier New">  hWndParent: HWND; hMenu: HMENU; hInstance: HINST;</font>
<font size="2" face="Courier New">  lpParam: Pointer): HWND; stdcall;</font>


<font size="2" face="Courier New">if ((X = Y) or (Y = X) or</font>
<font size="2" face="Courier New">  (Z = P) or (F = J) then</font>
<font size="2" face="Courier New">begin</font>
<font size="2" face="Courier New">  S := J;</font>
<font size="2" face="Courier New">end;</font></pre>
<p><font size="2" face="Verdana">Never wrap a line between a parameter and its
type, unless it is a comma separated list, then wrap at least before the last
parameter so the type name follows to the next line. The colon for all variable
declarations contains no whitespace between it and the variable. There should be
a single space following the colon before the type name;</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">procedure Foo(Param1: Integer; Param2: Integer);</font>


<font size="2" face="Courier New">procedure Foo( Param :Integer; Param2:Integer );</font></pre>
<p><font size="2" face="Verdana">A continuation line should never start with a
binary operator. Avoid breaking a line where normally no white space appears,
such as between a method name and its opening parenthesis, or between an array
name and its opening square bracket. If you must break under these
circumstances, then one viable place to begin is after the opening parenthesis
that follows a method name. Never place a begin statement on the same line with
any other code.</font></p>
<p><font size="2" face="Verdana">Examples:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">// INCORRECT</font>
<font size="2" face="Courier New">while (LongExpression1 or LongExpression2) do begin</font>
<font size="2" face="Courier New">  // DoSomething</font>
<font size="2" face="Courier New">  // DoSomethingElse;</font>
<font size="2" face="Courier New">end;</font>

<font size="2" face="Courier New">// CORRECT</font>
<font size="2" face="Courier New">while (LongExpression1 or LongExpression2) do </font>
<font size="2" face="Courier New">begin</font>
<font size="2" face="Courier New">  // DoSomething</font>
<font size="2" face="Courier New">  // DoSomethingElse;</font>
end;

<font size="2" face="Courier New">if (LongExpression1)  </font>
<font size="2" face="Courier New">   or (LongExpression2) </font>
<font face="Courier New" size="2">   or </font>(LongExpression3) then
<font size="2" face="Courier New">// CORRECT</font>
<font size="2" face="Courier New">if (LongExpression1) or </font>
<font size="2" face="Courier New">  (LongExpression2) or </font>
<font size="2" face="Courier New">  (LongExpression3) then </font>
<font size="2" face="Courier New">  </font></pre>
<h2><a name="5.0"></a><font size="2" face="Verdana">5.0 Comments</font></h2>
<p><font size="2" face="Verdana">The Object Pascal language supports two kinds
of comments: block, and single-line comments. Some general guidelines for
comment usage include:</font></p>
<ul>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">It is helpful to
    place comments near the top of unit to explain its purpose.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">It is helpful to
    place comments before a class declaration.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">It is helpful to
    place comments before some method declarations.</font></p>
  <li>
    <p><font size="2" face="Verdana">Avoid making obvious comments:</font></p>
  </li>
</ul>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">i := i + 1;     // Add one to i</font></pre>
<ul>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Remember that
    misleading comments are worse than no comments at all.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Avoid putting
    any information into comments that is likely to become out of date.</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Avoid enclosing
    comments in boxes drawn with asterisks or other special typography.</font></p>
  <li>
    <p><font size="2" face="Verdana">Temporary comments that are expected to be
    changed or removed later should be marked with the special tag &quot;TODO:&quot;
    so that they can easily be found afterwards. Ideally, all temporary comments
    should have been removed by the time a program is ready to be shipped.</font></p>
  </li>
</ul>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">// TODO: Change this to call Sort when it is fixed</font>
<font size="2" face="Courier New">List.MySort;</font></pre>
<p><a name="5.1"></a><font size="2" face="Verdana">5.1 Block Comments</font></p>
<p><font size="2" face="Verdana">Object Pascal supports two types of block
comments. The most commonly used block comment is a pair of curly braces: { }.
The Delphi team prefers to keep comments of this type as spare and simple as
possible. For instance, you should avoid using asterisks to create patterns or
lines inside your comments. Instead, make use of white space to break your
comments up, much as you would in a word processing document. The words in your
comments should start on the same line as the first curly brace, as shown in
this excerpt from DsgnIntf.pas:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">{ TPropertyEditor</font>

<font size="2" face="Courier New">  Edits a property of a component, or list of components,</font>
<font size="2" face="Courier New">  selected into the Object Inspector.  The property</font>
<font size="2" face="Courier New">  editor is created based on the type of the</font>
<font size="2" face="Courier New">  property being edited as determined by the types</font>
<font size="2" face="Courier New">  registered by...</font>

<font size="2" face="Courier New">  etc...</font>

<font size="2" face="Courier New">    GetXxxValue</font>
<font size="2" face="Courier New">      Gets the value of the first property in the</font>
<font size="2" face="Courier New">      Properties property.  Calls the appropriate</font>
<font size="2" face="Courier New">      TProperty GetXxxValue method to retrieve the</font>
<font size="2" face="Courier New">      value.</font>

<font size="2" face="Courier New">    SetXxxValue Sets the value of all the properties</font>
<font size="2" face="Courier New">      in the Properties property.  Calls the appropriate</font>
<font size="2" face="Courier New">      TProperty SetXxxxValue methods to set the value. }</font></pre>
<p><font size="2" face="Verdana">A block comment is always used for the
copyright/ID comment at the beginning of each source file. It is also used to
&quot;comment out&quot; several lines of code.</font></p>
<p><font size="2" face="Verdana">Block comments used to describe a method should
appear before the method declaration.</font></p>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">// CORRECT</font>

<font size="2" face="Courier New">{ TMyObject.MyMethod</font>

<font size="2" face="Courier New">  This routine allows you to execute code. }</font>

<font size="2" face="Courier New">procedure TMyObject.MyMethod;</font>
<font size="2" face="Courier New">begin</font>
<font size="2" face="Courier New">end;</font>


<font size="2" face="Courier New">procedure TMyObject.MyMethod;</font>
<font size="2" face="Courier New">{******************************************************</font>
<font size="2" face="Courier New">  TMyObject.MyMethod</font>

<font size="2" face="Courier New">  This routine allows you to execute code.</font>
<font size="2" face="Courier New">*******************************************************}</font>
<font size="2" face="Courier New">begin</font>
<font size="2" face="Courier New">end;</font></pre>
<p><font size="2" face="Verdana">A second kind of block comment contains two
characters, a parenthesis and an asterisk: (* *). This is sometimes called
starparen comments. These comments are generally useful only during code
development, as their primary benefit is that they allow nesting of comments, as
long as the nest level is less than 2. Object Pascal doesn't support nesting
comments of the same type within each other, so really there is only one level
of comment nesting: curly inside of starparen, and starparen inside of curly. As
long as you don't nest them, any other standard Pascal comments between comments
of this type will be ignored. As a result, you can use this syntax to comment
out a large chunk of code that is full of mixed code and comments:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">(* procedure TForm1.Button1Click(Sender: TObject);</font>
<font size="2" face="Courier New">begin</font>
<font size="2" face="Courier New">  DoThis; // Start the process</font>
<font size="2" face="Courier New">  DoThat; // Continue iteration</font>
<font size="2" face="Courier New">  { We need a way to report errors here, perhaps using</font>
<font size="2" face="Courier New">    a try finally block ??? }</font>
<font size="2" face="Courier New">  CallMoreCode; // Finalize the process</font>
<font size="2" face="Courier New">end; *)</font></pre>
<p><font size="2" face="Verdana">In this example, the entire Button1Click method
is commented out, including any of the subcomments found between the procedure's
begin..end pair.</font></p>
<h5><a name="5.2"></a><font size="2" face="Verdana">5.2 Single-Line Comments</font></h5>
<p><font size="2" face="Verdana">A single-line comment consists of the
characters // followed by text. Include a single space between the // and the
comment itself. Place single line comments at the same indentation level as the
code that follows it. You can group single-line comments to form a larger
comment.</font></p>
<p><font size="2" face="Verdana">A single-line comment or comment group should
always be preceded by a blank line, unless it is the first line in a block. If
the comment applies to a group of several statements, then the comment or
comment group should also be followed by a blank line. If it applies only to the
next statement (which may be a compound statement), then do not follow it with a
blank line.</font></p>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">Table1.Open;</font></pre>
<p><font size="2" face="Verdana">Single-line comments can also follow the code
they reference. These comments, sometimes referred to as trailing comments,
appear on the same line as the code they describe. They should have at least one
space-character separating them from the code they reference. If more than one
trailing comment appears in a block of code, they should all be aligned to the
same column.</font></p>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">if (not IsVisible) then</font>
<font size="2" face="Courier New">  Exit;          // nothing to do</font>
<font size="2" face="Courier New">Inc(StrLength);  // reserve space for null terminator</font></pre>
<p><font size="2" face="Verdana">Avoid commenting every line of executable code
with a trailing comment. It is usually best to limit the comments inside the
begin..end pair of a method or function to a bare minimum. Longer comments can
appear in a block comment before the method or function declaration.</font></p>
<h2><a name="6.0"></a><font size="2" face="Verdana">Classes</font></h2>
<h5><a name="6.1"></a><font size="2" face="Verdana">6.1 Class Body Organization</font></h5>
<p><font size="2" face="Verdana">The body of a class declaration should be
organized in the following order:</font></p>
<ul>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Field
    declarations</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Method
    declarations</font></p>
  <li>
    <p><font size="2" face="Verdana">Property declarations</font></p>
  </li>
</ul>
<p><font size="2" face="Verdana">The fields, properties and methods in your
class should be arranged alphabetically by name.</font></p>
<h5><a name="6.1.1"></a><font size="2" face="Verdana">6.1.1 Access levels</font></h5>
<p><font size="2" face="Verdana">Except for code inserted by the IDE, the
scoping directives for a class should be declared in the following order:</font></p>
<ul>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Private
    declarations</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Protected
    declarations</font></p>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Public
    declarations</font></p>
  <li>
    <p><font size="2" face="Verdana">Published declarations</font></p>
  </li>
</ul>
<p><font face="Verdana" size="2">There are <em>four</em> access levels for class
members in Object Pascal: published, public, protected, and private -- in order
of decreasing accessibility. By default, the access level is published. In
general, a member should be given the lowest access level which is appropriate
for the member. For example, a member which is only accessed by classes in the
same unit should be set to <em>private</em> access. Also, declaring a lower
access level will often give the compiler increased opportunities for
optimization. On the other hand, use of private makes it difficult to extend the
class by sub-classing. If there is reason to believe the class might be
sub-classed in the future, then members that might be needed by sub-classes
should be declared protected instead of private, and the properties used to
access private data should be given protected status.</font></p>
<p><font size="2" face="Verdana">You should never allow public access to data.
Data should always be declared in the private section, and any public access
should be via getter and setter methods, or properties.</font></p>
<h5><a name="6.1.8"></a><font size="2" face="Verdana">6.1.8 Constructor
declarations</font></h5>
<p><font size="2" face="Verdana">Methods should be arranged alphabetically. It
is correct either to place your constructors and destructors at the head of this
list in the public section, or to arrange them in alphabetical order within the
public section.</font></p>
<p><font size="2" face="Verdana">If there is more than one constructor, and if
you choose to give them all the same name, then sort them lexically by formal
parameter list, with constructors having more parameters always coming after
those with fewer parameters. This implies that a constructor with no arguments
(if it exists) is always the first one. For greatest compatibility with
C++Builder, try to make the parameter lists of your constructors unique. C++
cannot call constructors by name, so the only way to distinguish between
multiple constructors is by parameter list.</font></p>
<h5><a name="6.2"></a><font size="2" face="Verdana">6.2 Method Declarations</font></h5>
<p><font size="2" face="Verdana">If possible, a method declaration should appear
on one line.</font></p>
<p><font size="2" face="Verdana">Examples:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">procedure ImageUpdate(Image img, infoflags: Integer,</font>
<font size="2" face="Courier New">  x: Integer, y: Integer, w: Integer, h: Integer)</font></pre>
<h2><a name="7.0"></a><font size="2" face="Verdana">Interfaces</font></h2>
<p><font size="2" face="Verdana">Interfaces are declared in a manner that runs
parallel to the declaration for classes:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">InterfaceName = interface([Inherited Interface])</font>
<font size="2" face="Courier New">InterfaceBody</font>
<font size="2" face="Courier New">end;</font></pre>
<p><font face="Verdana" size="2">An interface declaration should be indented two
spaces. The <em>body</em> of the interface is indented by the standard
indentation of four spaces. The closing end statement should also be indented
two characters. There should be a semi-colon following the closing end
statement.</font></p>
<p><font size="2" face="Verdana">There are no fields in an interface
declaration. Properties, however, are allowed.</font></p>
<p><font size="2" face="Verdana">All interface methods are inherently public and
abstract; do not explicitly include these keywords in the declaration of an
interface method.</font></p>
<p><font size="2" face="Verdana">Except as otherwise noted, interface
declarations follow the same style guidelines as classes.</font></p>
<h5><a name="7.1"></a><font size="2" face="Verdana">7.1 Interface Body
Organization</font></h5>
<p><font size="2" face="Verdana">The body of an interface declaration should be
organized in the following order:</font></p>
<ol>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Interface method
    declarations</font></p>
  <li>
    <p><font size="2" face="Verdana">Interface property declarations</font></p>
  </li>
</ol>
<p><font size="2" face="Verdana">The declaration styles of interface properties
and methods are identical to the styles for class properties and methods.</font></p>
<h2><a name="8.0"></a><font size="2" face="Verdana">8.0 Statements</font></h2>
<p><font size="2" face="Verdana">Statements are one or more lines of code
followed by a semicolon. Simple statements have one semicolon, while compound
statements have more than one semicolon and therefore consist of multiple simple
statements.</font></p>
<p><font size="2" face="Verdana">Here is a simple statement:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New">A := B; </font></pre>
<p><font size="2" face="Verdana">Here is a compound, or structured, statement:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">begin</font>
<font size="2" face="Courier New">  B := C;</font>
<font size="2" face="Courier New">  A := B;</font>
<font size="2" face="Courier New">end;</font></pre>
<h2><a name="8.0.1"></a><font size="2" face="Verdana">8.0.1 Simple Statements</font></h2>
<p><font size="2" face="Verdana">A simple statement contains a single semicolon.
If you need to wrap the statement, indent the second line two spaces in from the
previous line:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">MyValue :=</font>
<font size="2" face="Courier New">  MyValue + (SomeVeryLongStatement / OtherLongStatement);</font></pre>
<h2><a name="8.0.2"></a><font size="2" face="Verdana">8.0.1 Compound Statements</font></h2>
<p><font size="2" face="Verdana">Compound Statements always end with a
semicolon, even if it is syntactically not required. For example the last
statement in the following example must have a terminating semicolon for it to
be acceptable in the JCL.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">begin</font>
<font size="2" face="Courier New">  MyStatement;</font>
<font size="2" face="Courier New">  MyNextStatement;</font>
<font size="2" face="Courier New">  MyLastStatement;   // semicolon optional</font>
<font size="2" face="Courier New">end;</font></pre>
<p><a name="8.1.1"></a><font size="2" face="Verdana"><b>8.1.1 Assignment and
expression statements</b></font></p>
<p><font size="2" face="Verdana">Each line should contain at most one statement.
For example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">a := b + c; Inc(Count); // INCORRECT</font>
<font size="2" face="Courier New">a := b + c;             // CORRECT</font>
<font size="2" face="Courier New">Inc(Count);             // CORRECT</font></pre>
<h5><a name="8.1.2"></a><font size="2" face="Verdana">8.1.2 Local variable
declarations</font></h5>
<p><font size="2" face="Verdana">Local variables should have Camel Caps, that
is, they should start with a capital letter, and have capital letters for the
beginning of each embedded word. Do not preface variable names with an F, as
that convention is reserved for Fields in a class declaration:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">var</font>
<font size="2" face="Courier New">  MyData: Integer;</font>
<font size="2" face="Courier New">  MyString: string;</font></pre>
<p><font size="2" face="Verdana">You may declare multiple identifiers of the
same type on a single line:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">var</font>
<font size="2" face="Courier New">  ArraySize, ArrayCount: Integer;</font></pre>
<p><font size="2" face="Verdana">This practice is discouraged in class
declarations. There you should place each field on a separate line, along with
its type.</font></p>
<p><font size="2" face="Verdana">You should only declare identifiers on a single
line if they are logically related.</font></p>
<h5><a name="8.1.3"></a><font size="2" face="Verdana">8.1.3 Array declarations</font></h5>
<p><font size="2" face="Verdana">There should always be a space before the
opening bracket &quot;[&quot; and after the closing bracket.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">type</font>
<font size="2" face="Courier New">  TMyArray = array [0..100] of Char;</font></pre>
<h5><a name="8.2.3"></a><font size="2" face="Verdana">8.2.3 if statement</font></h5>
<p><font size="2" face="Verdana">If statements should always appear on at least
two lines.</font></p>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">if A &lt; B then DoSomething;</font>

<font size="2" face="Courier New">if A &lt; B then</font>
<font size="2" face="Courier New">  DoSomething;</font></pre>
<p><font size="2" face="Verdana">In the JCL the first example is allowed but
discouraged. Use it only in &quot;obvious&quot; situations such as &quot;if
ParameterIncorrect then Exit;&quot;</font></p>
<p><font size="2" face="Verdana">In compound if statements, put each element
separating statements on a new line:</font></p>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // INCORRECT</font>
<font size="2" face="Courier New">  if A &lt; B then begin</font>
<font size="2" face="Courier New">    DoSomething;</font>
<font size="2" face="Courier New">    DoSomethingElse;</font>
<font size="2" face="Courier New">  end else begin</font>
<font size="2" face="Courier New">    DoThis;</font>
<font size="2" face="Courier New">    DoThat;</font>
<font size="2" face="Courier New">  end;</font>

<font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  if A &lt; B then</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoSomething;</font>
<font size="2" face="Courier New">    DoSomethingElse;</font>
<font size="2" face="Courier New">  end</font>
<font size="2" face="Courier New">  else</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoThis;</font>
<font size="2" face="Courier New">    DoThat;</font>
<font size="2" face="Courier New">  end;</font>
<font size="2" face="Courier New">  </font></pre>
<p><font size="2" face="Verdana">Here are a few more variations that are
considered valid:</font></p>
<p><font size="2" face="Verdana">Except for the second one, all these variations
are discouraged.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  if Condition then</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoThis;</font>
<font size="2" face="Courier New">  end else</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoThat;</font>
<font size="2" face="Courier New">  end;</font>

<font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  if Condition then</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoThis;</font>
<font size="2" face="Courier New">  end</font>
<font size="2" face="Courier New">  else</font>
<font size="2" face="Courier New">    DoSomething;</font>

<font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  if Condition then</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoThis;</font>
<font size="2" face="Courier New">  end else</font>
<font size="2" face="Courier New">    DoSomething;</font>

<font size="2" face="Courier New">  if Condition then</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoThis;</font>
<font size="2" face="Courier New">  end</font>
<font size="2" face="Courier New">  else DoSomething;</font>
<font size="2" face="Courier New">  </font></pre>
<p><font size="2" face="Verdana">One that has fallen out of favor but deserves
honorable mention:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  if Condition then</font>
<font size="2" face="Courier New">    DoThis</font>
<font size="2" face="Courier New">  else DoThat;</font>
<font size="2" face="Courier New">  </font></pre>
<p><font size="2" face="Verdana">Avoid extraneous parentheses when formulating
the conditional in an if statement. In other words, don't encapsulate the
conditional statement in parenthesis if it's not syntactically required and
doesn't provide additional readability. An obvious example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  if I &gt; 0 then </font>
<font size="2" face="Courier New">    DoSomething;</font>
<font size="2" face="Courier New">    </font>
<font size="2" face="Courier New">  // INCORRECT</font>
<font size="2" face="Courier New">  if (I &gt; 0) then</font>
<font size="2" face="Courier New">    DoSomething;</font></pre>
<h5><a name="8.2.4"></a><font size="2" face="Verdana">8.2.4 for statement</font></h5>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // INCORRECT</font>
<font size="2" face="Courier New">  for i := 0 to 10 do begin</font>
<font size="2" face="Courier New">    DoSomething; </font>
<font size="2" face="Courier New">    DoSomethingElse;</font>
<font size="2" face="Courier New">  end;</font>

<font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  for i := 0 to 10 do</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoSomething;</font>
<font size="2" face="Courier New">    DoSomethingElse;</font>
<font size="2" face="Courier New">  end;</font></pre>
<p><font size="2" face="Verdana">If the body of the for loop consist of a single
statement then both of the examples below are allowed. As with if statements,
the first one is discouraged though.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  for I := 0 to 10 do DoSomething;</font>

<font size="2" face="Courier New">  for I := 0 to 10 do</font>
<font size="2" face="Courier New">    DoSomething;</font>
<font size="2" face="Courier New">  </font></pre>
<h5><a name="8.2.5"></a><font size="2" face="Verdana">8.2.5 while statement</font></h5>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // INCORRECT</font>
<font size="2" face="Courier New">  while x &lt; j  do begin</font>
<font size="2" face="Courier New">    DoSomething;</font>
<font size="2" face="Courier New">    DoSomethingElse;</font>
<font size="2" face="Courier New">  end;</font>

<font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  while x &lt; j do</font>
<font size="2" face="Courier New">  begin</font>
<font size="2" face="Courier New">    DoSomething;</font>
<font size="2" face="Courier New">    DoSomethingElse;</font>
<font size="2" face="Courier New">  end;</font>
<font size="2" face="Courier New">  </font></pre>
<p><font size="2" face="Verdana">The same as with for loops applies here. Both
of the following examples are allowed but the first one is discouraged.</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  while x &lt; j do Something;</font>

<font size="2" face="Courier New">  while x &lt; j do</font>
<font size="2" face="Courier New">    Something;</font></pre>
<h5><a name="8.2.6"></a><font size="2" face="Verdana">8.2.6 repeat until
statement</font></h5>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  repeat</font>
<font size="2" face="Courier New">    x := j;</font>
<font size="2" face="Courier New">    j := UpdateValue;</font>
<font size="2" face="Courier New">  until j &gt; 25;</font></pre>
<h5><a name="8.2.7"></a><font size="2" face="Verdana">8.2.7 case statement</font></h5>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  case Control.Align of</font>
<font size="2" face="Courier New">    alLeft, alNone: NewRange := Max(NewRange, Position);</font>
<font size="2" face="Courier New">    alRight: Inc(AlignMargin, Control.Width);</font>
<font size="2" face="Courier New">  end;</font>


<font size="2" face="Courier New">  // CORRECT</font>
<font size="2" face="Courier New">  case ScrollCode of</font>
<font size="2" face="Courier New">    SB_LINEUP, SB_LINEDOWN:</font>
<font size="2" face="Courier New">      begin</font>
<font size="2" face="Courier New">        Incr := FIncrement div FLineDiv;</font>
<font size="2" face="Courier New">        FinalIncr := FIncrement mod FLineDiv;</font>
<font size="2" face="Courier New">        Count := FLineDiv;</font>
<font size="2" face="Courier New">      end;</font>
<font size="2" face="Courier New">    SB_PAGEUP, SB_PAGEDOWN:</font>
<font size="2" face="Courier New">      begin</font>
<font size="2" face="Courier New">        Incr := FPageIncrement;</font>
<font size="2" face="Courier New">        FinalIncr := Incr mod FPageDiv;</font>
<font size="2" face="Courier New">        Incr := Incr div FPageDiv;</font>
<font size="2" face="Courier New">        Count := FPageDiv;</font>
<font size="2" face="Courier New">      end;</font>
<font size="2" face="Courier New">  else</font>
<font size="2" face="Courier New">    Count := 0;</font>
<font size="2" face="Courier New">    Incr := 0;</font>
<font size="2" face="Courier New">    FinalIncr := 0;</font>
<font size="2" face="Courier New">  end;</font></pre>
<p><font size="2" face="Verdana">Except the obvious situations in which the
first variation is used for readability, the JCL only uses the second example.
That is, each case label starts on a separate line with a two column indent
relative to the case statement and the body of that particular case follows on
the next line with an additional two column indent. If the body on a particular
case consists of only a single statement then the begin...end pair can be
omitted. In this case the statement is aligned using a two column indent
relative to the case statement (identical to the begin reserved word in the
example above).</font></p>
<h5><a name="8.2.8"></a><font size="2" face="Verdana">8.2.8 try statement</font></h5>
<p><font size="2" face="Verdana">Example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  // Correct</font>
<font size="2" face="Courier New">  try</font>
<font size="2" face="Courier New">    try</font>
<font size="2" face="Courier New">      EnumThreadWindows(CurrentThreadID, @Disable, 0);</font>
<font size="2" face="Courier New">      Result := TaskWindowList;</font>
<font size="2" face="Courier New">    except</font>
<font size="2" face="Courier New">      EnableTaskWindows(TaskWindowList);</font>
<font size="2" face="Courier New">      raise;</font>
<font size="2" face="Courier New">    end;</font>
<font size="2" face="Courier New">  finally</font>
<font size="2" face="Courier New">    TaskWindowList := SaveWindowList;</font>
<font size="2" face="Courier New">    TaskActiveWindow := SaveActiveWindow;</font>
<font size="2" face="Courier New">  end;</font></pre>
<h2><a name="9.0"></a><font size="2" face="Verdana">9.0 Miscellanous</font></h2>
<h5><a name="9.1"></a><font size="2" face="Verdana">9.1 Const, Var and Type</font></h5>
<p><font size="2" face="Verdana">The reserved words var, const and type always
appear alone on a line. These example are correct:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New"><b>type</b></font>
<font size="2" face="Courier New">  TMyType = Integer;</font>

<font size="2" face="Courier New"><b>const</b></font>
<font size="2" face="Courier New">  MyConstant = 100;</font>

<font size="2" face="Courier New"><b>var</b></font>
<font size="2" face="Courier New">  MyVar: Integer;</font></pre>
<p><font size="2" face="Verdana">But these are not:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New"><b>type</b> TMyType = Integer;</font>

<font size="2" face="Courier New"><b>const</b> MyConstant = 100;</font>

<font size="2" face="Courier New"><b>var</b> MyVar: Integer;</font></pre>
<p><font size="2" face="Verdana">Additionally a procedure should only have a
single type, const and var section and, if possible, in that order. For example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New"><b>procedure</b> SomeProcedure;</font>
<font size="2" face="Courier New"><b>type</b></font>
<font size="2" face="Courier New">  TMyType = Integer;</font>
<font size="2" face="Courier New"><b>const</b></font>
<font size="2" face="Courier New">  ArraySize = 100;</font>
<font size="2" face="Courier New"><b>var</b></font>
<font size="2" face="Courier New">  MyArray: <b>array</b> [1..ArraySize] <b>of</b> TMyType;</font>
<font size="2" face="Courier New"><b>begin</b></font>
<font size="2" face="Courier New">  ...</font>
<font size="2" face="Courier New"><b>end</b>;</font></pre>
<h5><a name="9.2"></a><font size="2" face="Verdana">9.2 Conditional compilation</font></h5>
<p><font size="2" face="Verdana">All JCL units must include the JCL.INC file.
This file defines a number of global directives. The include statement should be
placed between the unit and interface keywords. When using any of the directives
from this file, or others for that matter, you should always repeat the
conditional in the ENDIF directive. For example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">{$IFDEF MSWINDOWS}</font>
<font size="2" face="Courier New">  // conditionally compiled code</font>
<font size="2" face="Courier New">{$ENDIF}</font></pre>
<p><font size="2" face="Verdana">This may seem overkill if the conditionally
compiled code only extends a few lines but is a tremendous visual aid when the
code actually spans multiple pages of code (as is often the case for platform
dependent code). Platform dependent code should use the conditionals MSWINDOWS,
for code intended to run on MS Windows platforms, WIN32 for windows 32 only
code, UNIX for unix compatible code and LINUX for Linux only code.</font></p>
<h5><a name="9.3"></a><font size="2" face="Verdana">9.3 Resource strings</font></h5>
<p><font size="2" face="Verdana">All resourcestrings should be of the format 'Rs'[Category][Name].
[Category] should be (an abbreviation of) the category in which the code
resides, [Name] is a descriptive name for the string itself. For example, the
TJclCriticalSectionEx CreateEx constructor raises an exception on initialization
failure. The exception message is declared as a resourcestring with the name
RsSynchInitCriticalSection.</font></p>
<p><font size="2" face="Verdana">All resourcestrings must be declared in the
global JclResources.pas file which is included in each JCL unit. This is to ease
translation. Literal strings should be avoided where possible (use a constant
whenever you can).</font></p>
<h5><a name="9.4"></a><font size="2" face="Verdana">9.4 Exceptions</font></h5>
<p><font size="2" face="Verdana">Exceptions are prefixed with 'EJcl' instead of
'TJcl'. All JCL exceptions should be ultimately derived from EJclError which is
declared in JclBase.</font></p>
<p><font size="2" face="Verdana">When raising an exception you should prefer the
CreateRes(ResStringRec: PResStringRec) constructor for efficiency. Thus, an
exception is raised like this:</font></p>
<pre style="MARGIN-BOTTOM: 0.5cm; MARGIN-LEFT: 1cm"><font size="2" face="Courier New"><b>raise</b> EJclSomeException.CreateRes(@RsSomeResourceString);</font></pre>
<h5><a name="9.5"></a><font size="2" face="Verdana">9.5 Categories and routine
separation</font></h5>
<p><font size="2" face="Verdana">Typically each JCL unit is a single category.
For example, JclSynch contains all kinds of synchronization classes and
subroutines. Within a unit there is usually a further categorization, for
example JclSynch has a number of 'Locked Integer Manipulation' routines which
form a subcategory within this unit. In the interface section each subcategory
is divided using two 100 column width lines in between which there is a one line
description of the subcategory. For example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New"><b>function</b> LockedAdd(<b>var</b> Target: Integer; Value: Integer): Integer;</font>
<font size="2" face="Courier New"><b>function</b> LockedCompareExchange(<b>var</b> Target: Integer; Exch, Comp: Integer): Integer;</font></pre>
<p><font size="2" face="Verdana">In the implementation section this separation
is identical except that the lines are composed using the equals character (=).</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New"><b>function</b> LockedAdd(<b>var</b> Target: Integer; Value: Integer): Integer;</font>
<font size="2" face="Courier New"><b>asm</b></font>
<font size="2" face="Courier New">  MOV     ECX, EAX</font></pre>
<p><font size="2" face="Verdana">In the implementation section each routine or
method is separated from its predecessor using a 80 column width line composed
of minus characters (-).</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">  <b>if</b> (L &gt; 0) <b>and</b> (Path[L] &lt;&gt; PathSeparator) <b>then</b> Result := Path + PathSeparator;</font>
<font size="2" face="Courier New"><b>end</b>;</font>


<font size="2" face="Courier New"><b>function</b> PathAddExtension(<b>const</b> Path, Extension: <b>string</b>): <b>string</b>;</font>
<font size="2" face="Courier New"><b>begin</b></font>
<font size="2" face="Courier New">  Result := Path;</font>
<font size="2" face="Courier New">  <b>if</b> (Path &lt;&gt; '') <b>and</b> (ExtractFileExt(Path) = '') <b>and</b> (Extension &lt;&gt; '') <b>then</b></font>
<font size="2" face="Courier New">  <b>begin</b></font>
<font size="2" face="Courier New">    <b>if</b> Extension[1] = '.' <b>then</b></font>
<font size="2" face="Courier New">      Result := Result + Extension</font>
<font size="2" face="Courier New">    <b>else</b></font>
<font size="2" face="Courier New">      Result := Result + '.' + Extension;</font>
<font size="2" face="Courier New">  <b>end</b>;</font>
<font size="2" face="Courier New"><b>end</b>;</font>


<font size="2" face="Courier New"><b>function</b> PathAppend(<b>const</b> Path, Append: <b>string</b>): <b>string</b>;</font>
<font size="2" face="Courier New"><b>var</b></font>
<font size="2" face="Courier New">  PathLength: Integer;</font>
<font size="2" face="Courier New">  B1, B2: Boolean;</font>
<font size="2" face="Courier New"><b>begin</b></font>
<font size="2" face="Courier New">  <b>if</b> Append = '' <b>then</b></font>
<font size="2" face="Courier New">    Result := Path</font></pre>
<h5><a name="9.6"></a><font size="2" face="Verdana">9.6 Assembler</font></h5>
<p><font size="2" face="Verdana">Assembler is formatted like this:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">        REP     MOVSW</font>
<font size="2" face="Courier New">        JMP     @@2</font>
<font size="2" face="Courier New">@@1:</font>
<font size="2" face="Courier New">        LEA     ESI, [ESI + 2 * ECX - 2]</font>
<font size="2" face="Courier New">        LEA     EDI, [EDI + 2 * ECX - 2]</font></pre>
<p><font size="2" face="Verdana">That is, the opcode is indented 8 spaces and
the operands are aligned on the 16th column. Labels should be indented with two
spaces or aligned on the left side and be camel case. All opcodes and registers
should be written fully in uppercase. Numeric labels are acceptable but a more
descriptive name is preferred. General punctuation formatting still applies,
e.g. a single space after each comma and a space on both sides of an operator
(such as the addition operator +). Additionally, never put labels and commands
on the same line and always prefix labels with the @ character to make the label
scope local. Generically speaking, assembler should be avoided but if it is used
it should be heavily commented.</font></p>
<h5><a name="9.7"></a><font size="2" face="Verdana">9.7 Local routines</font></h5>
<p><font size="2" face="Verdana">Local functions should be indented two spaces
in their entirety and separated from the procedure declaration and begin
statement by a single line. If the 'outer' procedure (SomeProcedure in the
example) has local variables these should be declared before the local
procedure, regardless of whether the local procedure needs access to them.
However, local routines should be avoided. Whenever it seems reasonable to
extract code as a local subroutine, think carefully whether the routine can be
made more generic and extracted as a normal, global routine (of course should be
moved to the appropriate unit as well). For example:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New"><b>procedure</b> SomeProcedure;</font>
<font size="2" face="Courier New"><b>var</b></font>
<font size="2" face="Courier New">  I: Integer;</font>

<font size="2" face="Courier New">  <b>procedure</b> LocalProcedure;</font>
<font size="2" face="Courier New">  <b>begin</b></font>
<font size="2" face="Courier New">    ...</font>
<font size="2" face="Courier New">  <b>end</b>;</font>

<font size="2" face="Courier New"><b>begin</b></font>
<font size="2" face="Courier New">  ...</font>
<font size="2" face="Courier New">  LocalProcedure;</font>
<font size="2" face="Courier New">  ...</font>
<font size="2" face="Courier New"><b>end</b>;</font></pre>
<h5><a name="9.8"></a><font size="2" face="Verdana">9.8 Parameter declarations</font></h5>
<p><font size="2" face="Verdana">When declaring the parameters list of a
procedure, function or method, observe the following recommendations:</font></p>
<ul>
  <li>
    <p style="MARGIN-BOTTOM: 0cm"><font size="2" face="Verdana">Combine formal
    parameters of same type into one statement</font></p>
  <li>
    <p><font size="2" face="Verdana">Usage of A in parameter names is
    discouraged unless it concerns a method of a class which has as a property
    which is named identical.</font></p>
  </li>
</ul>
<p><font size="2" face="Verdana">Although technically these are not formatting
issues, I'd like to methion them here anyway:</font></p>
<ul>
  <li>
    <p><font face="Verdana" size="2">Ordering of parameters should be: input,
    input./output and output parameters and within that ordering: most used,
    least used. Parameters with default values are, as required by the Object
    Pascal language rules, always placed </font>at<font face="Verdana" size="2">
    the back of the list.</font></p>
  <li>
    <p><font size="2" face="Verdana">Use of const for parameter types is
    recommended even if it's use does not increases the efficiency of the
    parameter passing. For example, a parameter of type Integer should be
    declared with the const modifier if that's the semantic meaning of the
    parameter in question.</font></p>
  </li>
</ul>
<h5><a name="9.9"></a><font size="2" face="Verdana">9.9 Initialization of global
variables</font></h5>
<p><font size="2" face="Verdana">Global variables are, like class members,
automatically initialized to 0. This has different meaning for different types.
For example, and Integer is initialized to 0 while a pointer is initialized to
nil. Because of this, if the global variable needs to be 0 initialized, which is
often the case, this should not be done explicitly. Instead you should rely on
Delphi to do this for you. This is for efficiency reasons btw because it
influences how the variable ends up in the executable and later in memory. If
you desire you can add a comment to indicate reliance on 0 initialization like
so:</font></p>
<pre style="MARGIN-LEFT: 1cm"><font size="2" face="Courier New">var</font>
<font size="2" face="Courier New">  MyGlobalVariable: Pointer{ = nil};</font></pre>
</font>

<!--msnavigation--></td></tr><!--msnavigation--></table><!--msnavigation--><table border="0" cellpadding="0" cellspacing="0" width="100%"><tr><td>

<hr>
<font face="Verdana" size="2">JVCL is hosted by</font> <font face="Verdana" size="2"><a href="http://sourceforge.net" target="_blank"><img src="http://sourceforge.net/sflogo.php?group_id=45786&amp;type=1" border="0" alt="SourceForge.net Logo"></a></font>

</td></tr><!--msnavigation--></table></body>

</html>
