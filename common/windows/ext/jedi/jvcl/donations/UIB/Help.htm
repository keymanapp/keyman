<!-- saved from url=(0022)http://internet.e-mail --><HTML><HEAD>
		<TITLE></TITLE>
		<META http-equiv="Content-Type" content="text/html; charset=utf-8">
	</HEAD>
	<BODY>
		<H2 align="left">Compiler Options</H2>
		<P align="left">First of all you have to set some compiler options depending which 
			type of application you are writing and which database you are using.<BR>
			Edit the "JvUIB.inc" file in the source directory with a text editor and 
			uncomment compiler options you need.</P>
		<BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
			<H3 align="left">Database.</H3>
			<BLOCKQUOTE>
				<H4 align="left">Borland Interbase</H4>
				<UL>
					<LI>
						<DIV align="left">Interbase 6.0x, you don't need to set anything, you can work with 
							any database version.</DIV>
					<LI>
						<DIV align="left">Interbase 6.5, <FONT color="#336600">{$DEFINE IB65}</FONT></DIV>
					<LI>
						<DIV align="left">Interbase 7, <FONT color="#336600">{$DEFINE IB7}</FONT></DIV>
					</LI>
				</UL>
				<H4 align="left">Filrebird</H4>
				<UL>
					<LI>
						<DIV align="left">Firebird 1.02, <FONT color="#336600">{$DEFINE FB102}</FONT></DIV>
					<LI>
						<DIV align="left">
							<DIV align="left">Firebird 1.03, <FONT color="#336600">{$DEFINE FB103}</FONT></DIV>
						</DIV>
					<LI>
						<DIV align="left">
							<DIV align="left">Firebird 1.5,&nbsp;&nbsp; <FONT color="#336600">{$DEFINE FB15}</FONT></DIV>
						</DIV>
					<LI>
						<DIV align="left">Firebird Embed 1.5, <FONT color="#336600">{$DEFINE FB15} &amp; <FONT color="#336600">
									{$DEFINE FBEMBED}</FONT></FONT></DIV>
					</LI>
				</UL>
				<H4 align="left">Yaffil</H4>
				<UL>
					<LI>
						<DIV align="left">Yaffil 1.0.867 <FONT color="#336600">{$DEFINE YF867}</FONT></DIV>
					</LI>
				</UL>
			</BLOCKQUOTE>
			<H3 align="left">Multithreading and N-Tiers servers&nbsp;application.</H3>
			<BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
				<P align="left">You have&nbsp;2 choices:</P>
				<P align="left"><U>Sharing one DB connection with all threads</U>,&nbsp;in this 
					case 2 threads can share&nbsp;the same&nbsp;Database connection or&nbsp;the 
					same&nbsp;Transaction safely without freezing the server. Some examples of 
					server applications are: Web server, CORBA, DCOM, or Delphi ORB provided 
					provided with UIB. For an example of Multithread server try the the sample 
					applications in the "ClentServer" directory.&nbsp;You must set this compiler 
					option: <FONT color="#336600">{$DEFINE UIBTHREADSAFE}</FONT> excepting with 
					Interbase 7 (The library is allready ThreadSafe)</P>
			</BLOCKQUOTE><BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
				<P><U>Create one DB Connection per Thread</U>, in this case you should desactivate <FONT color="#336600">
						{$DEFINE UIBTHREADSAFE}</FONT>, and setting your DB connection to use the 
					remote protocol (excepting with Interbase 7), to have all threads working 
					faster.</P>
			</BLOCKQUOTE>
			<H3>Borland C++ Builder 6</H3>
			<BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
				<P>You can choose to use original Interbase header files (IBase.h &amp; IBError.h) 
					in this case uncomment <FONT color="#336600">{$DEFINE USE_IBERROR_H}</FONT> &amp;
					<FONT color="#336600">{$DEFINE USE_IBASE_H}</FONT>.</P>
			</BLOCKQUOTE>
			<H3 align="left">Dynamic &amp; Static Linking library.
			</H3>
			<BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
				<P><FONT color="#336600">{$DEFINE INTERBASE_DYNAMIC_LINK}</FONT>is the default 
					option&nbsp;to load&nbsp;Interbase library&nbsp;only when needed.</P>
			</BLOCKQUOTE>
			<H3 dir="ltr">Language</H3>
			<UL dir="ltr" style="MARGIN-RIGHT: 0px">
				<LI>
					<DIV><FONT color="#336600">{$DEFINE UIBLANG_EN}</FONT>: English language. (Default)</DIV>
				<LI>
					<DIV><FONT color="#336600">{$DEFINE UIBLANG_FR}</FONT>: French&nbsp;language&nbsp;</DIV>
				</LI>
			</UL>
		</BLOCKQUOTE><BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px"> <BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
				<P dir="ltr">Contact me to add your&nbsp;language.</P>
			</BLOCKQUOTE></BLOCKQUOTE>
		<H2 align="left">Transaction Rules</H2>
		<BLOCKQUOTE dir="ltr" style="MARGIN-RIGHT: 0px">
			<H3>Définitions:</H3>
			<ul>
				<li>
					<u>Commit</u>:<em> apply changes and close transaction.</em>
				<li>
					<u>Rollback</u>: <em>cancel changes and close transaction</em>.
				<li>
					<u>CommitRetaining</u>:&nbsp;<em>apply changes&nbsp;and keep the transaction open</em>.
				<li>
					<u>RollbackRetaining</u>: <em>cancel changes and keep transaction open.</em></li></ul>
			<H3>Rules</H3>
			<ol>
				<li>
				Transactions are&nbsp;started automaticaly when a Query is Open.
				<li>
				Transactions stay alive until all attached queries&nbsp;are closed.
				<li>
				Transaction rollbacked automatically on internal error (open, ExecSQL, next 
				...).
				<li>
					Transaction commited automatically if a query component is destroyed or 
					detached from transaction.</li></ol>
			<H3>Example</H3>
			<pre><strong>procedure</strong> TForm1.BtOpenClick(Sender: TObject);
<strong>var</strong>
  Transaction: TJvUIBTransaction;
  Query1: TJvUIBQuery;
  Query2: TJvUIBQuery;
<strong>begin</strong>
  Transaction := TJvUIBTransaction.Create(<strong>nil</strong>);
  Query1 := TJvUIBQuery.Create(<strong>nil</strong>);
  Query2 := TJvUIBQuery.Create(<strong>nil</strong>);
  <strong>try</strong>
    Transaction.DataBase := DataBase;
    Query1.Transaction := Transaction;
    Query2.Transaction := Transaction;
    <strong>try</strong>
      Query1.SQL.Text := <font color=#333399>'SELECT * FROM MYTABLE1</font>;
      Query1.Open; <font color=#666699><font color=#333399>// transaction </font><font color=#ff0066>started </font><font color=#333399>(Rule 1)</font>
</font>      <strong>while</strong> <strong>not</strong> Query1.Eof <strong>do</strong>
      <strong>begin</strong>
        <font color=#333399>// ...
</font>        Query1.Next;
      <strong>end;</strong>
      Query1.Close; <font color=#333399>// <font color=#ff0066>Stay in</font> transaction (default action)</font>

      Query2.SQL.Text := <font color=#333399>'SELECT * FROM MYTABLE2'</font>;
      Query2.Open; <font color=#333399>// transaction not started because Query1 have not closed the Transaction.</font>
                   <font color=#333399>// On <font color=#ff0066>error</font> the transaction is automatically </font><font color=#ff0066>rollbacked</font><font color=#333399>(Rule 3)</font>
      
      <strong>while</strong> <strong>not</strong> Query1.Eof <strong>do</strong>
      <strong>begin</strong>
        <font color=#333399>// ...</font>
        Query2.Next;
      <strong>end</strong>;
      Query2.Close(etmCommit); <font color=#333399>// Transaction <font color=#ff0066>Commited</font> because Query1 is closed</font>
                               <font color=#333399>// if Query1 not closed then <font color=#ff0066>CommitRetaining</font><font color=#333399>(Rule 2)</font>
</font>

    <strong>except</strong>
      Transaction.RollBack; <font color=#333399>// on <font color=#ff0066>error</font> transaction </font><font color=#ff0066>rollbacked</font>
      <font color=#333399>// ...</font>
       
    <strong>end</strong>;
  <strong>finally</strong>
    Query1.Free; <font color=#333399>// if transaction active then close &amp; </font><font color=#ff0066>commit</font><font color=#333399>(Rule 4)</font>
    Query2.Free; <font color=#333399>// if transaction active then close &amp; </font><font color=#ff0066>commit</font><font color=#333399>(Rule 4)</font>
    Transaction.Free;
  <strong>end</strong>;
<strong>end;</strong>
</pre>
		</BLOCKQUOTE>
		<P>&nbsp;</P>
		<H2>Using TJvUIBQuery&nbsp;</H2>
		<P dir="ltr" style="MARGIN-RIGHT: 0px">There is 3 methods to use this component.</P>
		<UL>
			<LI dir="ltr">
				<H3>Open (Allocate statement&nbsp; + Prepare + Execute + Fetch)</H3>
				Typically used for SELECT statements.<br>
				You can't use the QuickScript property with this method.
				<pre>  
  Query.SQL.Text := <FONT color=#333399>'SELECT FIRST_NAME, LAST_NAME, SALARY FROM EMPLOYEE WHERE DEPT_NO = ?'</FONT>;
  Query.Params.AsInteger[0] := 623;
  Query.<FONT color=#ff3366>Open</FONT>;
  <STRONG>while</STRONG> <STRONG>not</STRONG> Query.EOF <STRONG>do</STRONG>
    <STRONG>with</STRONG> Query, Fields <STRONG>do</STRONG>
    <STRONG>begin</STRONG>
      memo.Lines.Add(format(<FONT color=#333399>'%s %s, Salary: %f'</FONT>
         ,
        [ByNameAsString[<FONT color=#333399>'FIRST_NAME'</FONT>],
         ByNameAsString[<FONT color=#333399>'LAST_NAME'</FONT>],
         ByNameAsCurrency[<FONT color=#333399>'SALARY'</FONT>]]));
      Next;
    <STRONG>end</STRONG>;
  Query.Close(etmCommit);				
				</pre>
			</LI>
		</UL>
		<UL>
			<LI dir="ltr">
				<H3>Execute (Allocate statement&nbsp; + Pepare + Execute)</H3>
				Typically used for "Data Pump". It is the fastest way to execute the same<br>
				operation many times without having to prepare the query for each operation.<br>
				You can't use the QuickScript property with this method.
				<pre><STRONG>const</STRONG>
  Datas : <STRONG>array</STRONG>[1..10] <STRONG>of</STRONG> TARecord = (
    (COUNTRY: 'blabla0'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla1'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla2'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla3'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla4'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla5'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla6'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla7'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla8'; CURRENCY: 'blabla'),
    (COUNTRY: 'blabla9'; CURRENCY: 'blabla'));
<STRONG>begin</STRONG>
  <STRONG>for</STRONG> i := 1 <STRONG>to</STRONG> 10 <STRONG>do</STRONG>
  <STRONG>begin</STRONG>
    Query.Params.AsString[0] := Datas[i].COUNTRY;
    Query.Params.AsString[1] := Datas[i].CURRENCY;
    Query.<FONT color=#ff3366>Execute</FONT>;
<FONT color=#333399>    // for better performance commit every 1000 records
    // Transaction.Commit;</FONT>
  <STRONG>end</STRONG>;
  Query.Close(etmRollback); // change to etmCommit to apply.
<STRONG>end</STRONG>;
</pre>
			</LI>
		</UL>
		<UL>
			<LI dir="ltr">
				<H3 style="MARGIN-RIGHT: 0px">ExecSQL (Execute Immediate)</H3>
				The fastest way to execute many differents SQL statements like a script.<br>
				Setting the QuickScript property to True you must have <U>one SQL statement</U>
				<br>
				<U>per line</U>. This method can use parammetters but can't return results.
				<pre>  Query.QuickScript := True;
  Query.SQL.Add(<FONT color=#333399>'INSERT INTO COUNTRY (COUNTRY,CURRENCY) VALUES (''Test0'',''FFranc'')'</FONT>);
  Query.SQL.Add(<FONT color=#333399>'DELETE FROM COUNTRY WHERE COUNTRY = ''Test0'''</FONT>);
  .../...
  Query.<FONT color=#ff3366>ExecSQL</FONT>;
  Query.Close(etmCommit);
  </pre>
			</LI>
		</UL>
	</BODY>
</HTML>
